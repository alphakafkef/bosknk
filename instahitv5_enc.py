#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYVw0AABuS1dQV3ljNnJhYnVWSXFTV2xSYU0wMXVWRjFOSEdOdVZGRUNaUlJnV1JnVkNKOXRuenFPWVVOZ0RIQXFIMFNHQ0o5aEt2eU9ZVU5nRHhBcU1IMUtDS05lbnZmOHB6RGVudlI4Q1Awd1ZHai9KbVdIRUlBZFkxRXRFbDlpREZrallIU1FLSUFPSG0xaW95NGNERmtqWUhXUUtKSUFJbTFqWDJiZUNJRVNDSE5qRUc5UllIUmZwUDFORDE0ZVd4eDhwekRlSnZSOENQMHdWR2ovSm1XSEVJQWRaU0V0RWw5aURGa2pZSE9RS3ZmekZHMUhFRzFOWlJIL0VRU09ZVU5nRUhBckFUSXNDS09EWUY4OHB6RGVLdlI4Q1Awd1ZHai9KbVdIRUlBZFp5RXRFbDlpREZrallISVFLd0V5S20xakhQMGlDSUVTQ0hOakVHOVJaSFJmcFAxVUQxNVRwSlY5cFN4bVpRa2xNUGdyVkdqOFlGWnVDUTlvWnlFU0gyYjBJVE9VWTI5T1lVTmdFMEFyRWFTdkNLT01abU45SVJIOURRT1NDMERrREZrallIeVFLeU52TUcxam5tOGxDVVd4WDE0dUNRamdWbFI4QzFmbElSSUdud01ITFJwaW8wUmZwUDFXRDE1RFZ6SDlwVGYvWncxSEVHMU5aUkgvRVFTT1lVTmdGMEFyTHY1Y0NLUmJGbUQ4cHpEZUt2UjhDUDB3VkdqL0ptV0hFSUFkQlNFdEVsOWlERmtqWUhnUUt6VmhuRzFrWFJmMENJRVNDSE5qRUc5UkFIUmZwUDFBRDE1MEJ6MDlwRzVWS0cxa0QxMDNDVVd4WDJWdUNRamdWbFI4QzFmbElSSUdud2NITFJwaW8wUmZwUDFBRDE1MEJ6MDlwRzVWS0cxa0QxMDNDSUVTQ0hOakVHOVJaSFJmcFAxQ0QxODZHVVo5cElJY0JHa2xNUGdyVkdqOFlGWnVDUTlvWnlFU0gyYjhJVE9VWTI5T1lVTmdHMEFzQnhrbUNLU0luR3g5SVJIOURRT1NDeU10RFFWdVkwOU5admIxSFJObFptZ3dDS1ZiSTE0OXB3U3FMUTFsQnpBdkNLV1FuSkQ5cHhraU13MWxJS0liQ0tXc1d6YjlwenRpcEhTWHBVWjdESGNhb0djT1kxOHVEUmZjb2wxMERIZ1VFUEVGTXh4dkJ5V3pGVUQ4SDB1VEYwTDlwbDhnWjBTVm9Ua2dERjlpWVBBT1pQa1RMMFJqQXpEMENLQU5HdklRWHlFT3AxRXRESUlVWEZEdW5URU9HUTB6cVJTWW4yZjdJUnlURDNPSExSY29Gdnh4V1FrTURHT29MMGdPWVQxWEZJRVdFeEFtSVRPWEowMGNXUEQvWnlFV0cwYnVJVE9aTXdNT1pGZnpHMUVXRzBidUlUT1pNd01PWkZmekcxRVdHMGJ2SVRPWENIeDhwekg4TFJJWW54NGNFUk4vRzBwdUNRamdWbTFIRUcxTlpSSU5aR3lTQ0pBdUttMTBFd1YwREdSOFpRWjlxUjg0QTBSa0d3ajFDS0VMQ3djT1pKT1ZBbTEwTEhEOURHU2xJUXg5cVRjWERSUmxZMk43Q0tFbUcyTU9ad3FtSXhEY0FHOUNWR2ovSjJNT1p4U2NDR01jS3hqZkNLSVBuMHlPR0h5ckhSNDhZU2prSVROK1hKNUNCR09URzBSZ1YxSGlZd0lhQ3p4dVZGUnVvbDRqQlAwZ0F5YjJuek9STUtXMUF2U0dIeWNBRHowZVdtTHpCRngvV3ZnUkUxODNFeEFQVkZIZUVIRGtYMFdGWkhSbUR6a1VadjlSRjBXaVl4QWJxUUgzRElEN252dVRYdnlXSFBTR0htWnZESUExWFBXTkNROGFNeE10SXZqM0MxdW9IMXlSRjBqa0MwSGVwbXQyRHpqNFZHTU5CMGd1V3hNdEl2ajNDMXVvSDF5UkYweDhZenB6cUgwbUVQNUdWbHlTWDNaNEF4V2ZCUFIyRFFnWUxGTVRFUUlIV2w0akJQMGNFUDVVR0gwYUF2SW5YRmdSRTE4M0V4QVBWRkhlRVE0bFhIV0RLMFdmWXdONFlGZ1RMVHVSWW1TZElTNUREemtVWnY5UkYwV2lZeEFicVFINkV5OURER3R1b3oxbVdSTjdLSUlsRFFncUt6dWFXbVZ6VjBFeUkxMWdGUUVlWkdXU1dQOWVBUkxkWFR4ZkQyT2dMdmtSRkpFb1d2NGpCUDA0Q1BnakIyT05CeXBsSEhFeXBKY3lESVd6bmx5Uk15SGhFeEhlcG10MkR6ajRWR01OQjBndVd4T2xGUU1qRXpPQUdHTVJGMHlaRDBNdEsyV1ZESUVCWWxEY01RNDhKeERqTG0wYkN3ZmpvbTh2Q1FTRVZ4RGpMME5jQ3dqZUYxTVZaMHAyb1FBT0UwU21WeXFaSnZma1p5TDlEUHl4Q3drcEVRT3dEUHgrQ1BnRUpSdG1IS1ZpWG05UUl6TVZaMkVYTTBBWnBIVmVaMWNsSzJXUEhJWi9CUkx3bjNaZ0V2dWlCRnlUTFF1bUdSV2dYbEwvRFVXVkFJanhDMTVTV1JJcFpJNDBESUExSUd5Tkgwa3dNSFdmV0lFaVpQOU1EUXhlQ0hqOFh4RVdNU2ZqRXZSZUFTcGVDYUVjWVA0bUdUOWtFRmo1WEpJT0h5ajdGUkwrVjBqZ1p5OVZvSEhlQ0hnZkh3amNXUEg3WDBFdkx2MU9GMXVZSDBPbFdQUm1YME9QTTE5Uk12cHpDR095THhMNlpSYjFXR1pqRlRSN1d4U2dvMTVpWlA5TUcwSGluRmtRQWxTR0h6QWZESVdIWDFrU0wxMWtCME43SUZxa0NLT05DbE1SRkh5Rlp6Z2ZLYUV4VkY0dm9hTmlaU2t5RkZqdVdUOWlWdlNITDAxZW9SQXZMRlJkSVRnSEVSYjhJRlNPQTEwZUp4TGJCU3EwREk5V0IzV1RYUXVpcUhPekp5UmpyYWJ1Vkg0L1d2UndZUkQxVkZ0Z0syRHVZR2oxS3ZSdVdHMUNERjB4WjBXT1lHTC9FeFJnRlJnV0RGMUVISGtPWUpBcUhSUmdxSnlIREY0bHFJdU9ZeEhmS1JSaEltdXRERjVjRVRFR1l6cDdHMFJpVzBBZVhSV05xU2piRHhPMEtIUmlEMlI3RkdOZUYyY1FXYVNjS3h1Y0tTRWxERjlJRFA5SEVHY3lNSHhqQVRidURGOW5DVEFXWlFrSUcwRU5MMnFZVkdqOFlGQU9ZMk1rVncxSEVHMU5aUkgvRnZwN0p4YjJNUWJtb3dPUVpSOWhJUjRtV3lxWURtV3NKbEVVWTAxaUEyMGtMeEFvRFFSa0xQSVpEU096bkZWa1lUdG1IeE9mQ2xBeVdJT3FvS1ZqRnl5WkNtVmNNUTlTWjBWaU1ROHZxUzlFRXhPS0F4WjNWYUVzSFM0akZ4cG1BbFNPRklrUERUa0VZMU5sWXpwN0h3T0RWekRiREg0OUNTcGxMUFp3V0dPWEUwMHVaUmN4WTIwbVd3QVZGSE9JS2xrQVpIa3RXVURsRVNBeldRV1JLVVZ4WlRjMW4wYmxFU2tsVndTWkltY0laSHFCREo0OXBQNWhxR3FHWXo0bVpIa3ZEdnVVV204Y0FRMWtDUmNZWnk5b1lIZmtFMnFnRVFWY0FsU1JaenFISHdnUkYwV2lZeFYyV0hJMFhtNVVIRnRpblRJaFpsOWJvbWI3WlRJMExHWjJWMGowSHhFeUkyTmNZSjhkTUd4ak1KV29abVN2cFRTa0VGZ2tEeUxqTUpXRkRScUpJdlJpWjBXWERQeU5CMUhiWXhFWFhGRUZCMldwbkdqa1lQdUZJUUR1QlJTa1pTT2VuSFYwVkd0ZEp4dHdEU09PWnpPS0hIZjBWR3RkSFE5SW9ITVNYbTVVTGw4a0wweVBIUVdSTDJmaVdVRUxDUDQzb0lrdUdSU0dwbHh2QjJxQVlTQVBubU9PWkdrdkNKY1REd095bngwMXFRNWNueElURDJFZkNJeWRvbDFSTDI5UllHT2ZEek1aWDBBekZ3SU9vM1NtWVJTR3AxdWVFM1Z6WnlTUUZ3dXNvMFdkbjJxSEFLV0xYeDBsRXdSekcwcW1IUHVtQkpxSnBQQVNFR01iVm1PQ0tVTitEMnVvRHpNVEVRSW5ad04yTXZxZ0UwV01JMDVSTXlFcEZSTXRHR2ZqRVJ5b0lVU09IejFlRXhPa0tHY2VFdnVZRTFMOEVGeVRDd1pnb1BFVkZRNGhDSGplRDI4eXBIQWFuUkltRlFFQ0t4V1BvUXR1QXhONnAxSWJFUHVxQ0djUllITmRCeFdlR0ZTMHBHOWJWeGtPSVFOMVpSQWJLUHBiQ0tOeEhHamxEMUQ3TGxwbUZUdXNEemdBVktTUkQyNXhxSExjcUZMMkVSQWhFemNWQUd5SUFtY2JMSVNGRVRMaFl2eU5DU2JtcVJXZUJtUmJFeEQxSVBxVkFHT0NBd3VDbjBOdkVUTGpGUHVOcGFJVFcwRVFvekhlRElad0QzSGNZSFNXS3dxZUZGTDVFUnl4cGxjT0JHZ1lCd2d6RlFnbkRHU3JFME42TXhFbkp3MDlvRmIzWTA5U29UT09CSU10cUhNUlh3cGRFVE16RUZ0MkRQU25MSEx2RjE4Y1hKRHZKMk4zbjB4ekJIRVdNVVpkREd4N0ZtYjhZU2NlTUhBekVsZ3dESDB4SXlFVkFUYjlabUwrSUlXSUV2V1pFdnVTTDF5bEFIRVFveE1kRlFIYUZHSDRHMmdOVnhFelpSdGJEVVcxRXZxUkQyNWJBSEhlR200Z0NHMWdYd3BpRzA1bEwwTjZFS1N5RHpraFdsQVRYeWptcHY5RFkwcXVBdkFyTDNONEcxcVFLd2tWRVM5ZlkwODlWMWtSRjFPckxtTHZDSEQ1RUYwZEpsY05CMTFzVjBONnBsNUhWbFZkQ1J5UUdIT05YbEVrVmFXQkV4QXpDbVppSEhOdkEwU0lBVGdFRFVSalhUdVRDSk1rVkhPbEUyMWZFUmJkWVNINEJUeUVuMHQwSlFSa0ExV09KM0Q4WEpBb0VtcDdMMlNERVJ5a0d2ODJKd01kSjBTRk16cWxFVExqbm1WMkp3TWRMSFNHcUlFT0JJTnpYeUFURVAwdlZ3T0NxSmNrWnpIZUlJRG1XeXg0SVJPZXBIOVlaekgwTWx0bFhJZjJFeE9mS1BIa0RUZ2luM05rWVB1VENSU2hWSHR6WkhxSXFQV05wVVcwSkdTWkxQdUJaSnRpQVJnTkhVTnpIR09lR3Y1RFkzT3lNUmtOcHprb1d4TVJuM1ZlRVJXc1gyWm1GRmNSSUdWaUN6MGRGUTRnTXZ0N1h6RGdNR0FPcGw5MER6MVNWR2Y1R0h5Y0lSSGZNSjloWDNFQ3BSdU9CUGtFcUdBb1lHcWFESjFpQndWa1lQdDZCUVd0WHhnVVpKQU5ZSHRpR3hxSUV3VmJMUWdpREdXaFcxeGpGeU42Qm1WY0p5dGpZUElmV0dFT1pSOHpKR09lR3hOYlpKWmhWSFppR0kwMER3U1VYUk1pRFNSL1YwamxFU1ZkRFFaekpHSUpaME13SXlFT1p2QTFWdmcwRzNPWURJRWJMM0VPSHhWaEt2anVXVDlKRVJ5eE1QZ1BubDl6WEdBT0pHV0pEU09xcHlabUR2OXpHbVp6WDI1eVltT3FYU01PSVJIekNtQW9ZMmdDWVB0NFkwcGtMS1dZWlBFbk1sQWpFUnlnQzJBTklsa3lXdzFrSkg5ckMxY0hwVDgvSkpSMHFHOW5wUFZ4RXZ1aUhHU1ZCSmowTVJNUnFHY3JaUDh5VjJrUG9RdHVBeE42cDFJYkVQdXFDR2NSWFRMOUJ4V3lHMXF1WlFFT0RQQVJNejlsQ3hMdksxRVVFUnl4WGFPT0h6TU1XSFNIRUZwYURKOGNEbU4vSkZmYkswV2ZWMHR5VkpBeUtSanVWRnVySUhSM0JJV2FNbHBjV3Z5TkJtT0RYUFdzS0ZBZlgwRDhadmdhVzBFc1pISVZIVHgyRXhIL1l3MVNZU0V6Q3pwenFGOG1FVExoVkYxYVdhSURDeFNIRVRMdlZGUnVWdzRiS0l1Q0JKcGFFUzhrRXZ5bld3dVRYUjh6WDBJY0R2SW5YbXhsRHhTa0MyTC9ZSEFjbnkwZURJQTFWSFNhV2FJVVlITGRXMWtYVkZSeVhQRTZWR2tCQ1B0dUNSNDVXbFI4R3d4YVZHa0JCRnB1Q1I0NVdsUjhHd3hhVkdrQkJGcHVDUjQ1V2xSOEd3eGFWR2tCQkZxZ1pRRDlBRlI4SW1MY1Z3Z1FuMEx1Q1VXRVpsU1ZGME91VkZSeEdRUzZydlJ1VkZSaVZGUnVWR3R1VkZSdU1QUnVWRlYvcEc1YUhLV09ZRkRtRHhSZ0F3OVRERjFWRjBjT1lJY0tHeFJnb1RBRkRGNGVvd3FXWlBjak14dWNIemNxRkdOMEhKZ09Zd2NWcVJOaXFIU2NGUXRhRXhTUVdsSWlJSHVjb3pPMERGNUNKRklIRUhBZU14eGpDS053REY1SElJeVdaUnB1V1JSaEtJZ25GR09EV2xJT1l6TXVKMHhqSkYwekRGNWlNMWtXWlRWbVcwUmlWMjFxRkdPZUJGdU9ZbGttS3h4anFReVFFd3hpV1F5T1lteDNuSHVkWVAwYUh6TVhxSWtITFJreU0xRXRESUgrWEZEd1cyMDhwekRlR1BSOENQMHdWR2ovSlJ5V1pGcGpKUkQvQjBnZkRGOUhMdldGTXh1MEIwdWRGUVdPREY5em92TUZNeHUwQ0h1Y0lTcDVER054V1VFRk14dTBDMHVjS0kwNkRHTjJaRmtGTXh1MERIdWRZVUgrREdPVkNGeUZNeHUwRDB1ZEp3NVFER09uWkZXVm5JQXhWeVd6RlVFU0gwY0VLUzlUQkliNFdIUmpxS05rR2xSem5JZ1ZuYUlzSHh1ZG9SY1NER1JkbzBrSExScGlvbWtsTDJWbFZ3eDRIRnlZWHZ4ZkgwRU9WeWJiR214YUVSdGpFR2ZlSHZSOENQMHdDSUVPRkZNVkF4TjdaSUVTQlN1REV3eWhDbXlPWkdnSVlTV3pGVUVZRlRjZkZ4SUdGVFd2TWxSOENtUnhFUk4vRzBwdUNRamdWbTFIRUcxTlpSSCtZMUFSR21jVVhGUjhDUDB3REdTQldQMUZNeHUwR0h1Y0lTcDVER05nWGxTRk14dTBHeEw1SHZFZkZseWtFMFNPWkpjUkp4eGtaSElTRXd4aVdReU9aR1dDWHlXekZVRVhFd2J2RUdjT1pIRW1CU1d6RmFJdElUT1VZMjg4cHpEZUZQUjhDUDB3VkdqL0FsTVJDbWdZb1JMNUp3dHlER08xcFFTQ1ZGTWNKMHVkcUk5RkZUY2ZGeElPWkZjaUdTRXRFbDlpQ1VXd0x3VnZCR3VFWEhmZFhGa0dFUlJ2SnZ1Q0JGcVRMd09TQmxnRlZHajhZRlo5SVJTV1d3MUhFRzFOWlJIK0l6TjdKeGIzVndjT0hQTVBaUDVFTXY1T0gzWmNWd2dzWnhnMEFQeWdFUWZpbkpFa0x2UnVWRkFFVkhTR29Ha1BISVovQlJMd24zWmdFMFdwQXpPVEVIMGNZME1Sb1B4MkV2V0lwME9SWlREZUF4TVNFUmNRWjFrQll3U1VEeXluS0hNcm9tWmlFVEw1RlFIaW93dWFCd09PQXlBTkVQOXVJUlY5cFA4K0h4SXdKeDgyRFVXd0dQOVRWeDFWRkhNUU16QXRCSmtVQ3prUW5GU0JBR1ZiTTFWZFlLRTFHVGdSTXdOZkZ2Z05ES0RkWDBFVEpKQVJNd05mWW1jWVd4U2RaeHlPQzJXUW5TZ25wdmdPRlF5R1gwU01vMXg5Q0hxTkpISGZLSXBjQ0Z1RG5HTVBvVGp1TVFPWHFSeDdZMnVpQVBmZ3BKRGRaR3liSmx5cEQydW9KYVZlRFRwdUhIQUFxU3VTQ1RWMkIyMVBvUk9mRHdPekQxdVBYMFNWTDJPUG9QSC9Bd096QjBXR1pKQUVJSU1OQnp5a00wV3lHSE8xWkpXWkdQYjNCeTR4TEdPeXFTVjhaUmIxV0daakZJZi9BUFp1b1RSaURJRGxMR1phRUhSZUFISU1IMVNHVkZjSEZKMDZZMmdRV1FjQkRsOXJEemozWEliN0ZLQVZHMEl2WlF4N1dJRC9wSGZpRzJiN294T2tKMHFyRElFQXBtNHlJUTlrRmw5Q253Z2hEVVNvRTJxUk1GY1RYdklIQzNTWVkwOWRCMjVOcElnVW9IV2ZvS05mV2xielZ3RWFXMEViRHhTSEVTY21FUDVGSzNIdVZGUnZFdjB2cEhBUEVGMHZXejRqQUdIOEV4TVFEd0xlRXk5ZW4wdU5weHRtQjBNU0dGeGlFeEVmWEdNVFcyYmFaeFNIRHdEeE1scGxHRnlTTEpPYVgwSUxJYU9YVkd0M0YycU9BeGdUTHhMYkYwVnVES055cFBnUkZIeVBvenBiV3dxVkRJRVJZSnlSTUtaMll4cU5Mekw1TWx0ekEwdU9JUkRnbkhFeXBtTGhFMFJrcHYxYVcyTnZEUk1RREtJZ0VGa0hNdzVUQVVSa0Z4TGJGMFZ1REdxcU0ya1NMeUVZQTBXZkRUMDRaUUhmRlJrU1lGVnpvd04wRElmZEVSanVNenRpR0o4a0NtV1JLVFp5RFNJa1kwampNSVZnR3hJd0FKTjVEUWdqWlFrTnB4dG1CbUlPQ0l1ZU1sTTBwS09URDJiaVltYmxMdkFxRXlmL1dsNHVWdjVzRUl4NUF2a1dYMEFwTGFPUG9ITVNaUGdSQ3hibER6ajNJbDFOSXZwdkswTGJvMHkxbkg1WEZGdU1FSVdrRjFPQXB5NGluSDVYRkZ1TUVJV2tGMU9BcHk0aVdRampCMlI0SFR1d0VsZi9EMXFlV3Y0bER4TVFHSE90WkhTSElsRGhEd0h6RnhqZUV3RCtXUkhmSVRMK0UzTndZSmNWQVFSZ3B4TXNuSWNFRFFjTFczTm1KYVdzSVBEK1Z2cXNEemp2b3lSZUgyamVYUnRtcVBWeERRamdXM1JlQ1NxcU14dG1HMTVkREdOOG8xSVZaMlNkb1JMYm8wYjJaMWNsSzFWeENJZ3JNdmYvRDFxZVYxV01JVE9UWHZNQkxsZ1NLSnFXVkZSdURKV01FSVdrRjFPQXB5NGluSDVYRkZ1TUVJV2tGMU9BcHk0aW5INVhFeU9OSlFOYklsZ0ZuM1N0SjB5UExSa0JXUDVKS1I5WkFSMVhHMDFRQnlJQ0x3amhvMDlacVBXRUcwamZEUk54VmxWeHBSTHZvbWNiRTExc0pROU5FbVNzblJ0MXBTSC9FeEUxQnk0allsRXVISFd5RXhqOUQydDNBbFdOQjFXS0JSSXZEUEgzRVRNYUJ3OGpBd2NxRHhSMVlJcUpFdnR6S0owMURTa09CUk1RWTJPZ0FUU1dCMWNURDJNcUNHRXRwbDFnVkZSdUMwZmVDU016TVI0bUNITjBEMk9nTUhTUkYxRVhxRmdSQ3lqMFhtYjVBR0xlQ1MxTEZTT0FweTRpbkg1WEZGdU1FSVdrRjFPQXB5NGluSDVYRkZ1TUVIZjdCRmY4SXpJWkV2dVlEd09OQjFFRXFHQW5weTlMV1FNSUZRTGVFUEFRcUhXZlZ6NUVYMEwwRWxwZUNTTXhHUkl2WlFqMlhtOVFJMkwybklmbE1GRDJJSHQyWDFSNUdKTWNHeGNXWFN5U0hhU1lIUjFsS3Y5Y0d4Y1dYU3lTSGFTWUhRTWxFSURlQ1M0akVIOVpDSUFZRzJaa0V5T0dJMGoxRnlBS0dTTUlIMXFHSEo5R0kwa1hISUFLR1FXd1hta0pNUmpoWkdFd1owV0RFU1ZqRUliZW8xdHVCUXFCTXhTSElhVjBWRlJ1VjFSdlh3dUZYSElucVJjdFZHdDNISjlTWDA1a0RQV3VDdlJ4RXhBZFltT1RFVGdsWDBFSkN2NXRBejR6SUpEZ0d4TGZGVHB6TGxaYkVJdUpwUmJ1WUdPV012UnVXRkVwVkZSdVZ3NGhaUHArRnpwenFHZnlFUDVGTFFmdVZGUnZDdjV6S0lPWkVJanlaSmJ1WUdPTG5sUnVXRkVmVkZSdVZ2THZYeFIvb1ExaXB3Z1hFSWN2Q3k0dVlHTmtLdlJ1V0ZFc1ZGUnVWMVJ2RVIxdUwwRXhMU01VVkYwOG4zTnVWRlJ1V1BTS0xROGFWSXF0Q2xwdUkyTi9XbFNLTFE4YVZJcXRES1Z2cEdjc0JQVjVIMjhsVnd5UFp3ZndISXhsWmxBRUpHVm1WMVNNWndadUkyU1JFRldqVmxMbVZJcWxHdkx2QklrelhQVjVNSmpiVnd5aHB2dHZCdlp3WFBWNlZsWmJWd2JmWEZ0dkJ3SGlYUFY2Q3dIYlZ3Y1VCbHR2QnlPQVlQQUdEUnlVWlJJU0MzSHpZR1cwQkZTS3B4NHpWd3lwTXZ0dkJJa3pYUFY1TXZaZlYxV0pMSUx4bktPdkIwSXFMRzB5VkZnRVdRTzZydlJ1VkdMYlZGUnVabHB1VkZBTk1QUnVXRnVyVkZSdVZ4TU5JSjlaS0ZSZlp4eXJWSE0xQTBWdlhTTUNJdlNUcUhPU1ZsZ0RueEx1THdnQ0xQUmZaeHlyVnZiOUlTYnZYU01vTHZTV0czV2xWdnVKS2FEdkVTWmFNdldRcEpjeVZ4SWRMMlo5RXdiZURGV3NCUFYzVkhMZktTWnZMS09HcGxaYllJRHlWbHVmcDF0dVlUTmFMRkFOb3dMeVZGZi9YbUx1WVRObEVsUnVYdnB3VkZjWUJtNHVLVFNJTHZSY25KZ1ZXR3VacFNSdVZGUnZFdkltWEhxMEVSZ0hveDVRblNqYVhQOWhCVHA2RlFFTEdGdVNZUXgxcUhOOENtRHlFUkRmTEhxUk13T0dEUFJ1VkZXVEd2dWhBR2NQb1BJSG9tTmlKSE41WG0xWnB2QU5CeU1VRHdNSnBUWmRCeGZ6REpibEZIUi9MeEFiSjFjbFgwU1ZCSVplREl5aUpHMDlFME9NRUZrcUlseDlYU09jQXhXZm9QU3haUmMwRkdmaW5UODBYbDFrTVBia0JKdW9YSWtRblNnbnB2Z05NbFNFRDAxMEpSSDhMd0w3b0hXZkRUa1BaVE1RSlJWZURIdXdMUldmV0c4MlpUTDdEeVprTDFTSUl4TjZuS1NhRHpJQURVSGtMeGtaWHdwNkt2RXVaVEkwR1FiakZ3SHlabU9XSm1OaVdQVjNwM0lQSEZJalh4TVNxSVdTRFFjQk1JeVNZR1NqTUhONkd6SU1FRjBkSjBjTkIxMXNWME42cGw1SFZsSUFYU2NOQ1AxTEF2RUJHUDhmQ0tPekNKV1BBSUg2Skdia0JQU0JGUXVIREl1VEVVSDZLd05pV0hXcER3SUpud1Zpb21IMkV4U0FZeGJsRVB1eVpIODRHR2tVRUhTRk14a09FbEh3WHZFTkJ4THlMR2d5S0prckR6ajJKMUFSWXlXd0JsVjFaM0ljRVRMNUVGY09JUjFmVmxSdVZGVitYS0lpcG0wOXBUOHlMbUx4QzFnQkQycWFNVHVPSVJXV1hGUnVXRkVBVkZSdVZIYnduVEwrcDBSYk0zSWlEUWpkQTJEdVZGSHhKRlJ1VkZBRVZ4SXBBUFdUSFFNaEN4SGZCR0xrRUkxdUNGSHVCUXF3blJONkpSTXhESUFlbnp5UUxKTUlaUHh3cDF0NkVJNGFHbHR1WUY5WEZ2UnVXUVJpRG1aZUNRVi9KRlNHTUhOOFh4QWJWRlJ5V1RIdVZGUnZDd0FLRmwxb0VJY3ZDeTR1WUdOa0t2UnVXRkVzVkZSdVYxUndWMUVSSFJSM0tKdUxWRlJ1Vnc4aVlGQU1HRlJ1Wm1aYlZ5RVhJUDR1STJOL1dsU0tMUThhVktXU1pQNHZJUmNIWVBWNURJUmNWSXF0Q2xwdXB4NDhZdkFFSkhENVdUeWpMd2dTS3kxbVl2UmVIRkRqcmFidVZGUjVYRlJ1VklwbVZGUndEVER1VkZIY1pGUjhDUGdxVkh4L0JtMHVZSFIyTFBTeUlIZmRWSDFQRzJwdVlhRDhFdldYRTJxUlZIdXBGM0R1WXcxaW52WnlIelN5Vkh5TVd6andFbWYvRUZBT0cxU0lWSlp5bnl0bUx2OCtaRlN2QjBwZ1ZHa1NaR1Z2TFVEZERQUmVKd2NJV1JBc1dQZndEeUgvRGxSZUp3MUpXRklOQXYwd0tLT1lFRlJlSncxSldIT29DbDR3RHlJVkV2UmVKeEFMV0lqdUZQOHdEeUlZRWxSa0xKU0JWeElNWmxMdkVtTXJJRlJoQVRrbldRNUhLSk96RzFPT1ZsRTBGMk1MV0lMZ1hLRHVNVGZ3SnZMOUxVSUZWeTg0WjIwdVlRV1dLdlphQnhxZld6NVJJbEx2TEpxQUx2cDVYdmNQVjBPaEd6YnVGSU5mTUZwNFdRMGlWRjAyREZqYUh5RWhBRlI4RUdSOFYxMWpHSkRhTXlSZldQSDdvbDFnVnZ1S1pTOHVNbFNVV2w4M0tGMHVXVUVZTXl0eUl2MVBXbFN4bmxBbld3MXRxSVZ2S211VnFQUmZaeHlyVmxwNkUyanpveEVmWUZXdU0wMXZXbXhkWHY4YUEwWmRwdnlaR0pEMVZHT05BRkhmS0pjdEZ2UmhxUWNFVkZrdFcyUnlCenBsQVBSZUNtMDhWRmt0WnhwdVZGYmFWbFJkRm1mK1ZJa3VJS1Z3RW1mL0VGQU9HMVNJVkpaeW5sUnVGUjB2RkZWY0tRT0JWeGNVblVadVgxYjNJUEVRS2xEZVZscDZaMFJ1WDFiOUl2RXNXRjBmVjBXSUR4RHVYMWNOSWxIeURRTGdWMFdJRUhIdVgxYjlJdklwVkh0aVdQRDJKeHR1WDFiOUl2THZDU1NjV2FSYW92eHpCdzFKQUZSOEVHUmxWRnljbjB0Y0xhQUVDR09YRW1MNFZ6T0dEbEVQb0hSK0JST2xZUzV2RUo1SUl2Y1FuSk1USHZIOVltU1lEemtoRVNxa0N6dXJMdkgzQVJmMlgwRVVLbXFURVBBS1d4RGNxS0VLQW1nbkZIeVFMVGtYbjBMOEVKZ2dEUWZqRzJFTkl6TUlCeElNWW15Q1ZGMGpCelJ1VkZIeEx2UnVWRkFrWDE1aUN2OVFuU2dQTXhNUkFJYmxaUU16VzIxVUR5eUtHeEV6SVNrVkV6T0FCbU9SRklnSHBIU0ZxU3FIRHlTR0NtdVRWMmdtWUhxUEtRTXREemo0VkdNTkJhQUluUkRiS0cwNkVRT3hvSGtURUhFWERtQXBHdjRrRTBXTUp5V1JGMFdpWXhWMldISTBZMjQ0TW1iakFSU05WMEV6bzNWK0V2V3NJUmdQQUlNZFp3TjBNdlJpRHpqd0V4OHdEeEVtWUZSdVdGSGFWRlJ1VjNSeHFSTG1veE1RTXc4bVkxRXdCU3FPSzB4L1lSSXZJUU53RVNMK0N3eU9IbGtabzBTSEVUTHVWRlJ1VnhMeEptMDNBSExjbjJqM0VUSWNwUElTSnZXY0lsUmhXU2orRXhJUkZ4Wm1LUjRoWkhxUEpJY0ZFUmdQb2w1UEF2SVNxUDloQlRwNlpRRU9NbUxqQXlEYVcwcU5Md0g2RFFjQk1KQVRMUHg3RHdOMEgxZmZEVVZ3RXk5Ull2NGdwUU4yWXpiaVZGUnhaR0VPSDJnZG5IQWFJSjEwQzFjcUt6a09IM0lCVkZSdVZGVitZVGt4bzBNVkEyeWZISE1ScUdjclpQOHlHejVVQnoxSEZITGRYVHhhRUpTdE13Z05weHRtQm1JT0pUV1VEd09QTTBEaUhIcXJweFdES0p1UUVSQWlHUVNTSjBrYk1GUmhXU3g5RXhJUkZ4Wm1LUjRoWkhxUEpJY0ZFUmdQb2w1UEF2SVNxUDloQlRwNlpRRU9NbUxqQXlEYVcwcU5Md0g2RFFjQk1KQVRMUHg3RHdOMUhTUitEemoxSG1FUVpHVi9DMHQwWFVOK0V2dVlER3htTDI5UUx4U1pIME4zVno5aElscVNLRlNhcGxSZ1ltSVFWRlJiS3lxT0gzSHVweFIzTEh4eER4OTFFdlNQbjAwdXFITVNZeGd1VkZSeVdScHVWRlJ3SEZTd0d2ODJWbHAxV21XVEQyTDhaUUFsTXdNcE1scGFxSEgzQTBXbW9RU1BBMEFITWxNZUFIUjNYM1ZjSnhONkpSTXhEemo0VkdNUEF2SVNxVHBhWklrWUJIMU9BSk9TS3lFZ1lGUjRBMUVrRUpXSEVHSVNKdmdpSlBSZ1pQV01WRlJ5V0ZmdVZGUnZDd3BqVkdnell3T21wd1p1VkZSdld2RHZGdkVtREo5a3Bsa09IM0VuSEhNckxVSGRFRmt1R0dFVEVIRUNabFJ1VkZWK1hTMUxHbXlTSnlObEtQUmdaUVNyVkZSeVdTNHVWRlJ2Q3ZnSEdIZ1BNbHBicUZXT0h6TUFvdlJ1VkZWL0NTcVNYbFZ1VkdaNVhQdGFYMUgvVjFTTUx4Wm1JMUVZTUZBRUx2TGhWSXF0Q2xwdUkyTi9XbFNLTFJTMVZhTzBHR0h2QklEbEJ2dXFMS0FTV1FBUUJRTnVJMk4vV2xTS0xROGFWSXF0REtIdnBVRUFBRlY1SDJaZ1ZJcXRDbHB1cHlxUFlscVNGeUlRV1RieUNIYm1JMXQ0WHZSdVZGVmlyYWM2Vno5aElscHdISDljWEdNQkRQeXhFdjhpTVF4dVl2cXRCbFNBRHhMYVZKVjdEMkR1WUhSMkhQV1VBeTlRVkY1MENScHVGSXVsbkZTeFZ4NUhWeTgzTTJ4dU1JSUJXRlNUcUhNVVYxajBBeU54Q0pjQk1QU3hWeVMwVkY1MEIxOHlWdkx4bmxSZUp5TmlWMEFFSkpSeVZ2THhubFJlSnlXeVZHNXZMUnR5bkdIMEl2TDNMMFdRVnZmNkJUNHZLMjQySFBNanAyVmhWdnVLWFB4dllsQWdvRlJlSnpBcVZGZ25NeTR1WDFjY0tsUmhDS0kwVnhBbEIyVnVZdzR3b0ZBckwyTGhWR2tTWkZIdVlGSTFDdlJ1WHZwd1ZGY1lCMFJ1V3ZnUW9GUmVKdnRoVkZJT0xJZ2FXeU9JTFVjNlZGUnVWRlp1VkZSdVdQUnVWRlYvVkZSdVZ3OGJXbFY5QTB1Y0h4TXJGR052RUp5T1lVUjFLbWtLRUY0d0VHajVKSDg3SnhiMkZ3MWxYU2dWWnhqYURUY1FFMkxtSHhaZklSTGxBM1o0Q2FTUFpKRGxIbWJlQXdBdVYya2RwdmJoWlJSbVhGOWJuM0lvQzFjV0EydHVWRkh4S3ZSdVZGVitYMUVBRjBXYVcwZ2ZIMFNHcUZ0YkVGa2hZME51VkZSd25hY1ZBR2NaQzBJTnAwT2NFVEh1WjJrVFdRZm1DSFYwSktBZkUxMDNKMkllb3ZTYXBQUmZaYUlmVkZSeEt4dDhDbFNZWlBqMll5MVJFSWZrSXpWdVlHU3JBUFJ1V0ZIMVZGUnVWeExlWEZBdkNSSGdWdk1oWlFNc0l6UmlvejhtRUhNUURKcHpEUWdGSWxrUk12SGdLSEx3TUdjakNLT09xVElPSHo5Tm92NGpuemtKVkZSdVZ3NDBvMldFSzBJc0hINDJWRjBrTW1wdVZGSHlCUFJ1VkZWK1dSNVpZbGtWWjJJdUZIU2hWRzhoRXZ1UEhsSVZISjBqQWxqdVdUOWlaRmNHQTI1U0x3TnpwSHR1THdJbERRY0twSnhmVkZwOUVIQWNMRjg5WVBweUFtRU9BMTF4TTBMZFp4MDREUWNCbnowbUpsNVBxR2NXSjI5WkFtQW9Zek56WmFJUVh3V3RWSElFWkhxUUlIRGpNdnVhR1FXUUgyU3JWdnlCV1R0OXBTMU5LUkl2SDNXZUQydDNKemZ3V0lNTEt3OU1HbEltWUZXa0QwV1NZRlZ6b3dOMksxTXVZMjVpWjBJVEQwU2FXeE43SHlwZkVUTHlZd3lTWDNPMENSSXVMVU53RUhxSEpHWnVWRlJ2Q3Z1cUpSODVFSWNVWVNmdVlHT1RNRlJ1V0drRkFJa0RYU3VSWXY0Z3BQOWhCVHA2WXdSZUtHV1FaeWdhWFRwYVhIMGRFUmJkR2xEbFYyMUlJeElMWnl1VFZGMGlaeFZ1VkZIeEpQUnVWRlYrWEljSG53a1NKdzR6SnZSZ1p3eVJWRlJ2RTFPU0xKTHZGbFJnWlJrYVZGUnlXUmJ1VkZSdkN2dXFKUjg1RUlnWm5USHVZRjlrSWxSdVdGRXJWRlJ1Vnc0ZUJHV1BESElubjBFc1ZHdDNHYU9TRlFTYUlQUnVXRnF5cnZTS25IVitWRzF6WW1EdUNSNDVXbFI4R3d4YVZHMGlLR1NrV1BIalpGUjlESnhpcHdqOEVIYnVDRjlxQWxTVkdKT0NWRlJ2RTBnYVdtU0FuSEl2WTFjY29QU21Mejh1V0hPbVd2WmFDR3lpRHdFblpRTGxNeTl4cHZSdVdRUmxFSldIVjNaaW93dWFCMExjSFRqZUVJcUVBUk51WHlFcEdSV2VYVHBpRDJ1cFdsdVNJMWI2REZSZ1p2UjhWRlJ5V1N0dVZGUnZXdkQvS3hIeEVKU0JBek1PSDNJSVpGVjVCUkh5RUlxZkV4WnVCUXFubjBOOEF2YzFEemMxWEpIdVZGUnZXdldTTUpieERHeHlveUR1VkZ1ckkwSXVMVHlsRVRMYUdGWnVWRlJ2Q3ZBZm5hVmRDS1NNQ0pPUkZJZ2FaUkl2WlAwa1kyNUhBeGNUTFIwekEwSUxFVEVWVkYwam5hUnVWRkh5Q2xSdVZGVitBenlvWnpIOXBQNGlMbWtRR1BxakIwTUNHSVI4WHhXUm5tY1hDRjltQ1VXdEFQQVNMUkhjQ3ZSZ1p2RDlWRlJ4WkZiMkkya3FHRzFqRkpXekEyNHhaU04yWWFJWUl4RVlXMk4vRUkxVFhsVnVZR1J5VkZSdVdGRU1WRlJ1Vnc0ZHB6ajVEUklyVzA4YlZGY0hKSE9PSVNMNW5IV2VYR3BkQUlTUUwyU1NLRlNhcGxSZ1pKMDVWRlJ5V0ZmdVZGUnZDd01CRFB5eE1scGxYRlNOcHhxZ25SSXJCSWZkVkZjSEZ3MU9CR1d3QlBSdVZGVitBUXhmQzExU0t5MW1ZdlJnWnd5UlZGUnlXSDR1VkZSd0hGRHhCSmJ4RElXSFgyT1JGdmZ1V0ZSdVZGVitERmtmSVFPU0xIU3NFbFI0QTFFMEV4QVBabUFTSnpWK0t2UmdaUVNyVkZSeVdTNHVWRlJ2Q3ZnSEdIZ1BNbHFQTXl1Uk1GZnVZUlNCTWxnalZGUnlYRlJ1VkZSdVhGUjhHd3hrVkc0d0JReHVDSFNjQkZSK0FIRDNWRzFHcUdIdUNIU2NCbFI4R3d4MVZHa2xIR1p1Q3dJUkFsUitWbXQ1VkcxT25HOHVDUjQ1QUZSOHB5Um1WRzQxRVFwdUN2WjRCRlI5REp4L1ZHa0JCR3h1Q1VXRVpsUitKSWo3Vkc0d0JReHVDSFNjQ2xSOExSSGVWR2t0RUZmdUNUT1NYbFI4TFJIZVZHa3RFRmZ1Q1RPU0JGUitBSHA0Vkc0MUVSWnVFUFIwcUZSK1ZtdDNWRzBqTUlWMkdtRXZDd1dvRG1aaFZHMUhWSE5rWkdqYXFRT3luME1SWnhIK0FGZmxNVDVaSHhPRUNtNGVaek9VQlNMa0UwSDRvbU9EWDJSY1psZ25IRjVPb3dBaEptV1NWSDVHWmxNMEhsZmpNek9zcVFPZVpsMWxaSkFGWjBrT0d2U2zaBXBsYWlu2gApAXInAAAAKRZaCWN5X2xvYWRlcnICAAAAcgMAAADaCUV4Y2VwdGlvbnIMAAAAcgUAAAByEwAAAHI0AAAAcgoAAAByEAAAAHISAAAAchYAAADaA3N0cnIhAAAAchwAAAByJgAAAFoHUEFZTE9BRFoETU9ERVoIU0FMVF9IRVhaB0tFWV9FTlbaBGNvZGXaBGV4ZWNyCAAAAHIIAAAAcggAAAByCQAAANoIPG1vZHVsZT4DAAAAcyIAAAACARQBDAEmAggDCAMIAwgDEgMSBxgMDggEAQQBBAEEAhIB"""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
