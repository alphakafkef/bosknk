#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYaAjAABuS1dQV3ljNnJhYnVWSDQvV3ZSYU0wMXVWRjA1SjJqdVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYweEYwYjlvM1YwQTBSZ1dSZ1lDS056Qnd1T1lGRVlHUTFqWTBONURGMHhGMDA5cFFxUXB4UmdZR3lSRjBIZkd6V09GUnVIR3hmZFlReXJESHhjTXhrUUR4V0ZxSElvSkhmdklSTHdaUVNRVzI1WElSQVBESDVzREYxRW8xU09ZSWt5WWxSOEMxZm1JUkx3WUdxSExScGlvMFNXRUZBSEZseWVxSVNPRkg0Zkp4UmhWS1NjRmx5aVlKQU9GSk4xSkhNaUwxcVhESHlTVjFxWVhKZzFISElWSko0YURGNDhLUzVTbkpPYUtIUmhFd0VnQ0tSK1pTRU9GVUlFSEhFUEd4anZERjVDQno0OXBIcDJIeFNXSWw5cUZseWpJUGI5cElOOEkwU1ZxSVNGREhiekZ5eC9IUDFjSlJTV0lsOXJGbHlqSVBiOXBJeVBJUlNXSWw5c0ZseWpJUGI5cEpXVktIU1haU0lsQXp5ckdRTjlwS0VISHhTWEZ6V3hESGI1SjNIOXB2dW5MeUVVR21ieVZHa05ZRmdPRklwaUxSZmNvbDFnREhjYlcxdUhMUlNJQjBBUEZ5SHdHbXhhQ3hFU0ZTeWhXUlJpWlM1MFZHai9KUVY3SnhiMkt6Z2ZCeWt0VkZ5TlZsdTZyYWJ1VkZSdVdVYnVWRlJ2QzBrcURSRUhESHQxb0dxT1lUOXhBMFJnVjJiNURGMGZwUWdPWUZrakNSUmdBdlIrR1JWYm8ySU9ZRzlTRlJnU3FUT3hERjFFSEhrWUVGampLSFNXWnprRURGMWdvenVZWEo4Z0swU1daemtHREY0ZVdKY1lYSjhnTFJTV0d2eUxERjQ5WkprWVhKOGdMeFNXR3Z5bkRGNUNDSjVZWEo4Z0wwU1dHdnlwREY1dUZLT1lYSjhnTVJTV0d2eXJERjVtSUtXWVhKOGdNSFNXR3Z5dERGOGpMS0VZWEo4Z014a1BXSHFLQ0tTTExHTGhaeGtKQ3dNMUh2MWdDdldscFMxUG9QSUhvbU5pSkhONVhtMVlHejVPQkZ5SVd4Um1aSjhnRHpqNFdtamVEMUQ3WUhNMUdtSHVYMElSSTJEak1KVjBBdjlib3pFMEEzU1ZaSHFSSzBJZVZ3T3lMd2I1WlJjQ0tRNVBvU2d3cDBFYVoyOWNaUmIxV0daak1QTWtwMEVYbnZBa1pQODFZd0hqRndIZEF2UmdZbHgvVkZSeEdRQTZydlJ1VkZSeVZGUnVWRlp1VkZSdVdQUnVWRlYvWG14bER4U1RCRkVqb3lFU1pJOXhWR2tORjBjVm5JV1pJUnVjTUlja0MwNU1KeXVWbklXWkl4UmZvMDhoWXdObVpUMHZuMmJnV1JNdEJ6ODBNbHFSV0oxUG9RcUxZUTlMR0hrYkV2dVlEUkx4SlQ0aFZITjZHbHVvRXhJa25RY2FXMEQxWjBJdUxGcGJFVExoVkZrYVdhSVhZeEFiRFNrZlZGUnVWdzR3QXdFdFhSSUxaeXVUVkdaeFZ5UnhWdkh5R1JBYW5SWmVDMXVZTG1Fa0MyTC9ZSEFjbnkwZURJQTFWSFNTSTJrVERsUnZGYUhpVkYwNEVScHVWRlJ1VnZEbUJ3NG1WYU5hVjF4MnFJVmdWRzlMRkgxdkR6a2dLSnVOTXljRVpVYzZWRlI4WmxEdVZ2TXFYbFJiWUk5eFZGMU5XYUh1VkZIZERTRVNYU3l3RkdOdkVKeUhFRnVNTDB1Y0pGTXVGVHlGb0k1UUR2OVJaSHVRRHdBcURscHlvMHVRRHhTQkFIdWNJVE1PRXd5VkNJNUhMUnBpbzBFWkhLWjFEbHB5bzB5UUR4U0JHSHVjSVRNUkV3eVZDSTVITFJwaW8wRVhWd3FsRGxweW8wY1FEeFNCTUh1Y0lUTVNFd3lWQ0k1SExScGlvMEVVRTFTbkRscHlvMGdRRHhTQ1hSdWNJVE1URXd5VkNJNUhMUnBpbzBFUm9UZ1BEbHB5bzBrUUR4U0NFUnVjSVRNVUV3eVZDSkFUQkh0OU1TRXRIUUlqRVJTZ29GTVFXbElpR0hBUERIOXJGVHlITXhjVEJIdDlMMEw1RlExeElUT0RBS044cHpEMEVsVjVDUjVFRlA1S1lVRVdaUHFTR1J0MFoyY0hDSUVScVFFV1pQZ2RWSEg4cFB1SEZHTmVudlJqRUdreFlSSDhwUHVIQjFjWEF4ODZDMTl3SnZSdVhHTXZWRlJ1VjJOdXBhVjhXVGdmS2FFeFZHeWRKVEh1VkZ4Mk12UnVWRlNYV0pXc1d2MVBvUDVUV0ZBRUcyeGNFSXRjSHhIdUJRcWFWeEV6S3ZaZ0RRai9JRldOcHZEY01QUnVWRkFFVnZjWEpQQWFYUDgzRTBBYUl2NHZFdmJiTGFFVEVIQWxXUkFNRHZqaERJRUpCSk1URUhBbFdSQU1Ed3QrRXZ4MVphV09JU0w1TXhNU0QzVnhEMXlQWW1rTnB5T3hNSEFjQ0dMekRJRVZGbVdURDBWbVd4U0hJd3loRUdxMEtSU05DUDB1b1JNUVpQUmRFSkF2RkpjVEQxRDRwMExjQUpaOU1scVpaejFOcEhXSldSV2ZEVGo4VnZiZUtSYnVWRkRrWlJMZFhUeGxFeFpqWUZ1Ull5TVNXSFNIREdTblZGUnlXUmJ1VkZSdkN2SGpZSFJoTWxNZkRHa1JER1phR3ZSZ0JHMXVWRlJ1VkZWd0hJeURDRlNLTFNwaVdIZ0Vvd2Z5RjFTaEJsSVlISjQ3V0hnRW93ZnpMMng5Q2xxU0Z5Z1NGUUFubklNVFZ5TVlJSEVXSTE5WHJhYnVWRlJnV0ZSdVZHOGVWRlJ3RFREdVZGSGJFUFJ1VkZXVFpTU29CbU51Rkg5aUpGU1dHMmtyVkpXYkowcHVNeWY0WlBTeG5sTXVWdnVKR1JqdUwyTXFadldRcEl1elZHa1NaSGJ1Rkg5ZkhsV3FuMWtPWVNTaFh6dHdXMmJpRmxSaENLU0FWRjR3V3lEdVh4ZjdBUFJoQ0tXMVZ2eXBGU0x1WXcxbHFGVndXMTRpVkZnblhQNHVXSFJiRlVSL01tSVJESUVQRFRxUEFTeTBXeXA4WFMxTER4OTBJSTlPSVJFZUl6UjRMbVYvRXl5dVZLRHVWMjhmcG1Ed0JTdGlBeWIybnlnT0h6TWFweEV6WUlnbEV5NWhvMjFUWEtXVklGZ05CSDFISVFIM3BJV1RHS0VUWVFMOUZKYmREUWpqQjJnVFp5eDlYMXA4S2xrc0VKVmpBd0lPSVIxbUEycHpuM0h1RXlOM1hQSDdMSmNHbm1JMENITjlDUXR5S2xFVEQwVjVBeExhbkhJa0RHcXVGVUlTWVQ5blpITVNZbGttVkZSeVdTZnVWRlJ2cUZXREdhV3pEMnl1SXdEdVZGUndIRkFxTEhnMEVGa0hJbXVPSVJTYW9QUnVXRkVYVkZSdVZ3NHhuSnA0WUhJTExQU1lWR3QzcUo5UEczRW9uUTlMb3ZXZkVSeWdDRldQb1JPZkJ2UnVWRlYvV0hnVkZ2OHVWR1ptV3ZxU0Z4OU9WMVNNQlFIeUYxSWVuR00xSHYwdURVU3FFek9RR1FjRm5IRVhudkFrRXhEMUp3V05NekFLWktjNlZGU1NCRkh1VnZNcVhsUmJZSTl4VkYwN0R4THVWRkg5VjBMNVdQSUpGVHlvTEl5Vm5JV2dLMFd0SXpPVURGMDNNSjVXWlBnd3FSWmFZYUlaRDBXT0d2Z1RCSHRlSlJmY24zSUVGVHlwSVVOL0d6Y1paeEVQb201dkV3eW9WemZ1Q1JPQkdGUjhEUklHQ1VXd0RGcU9ZVVJ3SjB5WUcwdWpERmtrVjFnV0YwMDRYUU9TQ3lNdEIxY1hBeDQ2WmxJVklsUnVWM0kwVkpBekZKVnVWRnVySTBweUUxMGhES09YRVJSdVZGUnZER1J6cEdjR1hKRCtXU3hrRTFxekEwRXpaUnRiRFVXMUV2cVJEeDFmVjBPa1pQdWVFdlJkV0lwMkNIeWFYSEFhblFEYUxRQVFFeDlORUZXZEZISWZDd0hiTFFBVEN2NHVWRlJ2Q3Y1WUR4cVlFSXVKcFJidVlGOVhGdlJ1V0ZFWVZGUnVWMVJhSElqK1ptOUxvSldwRFVWd0V5MVJNd09WWFJPbHFITGFFUkQ3WDJmdVlHdUpHRlJ1VkZSd1ZJcXVXd2Z4Wm1jUkFGRG1CeUw3RlFJWVdKcVRWeU1CSVJBYUlJZ3dESVd6R1M5TnB4dDNXeFNGTXpxbEVUTGpXSkE2cnZSdVZGUnhWRlJ1VkZmdVZGUnVNUFJ1VkZWL0N5UjlMRnVWQlF5RkR4WnpweWtyRXd4MlpJY09ZRkRtRHlaZ1ZHRGFERjFObjI5V1pQV1NvSFJnRkc1cEh6TVZxUHFWbklnbUwxV3pGYUlyRmx5ZXFJUjhwekRlTFBWNUNSNVhFM0l1cEhxV1pQcVNHUnQwWjJjSENJRVJxUUVXWlBnZFZIRU5aVDVHRkdOZW52UmpFR2t4WVJSZm8wOGhZd09jSTBId0tST2dYd2tScVJxb0VTUmRLU3RlQkdXUERIdDBHd2dDRFVTUEl2RGlIUmdHbnhWMkRTcWtESldmbnlBVExTa3VFSFN6cVVWeUVQOUxGUThoWlExQkF2UnVWRkFFVnhBMHBJOU5GdnlVSWxSdVZLQVBaVE1rWlJ5UllTeUZNSE9rRHk4elgwVmNuSnVUQ1JIaEpRTDlGSmJkRFFqakIyZmVEVGIrSlJFV01RMHVEemp5Q1Q4ZUMwQUpMRzQ3QlFXa1p6TDREMHhlQ1BnQkN3RHdCU0hoWVF5RnBHTmpNYVJqRkhEZkpIOXZFeElBSlJ4aUYyRVZYUkl3b1FFT1hKRCtXU3hrRTA1c3FGOUFaUDRpWEpEK1dTeGtFMXFhRlBBUEVQY2RWRlJ4WkZjU1lTRXpDeElLSEdFTlZGMGpFekh1VkZIeE1sUnVWRlYrWUp5dUFIeVNKeHBmSmxSbVdQcU5YUHB2Q0dxU0tQSGtudlJnWlBncFZGUnlXUmJ1VkZSdkN2RWNNbXRnRUl1dFZIZnVZRjl5SGxSdVZsdXBWRlJ5VzAxNlZJcWNEd0x1Q1NwNVh2U25FUHVaVkh4K0JSSVJNeWdDR0hFekt2WmdEUWovSUZXTnB2QUVJVWM2VkZSdVZGRHVWRlJ1WGxSdVZGU3hWRlJ1Vnc4OUJGTDlXUnQzbndiK0RsTWxLUzVPWUZFd0h4WmFZbDlCREYwaEsya1daUFdTb0hSZ0FtV25Iek1WcVBJVm5JZ21MMVd6RmFJckZseWVxSVI4cHpEZUxQVjVDUjVYRTNIOUpIQVdaUHFTR1J0MFoyY0hDSUVScVFFV1pQZ2RWSEVOWlQ1R0ZHTmVudlJqRUdreFlSUmZvMDhoWXdPS0ZKSGVCR1dQREhJbm4wRXNWRjBqcFVadVZGSHhxUFJ1VkZXMVYwV1JYemJ1VkZIeE1QUnVWRlYrVklxS1psQVNKMGtiTUZSZ1pSa2FWRlJ5V1RMdVZGUnZDdmI4QXZwK0VJMDlXRlJ1WUY5WEZ2UnVXRkVYVkZSdVZ3NHlaUDFPWXhJTW96QUpWRnQyTUpIdVlHdVhGRlJ1VkZSd1ZJcXRxR3hjQzBaOEYwdDBFRzVxRXZXSlh3Y1REbDlWcUhNUURJY2pEVE1uSEdPNnJ2UnVDUVp4VkZWektGZnVYUDFzTVBSZ0IwdVZWRlJ5Q0ZJVEJGRHlJeHVjSG1NY0RscGhxSHlPWUY4NFd4UmdBdzlUREYxV3BLU1daUFdTb0hSZ0h4RXFIek1WcVB1Vm5JZ21MMVd6RmFJckZseWVxSVI4cHpEZUxQVjVDUjVYRTNJMFhSeVdaUHFTR1J0MFoyY0hDSUVScVFFV1pQZ2RWSEVOWlQ1R0ZHTmVudlJqRUdreFlSUmZvMDhoWXdPbEoydGpMU0xrSHhJcEoxSWpWRjBqbmFSdVZGQTBGRlZkWVNXd1ZGUnlXVVZ1VkZSdkN3TmNxVUVERUkwdU0zWnVZR09tcVBSdVdGRTFWRlJ1Vnc0bHFKeWpKSElMSWFPWFZGMGlGeGJ1VkZIeEZsUnVWRlYrWFJWOUV3dDVFR0h5b0hJMFltT0FWRlJ1V2xIdUN2WjRBM1dscHg1UVZHMXpZSUxhWkc5dkpsOWlxRnlBQzFiNXBGeVREbDlWcUhNUURJY2pEVE1uSEdPNnJ2UnVDUVp4VkZWektGZnVYUDFzTVBSZ0Jta1JWRlJ5Q0ZTVEJGRHlJeHVjSHlnTEV3eDJaSWNQTFNNdEUwUmdBMkloRkdOdkVKMU9ZSE40SjFXekZVRHpGVHlvcDJBRk14YzFLeGZjbjNJRUNVV3hYMk52QkdrQkZ4cTFHMklTRkdOYUVIa1ZBUUFkSVExSEVVRDBGR05lbnZTUkRRT2hIMHhqWDJidVpSSDhNUGtPWVQ5Q1l2NGpMUjl6WG14bER4UjhZVUFHbmxSdVdGRW1WRlJ1Vnc0bENtQXJJMElxRXZmdlZGMGtXRlJ1VkZIeEZ2UnVWRlYrV1R5YUJQMVNKVE51RmxSZ1kzU0tWRlJ4VnZSdVZGSGFGS2J1STJ5UENQUi9YVUVZVkh4K0RIdVJNeWdDSFJMY0FHV2xESUVKQkpNVEVIQWxXUkFaSjBFVXJhYnVWRlJnV0ZSdVZHWmFWRlJ3RFREdVZGSGJIUFJ1VkZXTlZHVmFEUHB1R0hnQ0R2U3hKMEFuVkp1cUlHYnVMYVNhSnZTdnBKZm1WSkUwWTNIdllsQWFFdlJoQVRNblZKdXpJYVJ1WXdFZ0RGWmJZSGdVVkdrU1pIVndEVDFnTFBSa0dhRHVWdmZrWUcwdVpKUjNFdlI4RUdTWFZ2OHdwVDR1VkZiYldQUmdXdzVWVkZSZFdsWnVYeGY3REZENEIweHZXUTFkWUd0dVdIUnlFMFd0Rnd0NVZGMUFDMFp1VkZTbUR3T3pwR09VRVAxV3B6TmpNYVJqRkhEZkxUanVZMDljRUdONkZIeUtHUHl4Q3ZFTVpIcUJMU05lQ1BnQkN3RHdCU2ZqQjJNMUgxZ09JUjFpQlFneUJKeWFYbTR2S3ZNTkVGV2RGSElmQ3dEZEJQTUFMMVNPQTExeHBIQWJZd0x6WjFjaURIcGpNYVJqR0hEK0V3dWlZd1JlS0dFU0xKT2NweEV6WG1WMkMxY2FEYUVSRkpFb1d6cGFaeUw2RFVWd0pVRDlwUngrS205SlhsU3FDUGNQSnY0NkZIT3dLd2d3RlN1dEFLRTBHSk1OcHh0M1d4U0ZNeng1VnhJR1lKa09CRnBlVkZSdVhTNUpEVVZnWFB5T0dTV3ZXdnluSVRiOEVJYitXeWJ1WUdPZ3B2UnVXUVJkRXZ5REhGdVNKU01qRnZSZ1kwY1hWRlJ5V1JmdVZGUnZDdngvQkpSN0N6a0xudnlTcVNBVkhGUnVWRnBnVklxY0R3THVDSkxmQmxSK0UxT1FWR2tsSHg0eW92dCtJbDlqWFNFUEMxeDBYMjFSTUZjVFZ2NGxaSEVOQzF1V0tTY1JZeVZhS0pwYUl3U2lFUDlLcGwxUW5RTW1LVHBhblExa0VIdURLRmdSRkh5UG93OUxGSnR4VkZSdVZ3NGJXbFY5QTBJbkFVSU1WRjBqV0lidVZGSHhEbFJ1VkZWK1hhV2ZCSE9hVzE5UllSTjhBeGpmRElFSklGdU9CRnAzV0ZSdVdGRWhWRlJ1VjFSeVZGMUJWSE1SQUdMeURJRUpJRnVPQkZNUUx2UnVXRkVKVkZSdVZ3NGJEdzFUQlJJblZ6eUtWRjBpcVN0dVZGdXJLdzlMRkdnbkRRajJHUFdPSDJaam5HOW5GU09IVkZSeVdSYnVWRlJ2Q3ZEbVpGTGVFSXV0VkhmdVlGOGZEUFJ1Vkd4Y1ZGUnlXMnB1VkZSdVhGUjhMUkhlVkdrdEVGZnVKVDg0Q0ZwZEJRU09WMjBiWVFwd29GdGZBbEFFTHZaMlZtTVRvbUh3SEpWd0F2WjJFYU9WVklxS1psQWFXMER5b0hEaFl2MWxDMXVBR1RxUkYwZ2hHUFJ1VkZBRVZ5OGxEU2dOQ1AxbkQwTVJBSngxREhnTEJHRDZNR0FlcFFOaVZ4cDVBYVZnTFB0Nk1SeWNFd3lWSktJT1gwTmFuekVQb1F0eEEwTXRHR3RpRlBEYUp2WnVWRlIvRXc0N0JRV2taekxqSnlmZUNTdVBuSEl2RnprZERRWi9HVDRqTWFSakUwRGJKYVNBQ3dmNFphUmxNd1dZV0hBYlpIY2JFSmorQVBiNk0yNDJISEFiSjJBMVgwT2pFenlIWUYxTEJSQWJZd00wRHoxWm9JRGpZSElESG1jeVoyZ25YSkQrV1N4a0ZRTmhvdmY4SXpFakRJQTFXM1dPSDFxUllHNDdCUVdrWlRqNllRTCtCbXRscEdXelp5MGVFSlZkWDI1Uld5Y3BBd0R3QlNIaENhTmJYVGJqTWFSakdIRGZNSEl3RVBwbEx6QVFuUVNYblJJZkN3RGRDSngzSjJBVEQyTDhYeFNIRVJqekR6QWlwVE9vSW05RFdISUxFSlNjWlRNa1pSMVJXbU9sRVBnUFptdTBEMkFLS1A1U0x2OXpYR2pmSnlrZVhtNGVNUVdOQjBXU3BtTC9wMWdnQ3dmNFphUmtaeUQ1bnhFWHAxMGZFRmdtWmxjVExSMUpBME1LSzFwZ1pUTWtaUnFSWFRFQ0x2eXhDdkVNWkh0alltMU9JVHVMV1JFekR3eGhYME5pSjNENFoyMUdXRzQ3QlFXa1p6TGpKeWZlQ1N0eG5IRVlGbWdtRXc4a0d6TitCbXRscEdTY0FIZ2ZFUmNtS0ZrU1gzWm1YeE10R0lMM0V5SVBXMmpqTWFSakdIRGFaVVdSWDBPUE0wNVJGemJ4V0dBbm8wU1VaVE1rWlJjUlh5cHdLUldmQlBEM0V6T0FCUDlVb0l1ZnFRNDdCUVdrWkgxaEF5cGVDU3VIbjBBYlpIY2JFSlN0bkY0OW5HcW9MME1RTXdqZERJRU9LMjhqTWFSakUwRGNwdldRQ3dmNFphUmxGemNFSnZmOElscUNDd2Y0WmFSbE13UjRNbTQ3QlFXa1p4Y2RvVFpjTVE0eEpHU1VwbFovQ1B5d0owcDNvdkVQVnZmOEl6RVpYbWplR3c0MFZtdWFBUXQxcHlPdlgwVmNuSmtVV0hxcEJ3THhZd0FLRFVWdVp5cDNCVUVkQndmYUJTQVNFeERmSVBwZUN2V3JZUWpjTDFmNkIyTTFxRkFOcGx5ZEJQZ1BYSTF2REhTZUxUNXRaME1RV0l5aW9TTmRDUElKVkhMZUR6QUlueEVZRjB0ZkR6QWdMRkgrQm10bHBHV1hueVNuWG1rS1cwOCtCbXRscEdXelpHZ2JDd2Y0WmFSbEZ6Y2ZMbHl4Q3ZFTVpIcW1WbTg4WEpBb0VtZ3dWMldHWG1rSk1SamVDUGdCQ3dEd0JUcDBCMlp3THlaZUR2eTFweFNZSlQ5c0VKQTFWbXBlRFFSZG4wTjZHbHFrQlFxd0FROGVESHVTblJXRVdISGJZMGd4cVRwMXFVV1hWMFdmb0o4aUIyTTFxRkFOcGx5ZEJQZ1BYSTF2REhTZUxUNXRaMEFURzBPU1Z6Y0hMUUFXQTFTdFowQVRNeTlnSlJ0Y0RJQWZZRnR4QXZibFhRRHdCVERtWG1rSk1SamdvU2NPRXdEd0JUcDBaSEhqRzFSMFZtdXhabDRtRjFWMlpUTWtaUmdSWVRPZlZGOUVBRzQ5Q0ZSaUl2NGVDU014RW00N0JRV2taekxsRmwxUlkyUjhXdmdQWkk0Y1gwT2paMWNQRlNIZkowT2xWMXVsWG00dkt2TU5DUUxoWEZnUFpJNGNYMFd3SUtPUUd4TGFXdmdPTDBnckRJRUpMRldWVnpxd1d2ZjZDUklEWEpEK1dTeGtFMDV0R3Z5eEN2RU1aSHRqWTJ5TkIxMUxvRnl4Q3ZFTVpIcUJMUFZqWVQ0ZUdHRHdCVHAwQUtFZVh4cDJWSWtqTHdBbm8wU1VaVE1rWlJNUlhQa0ZZRklZRlJiaUVJdWxZSDB1WUY5Skd2UnVXRjExVkZSdVZHaitCbXRscEdPZkJIanZFbEh3WmxFT1pRMXpLeEFiQWxjMUR6a05vUVppRjJFRHBTOWZXRnF4RXZ1aXBIWjdNR2tlRUhXZlgzRVRYSkQrV1N4a0UwSU1wUFN3TUpXQlZGUnlXUjB1VkZSdkV3V1BZVGNIQVBaNE1tRDNCMkRtSkhJbk1HMWNFSldPcGxiZUR3ZjhBRmYrVnk0ZkRJV2lEVFJlRHdmOEFGMW9EeEVZQTNTZ1ZJdVJEeGswS2x5eEN2RU1aSHFTSnpqZ0hHODRFR0R3QlRwMEFtZ3haMXlTSnpFa0dGZitWeTRnQnpTckdsTGVFUUlSWTBXZkFGSUdYbWplR3c0MFZtdUZZSHQzQkpIN1pUTWtaUjFSWGw4K0xIU0hESjVjRVRNSHBIVmlGMkVmWXhJd0wwTVZBM1NnVkl1UkR4azBLbHl4Q3ZFTVpIcVNKenBqRUdmYkhGeXhDdkVNWkh0alltNVJGMGdWWkZnUFpsQWpESVdIWDJiZUN2V3JZVE5tRXl0Zkp2WjNHVFZlRFRwZ01SV2ZBRklHWG1qZUd3NDBWbXVGWUh0M0JKSDdaVE1rWlIxUlhsOCtMSFNIREo1Z0R6amhFRnRpRjJFMVYwTjhDbVplQTNTZ1ZJdVJEeGswS2x5eEN2RU1aSHFTSnpqNVlUdGJuR0R3QlRwMEFhSUNaeDVSTXowa1hSTjdLd05qQ1BrS29IdVJNd09uWnhFWUlSMDFZMGd4RTIxVVdGWjFaSFNISXpEd0QwSUZDd0VURVFMd0NISW5Nd0VPRXZibERSWjFCSDFPVndOMUxRRHZYbWplR3c0MFZtdUZZSnB6SnhjT0psOXJaRmpjTVE0eEpHU1VJMkw1RTFrQUJRTVJGdnRiSlJNU0QzVnhEMElFRTE1UkZKMUtCdmdQWmxBc0VSY1pERzlSTXowa0EwRXpIS0VRRXZ1aUd2eGVEUDlvcVF0bW94T3VFeElRcHZFUUVJU0dwUkV5cFI5WFgwVmNLSldPREpndG96Tm1EME1xRFFncUpUMVBvUXFWb0hFUEhKeURMUUFUWGFXblZsSU5MUnR3Rkk1SVgwTmlKM0Q0WjI1TnAwTjdGMGNnSnZBb01UTGVEUVJ4SXhSekhTcWNMUUFRRWxBVEsyZ2ZXeEVXTTFrZExRU0NxSVNSSVBNelhsZ1JGek9lRHpqMVd3dU9LR2I1SEhBQUlKeHdFSWN5cEZ1T0lSRVpadmYrWDFIN1pUTWtaUk1SWFAxUEVQa2ZNVDlUTWxNd1p3TWFXMDFlQTBJdlkxY2NEemozSHZ0YUVIUmVBSElxbnhaelZGMGtZdkR1VkZ1ckltamVwUWd0RFFjTER5ZnVWRlJ2Q3dJRUQyQXVNbHBsSXhFVFh2dTFaSnB6cUdmeUVQNUZMUWJ1VkZSd0hGVmNaeXVqTWxwY1p2NVNZR0w0RGxaMkFUTmJFSXlwSTFEdVlHTnZKRlJ1V0ZFblZGUnVWdkx5VkdMalcwU0ZJUGdKRFVXVkdQMVRFRjVLTUZSdVhTNUpFSlN0bktJT0sweGpWRzFqV3dnRkV3RWpNRzFURDBWbVoycHpKd0FXVnpOaVhsRU9JUkV6VnZSdVZGVitXVHlhQlAxU0pTTWpGdlJnWTAxWVZGUmJLeXgwRVRMdkZITXNuMU1FVkdqOFh2V1RXUHFUV3ZSdW5JRGxWRzBpS0dadUNGOXFabFNNSDNXWlZHNWVuUkh1Q0dOZkRsU0xGekwwVkdrQkNQNHVDRjlxWmxTTEZ6TDRWR2tsSEY4dUpUOGNDUFNMb2x4OFZHMU9uR0h1SlQ4Y0F2U3BxSWNSWnk5eUxSMG1YME1nWDBPRUF3V0laVE1SV1JjT0EyTVRLd1NWWXdweFpsZ1RKMUVPR3dnQUlRU1ZEdlpjWkpBb0h2eGtaSXVqWUdWY29IdURER1ZnWEZBTkF2RHlxUU9lQ0p5Wlp5Yj3aBXBsYWlu2gApAXInAAAAKRZaCWN5X2xvYWRlcnICAAAAcgMAAADaCUV4Y2VwdGlvbnIMAAAAcgUAAAByEwAAAHI0AAAAcgoAAAByEAAAAHISAAAAchYAAADaA3N0cnIhAAAAchwAAAByJgAAAFoHUEFZTE9BRFoETU9ERVoIU0FMVF9IRVhaB0tFWV9FTlbaBGNvZGXaBGV4ZWNyCAAAAHIIAAAAcggAAAByCQAAANoIPG1vZHVsZT4DAAAAcyIAAAACARQBDAEmAggDCAMIAwgDEgMSBxgMDggEAQQBBAEEAhIB"""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
