#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYRQuAABuS1dQV3ljNnJhYnVWSnlFWEZSYU0wMXVWRjFPWVJOdVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYwZ0hIZ1JXUGNsRVBSOEMxdGtERjAySTA1UldRMGNGUkR4RXY5WFZHai9KUVNPWUc5cUh4RHhKUWdDVkdqL0pRU09ZSHV3SXhEeHAwMUhWR2ovSlFTT1lJU2NKSER5WlN5TFZHai9KUVNPWUZFWUl3MWtBRnFRREYweEYxcDlwRzRnRVJSZ1dSZ0xDS1NVWjBJT1lGRVlKRzFrSFF5VERGMHhGMWI5cEl4L0UwUmdXUmdvQ0tTdkVIdU9ZRkVZSHcxak1KRC9ERjFubzE5UldLTmhNdlI4QzF0a0RGMXdxSkVSV3YwNm52UjhDMXRrREYxZ1d6cVJXdzlUb3ZSOEMxdGtERjB4RjJSOXB4QWNHeFJnV1JnWkNLTmlEUXlPWUZFWUx3MWxHVDlDREY0dVlTU1JXeWNMcVBSOERScWdERmtqWUhTUUtJa1VJRzFqVnpEZERGa2pZSFdRS0o1R0pHMWpCVFNXQ0tOK1ZGMU9ZVU5nRDBBckFUSXNDS09NWm1PT1lVTmdEUkFxSHkwL0RGa2pZSEVRS3lOdk1HMWpubThsREZrallISVFLelZobkcxa1hSZjBERmtqWUhPUUtscXBKMFJmcFAxTkQxOGpMeTFPWVVOZ0RSQXNCSnVzREZrallIT1FLMFdoTEhSZnBQMU5EMTlZcVRBT1lVTmdEUkFyR201RURGa2pZSE1RS21jWnFHMWtNM0g3REZrallIY1FLMEFHWEcxbEoxT1FERmtqWUhxUUsxNXlXdzFsV0ZqOURGa2pZSHVRSzNPa1h3MWxBbXQvREZrallIT1FMUDFRbzBSZnBQMU5EMTFnbzBJT1lVTmdEUkF0QXh5a0RGa2pZSHlRS0hiN25tMWxIeGNQQ1VXeFgxYnZCR2p1SHg4NVcxdU5WR2o4WUZadUNROW9aeUVVcEhFQUlUT1VZMjg5SVJIOURRT1NDeU1nQ0tXa1p6UjlwbEg0TG0xbVl3NXlDS1ozRVRwOXAwT1huRzFtRklPY0NLQUZJemo5cDFncG93MW1NVElxSVJ4MkVHSDlxUFNoS0hOMEN5NXlEUUVVTVRNTkFTT2hDMFJpWlM1MFZHai9KMTlPR1FrZkZSUmlCeTQ3Rmx5aVl2NU9HRklXQ0lXekZVRDRIMHQ5RUhIOXFUU1RNSUVVcEhFTUlUT1VZMjlWQmxJZkd5RVhaVDFpSVRPWENIOU9HSHlqSVNFWEd3dU9JUmJqb0tPSExSYjlIeFNYQnk1aURGOXpYR3FRWVNNdU1JRVhwUlp4SVRPWENJTU9Hd0l2SEhJdktGOVRJUmZpS1JxSEZtTUlYU0V0RncxTUNVV3lDVE9TRnY1UG94RU5DMDlVVkdqOFlGWjlJUkg5RFFPU0RRUjVFSE5mWm1nT1pRTVdYRzR1WUcwOERHT1ZJRmYrVkdNUUMwUmpKelJnQ3ZSL0ZIV09aVGtnWW00dUZSOVNER1JkV1FSK1ZJU0lGUlJrQ1FObUN2U25Ld3VPWkhEZUMwNDhZUHVjQ3ZTd01UTU9aSEhtQVFNY0t4amJDdlMxcFRxSEdSSVNKU0V0RWw5aUdteGpFeFo4cHpBdlpsVjVCU1JjRmxiY1lTQVJERlduWFI4NVpSa2daUkg3WDFWdUNRamdWbTFIREh4ekRGMHdJRjhoQVRjcUxQUnVWRlNpWXdONFlHeVBBU3ltb1JJdUxGcHhDMWNhRXZFU0xINDJNeFNHcUlEOVZKNWduSnFQSEZJSHBSU3NGSHRsRFFncUlLV05CMTFyblA0akJQMGZCUXlYTXprT0lSVjBWMnBhWnlML0RHdXdJR0RoWlF0Z1hIRGhFMGtFVklBRkt2V1RLMU9PRGw0akJQMDRDUGdqQjJPTkJ5cGxISEV5cEpjeURJV3pubHlSTXlWNVlKcGJGSERmRElFUVhSa09IM0lISjBTR3FGdHZEUWovRXY0aFpRdGdZUkxkSXp1WURJQWNuYUFhV2x5REF4U0dWMnRmVzFTTkxsYmVFUnFzQTBNUUR2UnlYMElSV0dJVEtsa0tCSExkS1AwbUN3ZjVxUUwrQjBidUd4dG1uMDVqWlRqM25tTGtFMXF6b3ZBaU1QeGFFUE1uS1F0a0dLU1RFRnl4Q3ZIMlhKRCtYeUVSWlRBWllHNDdCS0QyQ3dnWFpTQVZaMmdCcFFPZkEyZjJaSHFtVjNSd28yRGNXMER6SnlqNFp6TG1ueDhjTVE0eUF2eXhDdmNMQVBBWVhJRGpGbWtpb1B5MW8zWjlFdmJjRW1NT0lTTUxXbGdTR1VEakQycWJFUHFuVm1TcFlSU2dvMHUwRXpPSkpHSVRJYURpSnZSeEdURHlISk5hQ3hFRUswNTFDMVNzWHkwN0hJNVdCR0lFS201QkVHQW5weU9GVkZSdVZIU2hDRzVpQko0OUN6ODBYbTlRSkZSdkttV05KME44WUliNER5U0dDbXVUVjJnbVlITGJvbXhjRXpONHAwa1BvRmZ6QzBPbEZRWjdFdnVpQkZ5VExROHlCME43SUZxa0ZRRWtGbVdTWDNTb0Z4RVdGSVZsWVBSeG9hVmluUU5iQWxqbUtGZmhWRlJ4WkdFVExQdWlXMEV5WHhJeERJRUFDMnlTWDA1QUozYzZWRlJ1VkZEdVZGUnVaUFJ1VkZTeFZGUnVWdzlicUhJdEkwdVREVDVrRGxNa25IcU9ZRjFjSDBXdEltZ0xERjAyQzBNVEJIdW9uUmZjTTA0Y0RGMVhGdmdPWUlXUktIV3RJek9aR3drU3FGQVdaUFNkTEh1Y0tSV2RFSkVSTW1FT1lKZmpwUk5qS3prb0ZUeUdNUFZ1Q1JObUZ4WmFwU0lPREY0dUVUSUZNeHUwWVJMNU1HeDRERjRtSFR1Rk14dTBZeEw2RzJaL0RGNG1IVGNGTXh1MFkwTDZMSjlPREY1REFROUhMUnBpbzBFU0IyZ0JERjFlWlVPTlpJZ0FNSFphcFNJT0RGNHVFVElGTXh1MFlSTDVNR3g0REY0bUhUdUZNeHUwWXhMNkcyWi9ERjRtSFRjRk14dTBZMEw2TEo5T0RGNURBUTlITFJwaW9ta2xNUGd0Vnd4OEd5SVZZeng1Vkh4alcwSVpGUURtbnlEOUlSRTBBUnhqWDJidUVSTmpveUFXWlBnZFZHT1NDVERmREZraUdsNGhaSkwzVm1WaVdGeUZFRjB2V3o0akF3Y2NDMEVZSVQ1QkQydXBXbHRpb3d1YUJ3TmpweEhlWlFSakVUU05wdldPSHhON1pSOXhEU016SUlBUG4wMDhxUkVVRXlNS0RJRUFvUEh1VkZSdkV2dUFGSjgwRUYwdld6NGpBd2NjQzBFWUlUNUJEMnVwV2x0aW93dWFCeHQxR1EwN0V4RTFCeTRqWWxJUEtSVjFJemJsWTI4MUF4TU9HRjVYWnhEYk1RMU5NbHBsV0tTUkZIeUZaenBhWnhiNUR6Z0FZS0Q5cFJmYkp4U2hDbFNpRUpFT1hRdVRYUmdPRVJONnBsNWJFeFdIVjIxUG4wMDhJUkVVRXlNS0RIa0ZMUXR3RFR1b254QUFEUk54TWxwN0JsTU5CeXFrbkhMMHBUVm1FdnlEcHhWek0wRHlad0x4QzFnQkQycWFNVHVPRjJiakkwSXduM1YyV0pNd0htT2tDbXA4R3ZmOEl6cGFWbTFsSEg1VFZGY1pNVVIrblRONFdVT2hEd0gvSXZqZ0l4TVFDbWNFWDFBZkdRSU5CeXFzQXhEaFl2MWpYbTlRSkhSdkpQV2paRmY2SVRWME1scVJLbVNTRlNPY0F4TVNDbDQ5RUZrSE13NVNKVHhhR1BSZ1kxTUJWRlJiS3lFVFh2eVVEbFNLSW1ad01sTTFHRjlVS0k5TER4VjFLMTR1TWxNZkVtSVBERmNWWTB0d292UmtWRlJ1VjFSdkxHNHVXUk1RbnY4akR3THlIS09SSXc0bEFIU0ZwMGp1RFNJS01JQVBuMVJnWFJ0dkQyTGhFVHBqb3c1TklJcXlIMFNHcFAwZ0Fta2NDU1dTWUZrekFSRVFFMWtPVnk5UkcxY1BvUHlZWTBJdlpRamxFVExqSWwxYVd5eXdMRlJnWlNJZFZGUmNudkwwRUl5V0t4SXVMUjVtRFQwNElSOVBIRkx1WlJON1pSOURWRlJ1Vnc4ZW8ydUhEbFJ1Wm1aeldUeWpFUVJ1STJOL1dsQWZFekxqVnlFWEhGWndIeGt2QmxBRUpHVm1aSTF4cFRObEMwT2JHdlJ1VkZWaVZHajhYdlc2cnZXaW95cGFXSk13SG1OMkd4TmNNUkxtVncxcVZGNGJBSHh1Rkl1MUp2U3ZCMEFXVkh5TVYyZnVadnFOTVBSaEFURCtWSlY3RWwwdUVhSC9HbFJoQVRBYVZHVmFEVER1WDFiNkVGQU5vdmNCV1B1QUF4ZnZYdzFLSmxXVEdRSTBWSkVlWElqeER3SGhXdld1cFIxdVdTZ3RYRlp1WUdWa0xQWmJZSEhhVkdrU1pHajNWRk1uRUZFaUtQOWpWMFdJQUpEeFhVU0tCRkg4R0tJV1ZGZ25IeTB5V0hOMllGSW1ZbXVBVkZnbkpTOHdFeldyWFBJbVltZ0JWRmduSjJOelZ3a0VaUE0wRjBmZFZHa1NaSFZ3S1Rjb0NGTCtCRnRjVkZiNVltamZISjRkblBNSUVRRWlWRjQrVng4dVl2WnpJUFJkRm1mMFZGNCtXUFZ2TFExbkpQUmhDdkR2Vnl5cXBRUnVYMWJiWXZSeURJV0pGUXRhVjFBVEVVSDZLd05pV1RBeUR6SVRYbWdUWHZ1Y1cwSXVMVEw3RFVXVlptZ05CMjlqQXhNMG4xdU1EVVJqRWxXUkYwZ2tISEFjQ1Vad0VSRGtuVDQ4RlJFc29QOUNDRkFwRVJnWlp5UjRJUE1IbjBONnAxSWJFUHBrSFR0bEVQMW9CR09YQUY0OFkydWlYbWplRFFPZ0lISXdBSWJ6WG0xWVZGcGpZM0VGQ1FEdUF4TDhaU053WUdiMFZHTDNBbVN2TEY4alp2eW9ZSDBlRUhrMFl4TGRaeFIxQVBSM0ZVVmlHM1N6SW1PWk1Ga1ZEeDkxQVBNUW5KYjFHRmdTR1VEaEV2YmxER0lPSUZNWUNSRXpKMmswWjBSOEd3Z09IM0VkSVFndExsY0taUmY2TEhIak14a2FEdjVYTEZwa0VJcVZZdzh1WHlFRENSTjdHUFNsTWxwN0Z2OVRYS0h6QUhXT1h4Ui9Zd09oSEdPVExUdVJZMnBhRVN4ZUV2eTFIUkVTTHZjZlpSTXRJdmozRVJ5V0R6NDlwU2tzR3hweW4wcTBDMXlDV0lad0tSYmRwSERncEdrakR3QVVKUmtOcHprb1d4TVJuM1ZlRVJ1b0xUY1JNSEl4V0c5TEtQSTFESUFmRGw0L0pUNHZwMEVZRjJBa1ZKQXlwSVp1VkZ1cklIUjNCSVdhQ0tSdm4wZ09BbHA2TEhMY3FJT1JFSlZhWnZEdVZGUnZDdnF0S1FEMkVJeXBJMUR1WUY5ZUlGUnVXRkVKVkZSdVZ3NGNWM0FMQnhJblgyOUxWRklPSFBEa0R3cVFJUklMWnl1VFZHdDNJVUVTWVF4MlpISW5BVUlNVkYwaldJYnVWRkh4S1BSdVZGVitZMkFNbjA5U0ptY3BMbFJnWlFFc1ZGUnlXUkR1VkZSdkN2Z2luU0VRRUlmYkhUUnVZR05oS0ZSdVdGRXZWRlJ1Vnc0Z1psZndFMElvR1R1eVZHdDNJVHFRbktBekFSSW9JSjV6VkZJT1gyMGhaUHArRnpwem9SYjhEMnlJWlR0dVZGSHhxRlJ1VkZBRVZ2YmhwMjlTSjNSZW5GUmdaU0lkVkZSeVdUYnVWRlJ2Q3Y5VkN6V0JNbHBjWnY1VFh2dWNWbFJ1VkZWL1lHWmVWMHB1VkdabVd2VjVGek5lVnd5cG9tTnhuS09SWkZXalZ6WmVWSXF0REtIdnBVRTBFRkFFSkd0MlYxU25KMTB5RjE1bkFGUnVWRlZpVkdqOFh2VzZydlY1QlJIeVcwSU9YbUgyR3hOY01STGJxU2dIVkZnblgwTnVMd2dRRVBXUXBJZ1ZWeTgzTTBid0RUNGRHdkR4QXdOL1ZIMVlHUHR4Q0pjQklQRTBGMk1MV0lMZ1hJanpBMkFPTFBNMER5TXRWSE0xbnpmdVYwcUtFbHFVTTJTb1cyZ09YSDB1TVVEZm9QU3ZwSnFYWFI5RUFtVnVMd2poWUZWaVYyRWRWRjQ5cHlmY1pHV0NaUFJnWnlqdVZ2dUtCVEh1WEp5Zll2UmNuSmdWWEhxTUlQdGxYRk1CR0dXU1oxRVpZMDQxRFE0bEVQRXVESE9ETXl5bFpSY29aemdPb3ZTR0hRWnpaMElFWjBNdXBsRVZBUkVNTW1PWEVtcCtaVEw2b0h0aW5KV2dGUnRtSFVXSUQwa0pBbHVWWjFPbElGOWJNS0QxRUlrb0lLTnVYeU1LREdPWUVKTnVaSGt0VzNIa1lVT21wME9ES0p1bURTT1BMbFZrWklwNldRU0FZMEkwRFFjQUJSNU5vUXFlWUdTVUVHOUNEUWNzRlFSa1lUdHZWbVN3V3lwdlpIMGlDM0VOQXZJaklHT2VaejVOVnhXR1kyUjRJR2NMcUhPS0UwTWVFbWtYWEoweW9SdDNYUU9ZWFRjVVpKWnhwUkxrWVJrdUV4dDBBUlJ6WTA5bFlTeGVFUEFURHdrU1Z3WjdFUDh1R3hEK1YyODJYeHB5SlBiZ0FLQXBWeWI3WTNOd1dtTHVBdlNwRHdJcnBRNDhLU2tYTW1EdUJQRUdFSlY1RUdBUUdVU1BGUUFXWHhFSVp2OCtvRmNWQ3YxelhRZmRNUDF5WjBTbVkzRVBvSEh1Qm15QUZKeUhFRmt5bzI1VkJQTXdGUkhmQkdJMURRai9BUElSRVAwMU1ScVBLUU1zREo5Ukt2amlJVGpjR0hTR3FGU2xER3FxQndIZUQyTGJveEl3SkpMMkFTMURGUjRpR3hSeUwwVjJvd3hsWW1PWEZ3cU9vbHVncVJTSUFUanhZMjVpWjBJVEQwU2FXeE43SHlwZkVUTHpKSTA1SFJiZ0d4SXhERnRoRElad01tRU5CMGdNV1JTRU13T2Zadnlub1VBVkFVQVFBUWNiTElTRkVUTGhZdmNPSVIxallSRXpZdjExREd5aVZ6NGlIVU5obzBTSFhIdDhCMHlDTDFjUW5TZ1ZxSE1TRVFIMkRJSDFYVDRpSFA5VUxHTW5BemNvRElXek0zV1JNdjRoWHhIZUd5RWVGUUlITW1iNEcyZ05WSE43S0lMdkR6ZmxDRlJpSEdNSlZ4U0ZvSFN3QXdnSUlGamNNUFdvTFFxZUZGTDVFUnl4cGxjT0JHZ1lCd2pmSnpneUQyRUJFVHVPSVJnVG5IdDFNYVo4QlI5ZURQU05CMTFKVnhXZVp3MHVZMVIvSkdTTkIwY2hJMERoSFFjaEIycVlXMXhpRzBMNG9SQUJFUHRoRElFUm52Z1JNdjRncUhSNW9hU2ZZMU5pRTJSMkp3TWRKMFNGTXpxbEVUTGhZdmdWVjFWK0RQTUVNMU1KQTJnV1hHY1NYbGJtbkhBYktQUmRESUVCWWxiOUNKMGRBbDlDQ0c1alkxTmlDMDRqWEtFMEhSdDBHd2dDRFVTUEl2RGlIUmdHbnhWMkRTcWtESVN6QnZjUk13eVNYeFNJQVRXREVUTGpKdjVSRjB5V1pSdHdIdzVOV0oxdUtHdU9JUVd0RG1wN0wxSUZER3RmcFQ4OXBQNVBBMExkWEk0K0NHMWdWRjhpSFBNY0NtY3ZDdmdGRHdIY0FhTjlwVEVLQlJFWG52QWtFeEQxSndXVkFSSDdLUkVZRjB0Z0V3MWFaVUVSRnZmYVhIdUJWMUhpWlJmYm5sVmtaSnlaWFJPanB6ZnpEVGd6bzFSbEVUMC9HR1NVR3hWdkRVU1BZdmJrTHk1b0NHT3pWRzlBWlI5bkxKMG1FeWNZWVJTaFZJUmRaVGdCQTFOakcySVlGbVdXS1JBRVpUZ0JXSlZmV0ZXY1dSSXZCSEhtRDBra0R2MG1KbDFHWlFTWElUTVFCSVIrREoxTkIwY3lZUVdhSHhjUEFLRTFXbTAxcVRTZ0VtTDhERmtVQ1RXdE1tTmZXR0h2cHhSakdsTU1aU052TVB1T25IMURWdjlBS0dxT1psSW5wMExrRTJxb0VRU1ZXRmNQRFRqeUpTRU5vU1JocG1PeXFTSVNYM0VDcFI1VEsxT09aR0FvWUdjZFp6T0JJMDRrRTBrV0J3V1NWRzlRWkp0Nld5SGlIenFJb3dTdkQxZ1REU0lrRmw5T0dIeXJHUVp6RVRwa1lQSURCUDVQbmx1cktIV2VZMEVZWVBIMURGV1NMbUluV3Y5Rk0xNWxER3FIWXZibE1HNHVZbVNVblBxVURUYm1GUmNTRlNPY0FIcWpBR3loRlFaZkJ3MWFXeXR3SnZTdUFLRUVEemdBQ1VPT0FsTXlMSFI1blE1ZUR6Z1pNVDlQbjBreE0wU0lZeXRlRElFUm52Z1JNd09lTUhXRUhtODRFdkFlcGwxUE1ITGVCMExkWFR4YUVKU3RNd2dOcHh0bUIwTjdvM04yRWFFZUpTeU5wR09VVnhFWUYzU0VFdnVZQXZWL0p4Z3JNeEVhVjEwMEZQU3ZaUFdSTWxrRVZ4RGhZdjFqWlFMaXB4NHVWRkh4TWxSdVZGU1hWemdkVjJrUFowcUZDeFNIRVVaaERVU1BLbEhjSnlFZENSSW5Ddk1uVkYwaUx5VnVWRldVR3pwenFJTitESUVRcHlNUEczV2lDR1duR3pxTENLTmluMXFUWElSYkdGUnVWRlYrWWwwd0pIMVNLUDQzbmxSNEExU2xESUVBcDBadVZGUnZDbVYvWjE1S1ZGUm1abEx1STJOL1dsU0tMUThhVklxdENscHVJMk4vV2xTS0xSZmVWSXF0Q2xwdUkyTi9XbFNLTFE4YVZJcXRESnh2cHdxQ0ZQU2xMUlZmVzBJWEZHOHdISWttWnZSdVZGVmlWR2o4WHZXNnJ2U0tJbVp3V1Faa1d2ZjJHeE5jTVJMY25ReXFWR09OQUYwMkMwSG1JUFJocVFnc1ZIcXNNMXhmV21BYUFQUmhxUWdzVkpaeU1TTGZXUGd2SVBWek13V09WRjQwTVBSdUVhSDlGbFdTRlRXWlZGNDBNUFJ1RWFJTkdQUmdaRzRlVkZnbkJ3RHVZSFJtTWxSaHFRZ3NWMFNMRlM4L0NtOGpwUFJocVFnc1Yxa21FSWovQ1FwZkJsQTFLenVVVkY0ME1QUnVFYUlDSEZXU0Z6MG1WRjQwTVBSdUVhSUZIdlJnWjB1YVZGZ25HUWJ1WUhSbU1sUmhxUWdzV0dnRVhKSUZJMGNDSWxSaHFRZ3NXSU1mV3pXRklSV1lWdklpSTB5QVZGNDBNUFJ1RWFJdUlsV1NHRldpVkY0ME1QUnVFYUl4SlBSZ0FJQUJWRmduS3hOdVlIUm1NbFJocVFnc1d5QWJHSnl5bzFJaEN2UmhxUWdzV21JV0gycXlvUjFjS3ZxQkFGU0ZWRjQwTVBSdUVhSWRKdldWSTFMYnBUeVZHVE51WWFEN0tscWZYekxsVkYwM253eHVYMWNkRVBSZ0RHQWFWRjUwQjE4YW9QY2xBdlNWRmxid1ZGNDBNUFJ1RWxSdUt2UmpEUUh5WEh1RW8wamJNeGtTSXZSaEFURHVWSHB1Vkk0dkZTcU1YR0VTR1NXQlZGNTBCMThjWTBWMUF2U1ZHUWZiVkZnb1ZIdHVYd3hpWnZ5d0ZUTjhWRmt1WkpMdVlIUjNXbFNXQlJjclZGNDluMGZ1WXZaZkl2UmRGbWYwVkY0OW9VWnVFbFJqRmxSZUp2dUxWSHl2V3ZwdVd2Z1FMUFJjbkpnVlh4RUlJelp1VkZSdkFGdWVMU056RGxXdE1UanVZUVo5WFBwZFhKVjVNdmZ5TTNTYUR5V3FKSFp5QkpFdlZIcUZYRjVMQnlEZVdQWjJBVFI4RnkxMFp2a2VwSEgzRkdWaVpKZ0NWRlJ4S3pMdkdSanlWbWNrWXc5QkRsWmpXM051WVFXVUN3SVBaSGdPcnhxZ1lTYnVWRmo2Q1VSdVZGRWFCbFJ1VkZaY1hRYjJYbHh1WVFiL3B2UnVXVHA3VkZSdVZGVjdGMmNYb1BSZkJ4V21WRlJ4TW1mdVZGUnVCbTlIRUd4M1ZGajZFS0R1VkZFYUJsUnVWRlJlQXhJQ013RHVZUWNWcUZSdVdHa0NaRmpiRkdmaUdJMHZCUVNNR0tSY1p6V2VNRnFhV3pqellSTURBbU9kRFFqMlZIZ1VKMmY4WFJNUkFJYmxZd09PWmx5UG5tVjJHdlJ1VkZWK1lsMHdKSDFTS1BIa252UmdaU3VlVkZSYkt5dU9BbXlGTW05TUdsTVBWRlJ1Vnc4akVHZmJIRlJ1WHdaYVhTMXVNMFJiS0pTYURGdXFMSnFPWFMxdU0wUmJLSlNhREZ1cUxKcU9YUzF1TTBSZFZGRDJFRmJ1V1FNU1h2UnhBeEx4Wm1jcENISXJNbERpVkZnRVdRTzZydlJ1VkdMYlZGUnVDbGZ1VkZBTk1QUnVXRnFtVkdqOFgxMHVGRzFscVBSbFdtMHpWSDFZR2x4dUp3YzFNUFNWS1E5Y1ZIYjZFRkR1TVRmYUR2UmVKdmpiVkhNMUF4anVZdzFscGxTVHFHTVpWRjQwb1NidUp3YzFIdlN3bm1JeVZITTFCSDB1WXdFZkp2UzFJdnlHVkpBZUFIMHZFeGoyQ3ZSZUp3cXBWR1NCcVBSd1hQMVlERlJlSncxclZIa2RYUFZ3THdmNUdGV1NKUzFnVnhwMkt5SHVZSFI5QkZXUXBKcXBWeXB5WTBqeEFJcXBMRldsRFF1QVdTT2xNSlZ3RDB1bllQUitMelJqVkdrU1pIVndLUUQvSGxIK1gxOUhXUEhjb1JMdVgxY0daRlNiTXlNa1ZGa3dYMVZ5cVBXUkZGUmVKd3FwVkdTQnFQUndYUDFZREZSZUp3MXJWSGtkWFBWd0x3ZjVHRld0cDJiK1Z4QWtNMWp2SWxIaUdQRDFJMWt1VmFXTkJSMHhIVVd5THZBUUZTMGdWRzV2TEdOdUNSSGtEdkFwQVE5R1dHNGVLMUR4V0Z5aUVsUmVKeVprVkp1eklhUnVZSFI1bkZXdkhKcUpWRmI1WW1qZ1owODhudkVQSFFiMlkyQXZwbFp2cFBXckdGRW1YeExtVkZnblhTdHdYUTl2b2xEOW52MXZWbHQvTHdSdVd2Z1FMUFJjbkpnVld3SVdBbFZ1VkZSdkN2UjhDUGJ2b1FXSU1KT21YSnRqQ0ZSdVZIU3dIRk0wVkpjQ0hGeUNNSnlhVjFNdkhGTTBWSmNDSEZ5Q01KeWFWMU12SEZNMFZKY0NIRnlDTUp5YVYxTXZIRk0wVkpjQ0hGeUNNSnlhVjFNdkhGTTBWSmNDQnZXZkhtZ3dFempqQnhjTERGRWNNMldxWlFrUnFHMXVCdjFiSVJaZUMwQUtubEFncGxja0FLRUNMVDBtSmFXc0hsRDdwbWdlQ1BEMEFSSVZBdlIrb0dnVUJRV2lYMEQrbm0xU1lGVnpvd04xQUdrVEV4QU9NbE1OQjFXS1lSRXpXRjVBQlRBR25UZnhCd3FmQ1A5WU1RZ0tFeEhrcHZ1VEMzQXNLSEVXbndSM0hGTTBWSmNDSEZ5Q01KeWFWMU12SEZNMFZKY0NIRnlDTUp5YVYxTXZIRk0wVkpjQ0hGeUNNSnlhVjFNdkhGTTBWSmNDSEZ5Q01KeWFWMU12SEZNMFZKY0NCdkQ2SHhXRUhtODRFdkFlcGwxTkIyOWpBSE1RTXd4dkR3THlFS0RpbzFPd0RtTjBGemNPRlFIaVhJQU9IM0h4SEhTSEdLTnhEd0VMQm1nUEcxUnVuSFdlWlJTRVZhRHZFbHFVS0liY3BQQXBKM09pRXZXSkhJY1RIUU12WFRwekl5TmFCeTFaRktSeEYwTitBVHlhVjFNdkhGTTBWSmNDSEZ5Q01KeWFWMU12SEZNMFZKY0NIRnlDTUp5YVYxTXZIRk0wVkpjQ0hGeUNNSnlhVjFNdkhGTTBWSmNDSEZ5Q01KeWFWMUQwQjBNQ0dKTmVEUXVOS3ZnRURLV0JXUWo2Vno0N0UwZ0FIUXBtRXlwMll3UjZZMUh1VkZSdkN3SUVEMkF1TWxwY0VteVBvUXR4QUZ5bklUYjhFSWIrV3lidUJRcUhxSEV5bktOeU1sTXVuR01TSnhwZkpsUjRBMVNpRUZnQnBQMGVvMnVIRDBJb0lKNXpWRklPWXo0aFpQcCtGeElyVzA4YlZGMGtZdkR1VkZEa1hSSXdIUTF2REo1WUxGQU9JUkVhWlJJd0d5YmtWRlJ5V1RidVZGUnZDdjhnVjF5QUVJamhBMmZ1WUdOa0t2UnVXMDBpVkZSeVhQTTZWR2t0RUdIdUNGOXFCRlIvSzBBU1ZLWjRFRnR2QklBWVhQV0hveVJiVmFOMElsanhBUEVNSXZSK24yZitWS1o0RUZ0dkJJQVlYUFdIb3lSYlZhTjBJbGp4QXpNWU1QUjlJUFNaWG14bER4U05NeVNZWTNjNlZGU2NIRnh1VnZNcVhsUmJZSTl4VkYwL0hKcHVWRkVMWjB4aW95QXpERjB6Q3ZxVEJGMGVKUkw1Q21xcEV3eC9BMTBiRHhPMEZIUmdBMklnSVRPWUhIV1RCSWtQRDBMNW9VQWJJUkx3WUdBT1lIY01ZeGZjbzBneURGMXBJdmdITFJnRUQwTDZYSlNkREYxeEhUT1RCSmttcDBmY28wZ2JIbDB2V20xVm5KRWFMMFJoWDI0akRGNDBFbFdXWlFFZFZJRVNLbHVjRkdOOXBQWjJuSTVaR3h4akVsUnhERjQ1RDFNT1l4V1dJMFJoRjA5TEZHT1VWRklWbklaOG54SXZwUGZmREY1SEcxcVdaUjl4V3h1ZEFHWmJWR2tORjB5SEV5UitISUV0RWw5aUVIcUdLU01TQ1J1UUVITDZJMWIrVkdrTkd5UnVDUk9TSG1rbEwwUmFERmtrVjE5V0YzQWNwSFJmcEZBc0ZIZ2tIUGpqRUc4YnBIUmZvMDhoWXdTaUN2OHVCSmdJWGxSdVZ4cVlNbE1NcUZxZUhHY3lMeElyQklmZFZGY0hJdnQ3RTFFdkh3eVpJSFZtRUk1cXBsNHVYeUVlSEhTR3FGRWNFSlNCb0dTU0x3dXRuSFNJQUl4NUV4SVJGeFptS1I0aFpIcVBKSWNGRVJnUG9sNVBBdklTcVA5aEJUcDZaUUVPTW1MakFGWjhBeEhlbndMZ1l3TjlNdkQ5Q0owdVlsOURGbHhsRUlrTkQyMHVYeUVtbkdWY0ptT1laRmtybnh0a0x6cXJEd09ZQnoxUVl3T1NMU0lRbkpSZm52RHhGMk8wRHpjZUZKSU9JUjB3SnhSNExhQXZEemZsQXhWdVZGUnZDd1duR3pxTEVJNGFHbHR1WUdPanBsUnVXR2tGQUlrRFhTdVJZdjRncFA5aEJUcDZZd1NlWnd5UVp5Z2FYVHBhWnlaZUVSeXhKbE1hV21mZldSRXlJMTFnRXdFam5RNVRFR1ZjQUhXT1h6TGFFdnQ0bzNIL0pKYjZwSE1RTXhmMk1scGxYRklQQUZ5V1kwSU1GeGdGVkd0M0lUSVRLM0hjQ0hJbkVsa29WRjBpWnhWdVZGSHhKRlJ1VkZWK1hLSWlwbTFTSlJFeEZQUmdaR1J5VkZSYkt5cU5CM05qcDBFV01UWjVWRlJ1Vkhid25UTVJxUldmTUhWdlZ2TGRMbHQ5cFBMMUhSQWNJdlJkVkZSeVdGRHVWRlJ2Q3dIMlhTY3RFSWdycVRwdVlHT0ZuRlJ1V0ZFZFZGUnVWdzRpWUZBTUdISXBZd3FlVkd0M0xUa09IM0VkcVJMYkYwVjFuUEFXRUlFU3FIcHdKRlJ1VkZEelZJcWNEeFZ1Q21mZUxGUjlZMTBtVkc0d0JRZnVDRjlxWmxSK1Zta0VDd0x2SlBxZlZLQXZvbFJ5RFVTRFdTYmpDVVovSmxFVFkwQVpwSDhnWXdxS1Z6MVJNeTFrQ1BSdVZGVnpXUTlyRUZFU0xINDJNeFNHcUlIa1ZJcUtabEFTTFFXbENQUmdZbDlPVkZSeVdSVnVWRlJ2V3ZBblZtNVpBeXlqRkh1UUd3eUZKRlJ1V0ZIYVZGUnVWdzRlSVIxWUR4SUtxSGtSVkd0M0p6Z05DUUxkcUhXZHFGeXpWRlJ1VnZMeFdRUm1WSFdmRFR5bUV2eGVwSlNUWFJjZFdIU0hJbFdXV1BENW52RU9IeURlTFJFWFhhSVVWRlJ1VjFSdkVJai9wUlNzRkdaZURJRU9XSUx1VkZEa0JST2xGUU1qRXpPQUdHTVJGMHlaRDBNdEsyV1ZESUVBbjNIdVZGUnZXdlZjSWxiNUVJdVJNUnR1WUdWYUN2UnVXRkVGVkZSdVZ3NHhHeGppWVJJTElhT1hWR3QzTXlPUlkyU1NBeE1ORG1FZEVUTUhuMER1VkZSdkN2ajJZeTFSRUlnUUx6RHVYeUVBQTBBY3BtZ2dWeEFmS3pBUkZTZjVLeE42cGw1YkV4QVNvUHQ1bnY1ckVIV0RFU1Z2Q0tPT296QU5CMTFyblExakZLSDdFdnkxV3dNUkZTZmdMUlNIR0pqK1ZGUnVWdzRkcHpqNURSSW9CeWt3VkYwa0ptWnVWRnVySXhXZkEyMDBFeEhrVnladVZGSHlBRlJ1VkZBRVZ2dTFaSklTS0l0M1dQUmdZMWtEVkZSeFpGNVBBU2Jqb1JSNFlSOWtFSXVjVzBqdUJRcUtxSFNGSVNJYkR5UitZSjh1VkZ1ckl4VjJXS04xRUdxMEZ3RU5DUTh1b0pwYVp2amVEVVdVb0p1YVdtVmNWSE9sRTIxYkVJeHpaMDR1WUdPb29QUnVXRkh5VkZSdVZ3NDFISEF3TEhJck1sRGlWRjBqWkk0dVZGSHlFUFJ1VkZWelZJOHhLU1p2TFRIeG5SVjBLSkEwRHpiYkt5NVRLekxtV0hNU1kyODBWRlJ5V1RidVZGUnZDdjhnVjF5QUVJamhBMmZ1QlFxcURSRGlJM1pnRDJ0MU1RVnVWRlJ2QzFTY0ZGY3hWMVNNWndaeG5LT2hDbEVjcFRWN1dUeWpJd3B3SEl4bFpsQUVKR1ZtVjFTTVp3WnhuS092QmxFY3BTTDNWMVNNWndaeG5LT1JaRkVjcFQ0L1dUeWpJd3B4bktPdkJsQUVKR1ZtVjFTTVp3WndISXhsWmxFY3BUVjdXVHlqTHdmd0hJeGxabEFFSkhiN1dIZ0ZYMER2QkhTS1hsVjVESXBlVnd5T0lsZnZCSFNLWGxWNUZ6eGpWd3lPSWxmdkJIU3daUElZSHZIL1dRQVpDd1J4Wm1jcENGcVNGejFZV1FaNktRNHdIMjFvTGxBSG53a2RWMUlZTFR0eG5LT3ZCbVZkVkc5WERRSWJKMU9OQUZ4ZUV4U2JMbWZjWnZ4NEwxU09IbGNNSHdWY0ZGcVhaRmo2TUZSbUV6QUdJbVdSRFBxVVp6RWhLdnBsWHZTRUdSU2hDVGdMWnZ5R25JRGpIUVo5SXdSZkJ4OWnaBXBsYWlu2gApAXInAAAAKRZaCWN5X2xvYWRlcnICAAAAcgMAAADaCUV4Y2VwdGlvbnIMAAAAcgUAAAByEwAAAHI0AAAAcgoAAAByEAAAAHISAAAAchYAAADaA3N0cnIhAAAAchwAAAByJgAAAFoHUEFZTE9BRFoETU9ERVoIU0FMVF9IRVhaB0tFWV9FTlbaBGNvZGXaBGV4ZWNyCAAAAHIIAAAAcggAAAByCQAAANoIPG1vZHVsZT4DAAAAcyIAAAACARQBDAEmAggDCAMIAwgDEgMSBxgMDggEAQQBBAEEAhIB"""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
