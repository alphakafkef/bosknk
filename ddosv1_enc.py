#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYZQyAABuS1dQV3ljNnJhYnVWMU9wQkZSYU0wMXVWRjFObkd4dVZGRUNaUlJnV1JnVkNKOXRuMldPWVVOZ0RSQXFIeTAvREZrallIT1FLSWd3REhSZnBQMU5EMTF4bkhBT1lVTmdEUkFxb0o5VERGa2pZSE9RS3ZmekZIUmZwUDFORDE0MFlSZ09ZVU5nREhBckNKZ3VDS09NWm1PT1lVTmdEeEFySFBXeUNLT2VDbVdPWVVOZ0QwQXJBVEl3Q0tPMEVHQU9ZVU5nRFJBcm55T0tERmtqWUhFUUthRDZvRzFrQnlwMkNVV3hZVEh1Q1FqZ1ZsUjhDMWZsSVJNdklta0hMUnBpbzBSZnBQMU5EMTFGS0c5T1lVTmdEUkFybnlPS0RGa2pZSE9RS0lnd0RIUmZwUDFORDExeG5IQU9ZVU5nRFJBcW9KOVRERmtqWUhPUUt2ZnpGSFJmcFAxTkQxNDBZUmdPWVVOZ0RIQXJDSmd1Q0tPTVptT09ZVU5nRHhBckhQV3lDS09lQ21XT1lVTmdEMEFyQVRJd0NLTzBFR0FPWVVOZ0VSQXJxUWNnQ0tSNkltTDlJUkg5RFFPU0N5TWFDS1NEQkg0OXBJeC9HdzFrTHhJRUNLU2VGMVo5cEtFRUlHMWxYU3FLQ0tWa0tJeDlwd2N3Sm0xbEQyeXFDS1dabzE4OXB5STFKRzFsS2xNdUNLV2JZM1NPRmFPbUIwU1hYUlptREY1dERKY0ZNeHUwWjBTWElKUjRERjVsR0prRk14dTBBSFNYSUpSNERGOGlKSjVGTXh1MEEwU1hJSlI0REY5T01LT0ZNeHUwQkhTWElKUjRERjlHcEtXRk14dTBCMFNYWFJabURGOWJXMUlZWEpnMUhIU1lIUnB6REhjSUxHdU9aUFowcUlXekZVRC9ESGNJTEd1T1pRSU9XU1d6RlVFT0RIY0lMR3VPWlJ5WUcwU1hBSmNvRmx5a0l6TUhMUlIzQ3hTWUUwQW1ER09BTXp5WVhKZzFISFNZbjFqZ0RGOWlZYVdGTXh1MEN4U1hNMjA2REdPTUpGRUZNeHUwRFJTWVdGRDhER092S2xJRk14dTBFeUFXQkZTUFhSV1BXMnFZWEo4aFYwU1lFMEFtREdPQU16eVlYSmcxSEhTWU1TMWZER1J1cUg1Q0JHT1VZeFNZTVMxZ0RHTzBuUXFITFNBUUVIRVNYR1dCSVJ1aFdLV0hMUmoxSXhJb1ZscDhJUnh2WDNBT1pGZnpIUTFtTUZqaERIZ3hLSmtPWkcwbEhIODVaUnF2REhneEtKMU9aR2Z5QnlFdEgwQVNFUTlDR0o4OXAyRXpZSUVXQVF0dklUT1hKbHRjV1BTYk1IdDNabTQySVJ4OURVSUhMUmI5RTBTWUUwUjBESGNqcG1nT1pJTDZDSVd6RlVFQkRIa0xYSGdHRlRTcUZGUjhDbVJ4RVJXaUN6V09GSXFQWFI4NVpTMWxWR2o4WUZadUNROW9IUlJrbkhmNFZHai9KMTFZWEpXaUhRMUhFRzFOWlJIK0syQU9aS0FNSlExMEV3Y3hDS0VDQm1iMm5JNUFBbTEwSlJPa0lSTVVGUlNRWDJiZ1lIWmVxRzFzQ0tFbUgwQUhGeFp5WjFFdEVsOWlESDFZbkdNT0dTTGtEMFN3TUl4ZkNLSDVNSHlPWVVPUEZSODVCSDBjREhnVUQzSUZNeHUwSHhTQVpScURER1Y1S1N5WVhKZzFISFNBVzFSMERIMGpKSXB1Q1JOdUcwU1lFMEFqSHpNVnFTV09HR09VSFJSbER6V25GbHllcUlTT0dIZ2NCSUV0Q3Z5aEdteGpFdnFPR0ZNMUUwTHdGSUFCREdXWG9tNHVDUTlvS0hmY0x6OURERmtqV1VBT1lVTnhxUlJmcFBFMURHV0ZvSUlZRUZqa0J4UmxNRkVNRjBIZlpHZ09abFZqS0hnU1lRUjhER1owQ1RTWUVGamtDSFJtRXh1eUYwSGZaRzVPWjF1SG5IZ1NZUVIvREdBZExUMVlFRmprRFJSMFcya2tGMEhmWkhTT0FRYndxSGdTWVFTUER2eWZYbE1PRzBqY0gwZmNveE4vQ2FPQklSV09GR1dqQTBSMEdRTnhHd2ptQklTT0cwSGVGeFNDTFE5aVZHai9LUEFIR1N5b0lGUjhER1d0RUhqYm96TU9HMFNjTG01aFpGSGdESDl0Q0pPSExRNGNveDg1QkhqK0NVV3hYMXR2QkdqdlhIODVCSkUwVkdqOFlGWnVDUTlvSFJSMEswQUdWR2ovQWxNUkNtZ1lvUlJnVjFIaVl3dHpuUHh1VkZSdW9sNGpCUDBmQ1BnakIyT05CeUl5TXpwYkZITzFFSlZpSnp4Nm5IWjRNbXA4bkhXRkV6T3NIUlZoWlF0Z1lST2tLSkVqRFVTTlhUeWFYU1plWkhFV29KeW1FeEF5TWxJVFhSZ1BWSE42cGw1YkV4THhIVUlQb1JwbFkwRVlEejhoRDJ1MEFGMVRFSEVYRlBnU0VQSDFFeThmSW15VFZGZzBZMEV6bzFEbURVV3dWS0FPSVJTaUJITGJGMFZ1RFFjbVl6dVRDUkhoTUhPS0ZQRWFEME1tSUlTVFh2dTFaRjlIQ3YwaEQwa1pueklUWHlqYVpHNDdCUVdrWlRqN0FSUmNNUTR4SkdTVXBsQWtWbXhnb1BIMFZtdW9aUnRtSkhXaFpGMDNCSHVSWlRBVFhtNDdER3VsWkdXSkNIVmNNUTRhSndTVW5LV2pWbXhnb1BMMFZtdXVaeHQwWFNjbFpIdDNGU1YwVmw5WUdSRGpMMExlQ3dmNFphUmtuR3FDRVB5eEN2RU1aSHRqWTNaZEt2eU1HUUVucVVTZUFTYzBwSmYwSmFFa25tRW5xVVNlQVNjMHBKZjBKYUVrbm1FbnFVV0dWSXV1Q0ZEekh2MXZubGdQTFNwZENQMDdKSTBlQ1NNeEdRQW5weU92VkZSdVZIU1dYMXgwRlN1ZURISXBKR3g3RmFTem94UnZKMk1LbnZ4Zk16NUdaR2ZlQndrWkR2TDJNMXlkWDBWbG8ycU9HMnF3R1JEYVpVV3JYMEwwSDBSMUtGcWtEMEV4SHlTVVhta0pNUmtWbnl4M0ZGTUZZSldlWDBSeEZUa1REMFNhV3hON0h2ampaMWNsSzFEZUVRSXNBbVZhRFF1RkZGU0VabGJocFN0NHAwRXpCSHAzWG05UUkyZmFHU3grTHdncW9sZjBCek9sV3ZwOFcyT2ZEd3A0THdxSVdSTjBLS1IwSmFFa25tRW5xVVNlQVNjMHBKZjBKYUVrbm1FbnFVU2VBU2MwcEpmMEphRWtubUVJR0g4MURRZmFIbFplRDFEZkFIRXpCSDQ1RVJXQkZ2QVJNeWZ5RDBFekJIdDNwRzViTFF0dURTY01Xd09nSTIxQVgwTDBIUk4zQjJEbUpISW5NU3l3RTNOeFhsMVFMVDR4WVBmOEkxMXpFeThrSUlWdVdSajVNUjlFWEg5eW5KcHdJeldFV2FEdW54OUVYSDl5bkpwd0l6V0VXYUR1bng5RVhIOXluSnB3SXpXRVdhRHVueDlFWEg5eW5KcHdJeldFV2FEdW54OUVYSDl5bkpwd0l6V0VXYUR1bng5RVhIOXluSnB3SXpXRVdhRHVueDlFWEg5eW5KcHdJeldFV2FEdW54OUVYSDl5bkpwd0l6V0VXYUR1bng4OEN5anZWSFNwcDAwZURTSGpuSFNIREo1Z0R4OWxCMTlSTWxrd0FGZ09KeUFmQ1BnaW5UWjJXUDRtSTBPbFZHVjRaVElVWG1MakZJamZYdmdUQVBqMFoxY2xLMUFQSElaL0JSTHduM1pnTWxNRUV2dVBISVovQlFBcEd2NDBWeEx3V21MalhHNUhXSHRtQUd5T1gwSXBLUHh1VkZBR01GZ0RDU0lURjFqbUZTZ0pwSFNRVnpNSm9IdHdNejVPV0dFem96SDlBSk1MSWxrV1ZtTDBMUHRlSFJFRFcwa3dISWJ4WkZNa0J5WmlGMk1RWVJ5VHFTV0RLUzhlWXcxTW8zU3BwMk1oREZXb015dDVEMnF6b3djWlYxa3NaeXliR0ZwZkRKRGVIUkVVV1JncEJsdDBHVUVGRG1FcEdUODhHSmdoRXZjMFZHeWVaM0h1VkZ4M1ZGUnVWRkF0WFJWOUV3dWVvYUFXV1BSNW9ROU5WRlJjQTFmdVZGUndMUkQvVzF4Nm9QWmdIUEh1Qko5Q0VGUnVYR3VLVkZSdVYyT3NDemNFQkhXMEV4V1VWRmo1TTEwdVZGRXNYbFNLSW1EM25HamFXeWdRVjEwNXBGUmZBMnhjVkZSeExGcHZJU0FDQnkwZEJRTDREbEVWWHZqdVlRRUdYdlJ1V1RPQ1dsYnpWMHRtVmx5Um94V3VMekVMVkZqNkxHeHVWRkVzcFBjbG9RamRWR2o4WHZXVloyMURDUWN0cHlBRUVKQXRFeHR5TXpBR1pQZ09XU01tQng0am9TOVBvUXFFWDJ5YUx5NVRXSGdWRnY4ZUVScWdDd01NcFNnckRJV2ZwSEFHSWxJcEhsUnVWRkFERjFqN1d2SXpvbFdUS3pNaEQxVnhJYVNWTElJcEtsYzBCSGswRmFBSE15dXFKMnF6b3pxZFhTSU1aSDFXTXlNZ0Z5Y3pJMmJjWWxnUFpJNGNYMU9SRnZJWEttcHVJSGswRnpxckRUTUVGbDk2cmFidVdTTVFEbFJiWUk5eFZGMDhuM051VkZIZERTRVNaUDAzRGxweW8wdVFEeFNBblJSZ1lJcUFERjA0R0ZmdUNSTm1FUlJnQzNJS0h6TVZxUE1UQkhiYUFIUmdIdmtNSHpNVnFQdVRCSVpnQXhSZ01RdXFIek1WcVBjVEJJam1BMFJnSHZrb0h6TVZxUGdUQkpINUJSUmdNUXVzSHpNVnFQa1RCSjQvQkhSZ0h2a3FIek1WcVAxVEJ2V1NCeFJnTVF1dUh6TVZxUDVUQnZnWUIwUmdIdmtzSHpNVnFQOVRCd0VFQ1JSaEhRRUdGbHllcUlTT1lUOUNZdjRrTXd0aFZKQVNZUUx2WFNSaE0ycGFYVUh6RElXSEl2SXRCMk1mQ1R5em9sQUZIUzh5blN5WExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXp5em9sQUZIUzh5blN5WExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXp5em9sUnhDd2ZqQ3ZiMnFSa0JMR0FucFNqY0RRZmFIekVUVjJXTm52Z05XMkVERHlSd295TmVFeHA3VndNbFlKTmJBS0lyTXhqMkl2cUxFUEVZRFFmeG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VFdSTmxuYUgrQm15UlgwSUtxSGtSVkYxWU1UanVWRkFCWUhFeVczRUpFeElRcHZFUEZTQVNHUGY4S0c5Z015cDhMeWd6b3lJclcwajluSElKSlI5bUp2MUtDbWorVjEwZ1lGMXVHdjBocEtadVZGeHpaUjQ5WDFmakZ6TjdvME1jTXo4d0h5T3NXSnVNRnpON28wTWNNejh3SHlPc1dKdU1Gek43bzBNY016OHdIeU9zV0p1TUZ6TjdvME1jTXo4d0h5T3NXSnVNRnpON28wTWNNejh3SHlPc1dKdU1Gek43bzBNY016OHdIeU9zV0p1TUZ4eDJLRmplRGFPSVlQZ1NLSHgvVkZSdllHeU5DVGZrR3ZnTkdQMWZFUldaR0lXekkyYmNZSk1oRnZ1SlgxTjhJSE1ZS1FmYkFSazBIeFowS1JnWUhRV3pvdjVlTGxmOEl6TVJLRjBnWUpTQllJeUxHRzQ3RjFOZ0V5dW9CemJ1WFBNMEN2Z05aRmNlRFFjQnAyNGlGMnl0V0pNS0NUV29NejVJS3ZxWEttTWdISWZlSUZrdkltODhDUGdzSHpxbEd4YjdNSkVMWDBXakxHTmVFSWo2cGxSdVYzSGZFSldPcGxiZUR3a1VxRmY4S1NOMVgxU1hWR1dUS1VWZkNGUjVCU0ViRlRrbE1TSURLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLYUQzb1RwekxtVjJNbHBsSXhFVFh2dTFaSnB6cUdmeUVQNUpFRnlTWVQ5blpITURBelN2TWxNMVd2a1JNRjVFV3dNWEIwZ0ZEeFJkREp5YVd6V3NvSnB6SkdEZ1Z2Y1hKUEFLQjNPbE1GUnVWRlYrWUp5dUFIeWtDMkwvWUhBY255MGVESUExVkhTYVdtUmNNMEl1TFRidkRGa2ZJUU9UV1VOdVl2UnVWRkQ2VkdrdEZsZ2xDUGJtWFVWOFh3WmJwd2pkWmx1bENQYjVYYVNuRkZwYnBJY1dXbHVrSnh4YVhVU25GRjBkcEZBYXBQdWtWMnFqWFVSd00zTmJwRkFiVkZjakR3U3hYVU9QWkpEYnBSVmtNUHVqR0tTc0xQUnVXUmppcmFidVZGUnVWdlJ1VkZSalZGUnVWSkR1VkZSdkNtU3FIeGtJREYweEwxT1BYSmtWRVNIek16a1dERjAyQzBNT1lIdVlGeFJnSnlxWkRGMXdLSU9PWUtJY0lSUmhaMU9wRXd4M1czT1lYSjlZb1NaaEJLV1dGVHlGWFJMaFpJRGVWR2tWR0pJbUV3NHlDUmtSWW1jdlowSGZLSXBnRFVPbUZKNVJNdjQwSEhXRUhsYmdZYUFEbzB4aUEwSVpCeEFiSjBXekV4RDFKd1ZqQXp0K0dHRGNvSEQ3WTJ5dkZLQVJZdjRhTW1OMER2RDhESnQzSkdJTkJhWmhYSHFOTHdMelltU0JCbEwwWEoxUkJsOWNKR3lyRlFFVEdGdGlISHFzVjBTR3AxQVpBU3lHRjBnVkFSTUFYUDlDcHZrTURJQW1IMGowSklBWUYwdDBFeU5nWTA5Y0l6dU9vMTEwSEdFTUgwZ1lNbHFSRVBxT0gzSUlYUk1UVkkxeEV6T3NBUnhtWUpnZ0Z4TjhMSFIwRHdFTEFTZ1NKUVdMRXZSaFYwcWpFeElSRnhabUtSNGhaSHFQSkljREVUTDVCRnlPR0Y1WFp4RGJNdk0xREd1dnFQQVJZeVdJWVExaklQV0dFbEllSDNFVEQySUpKSEVYcDBIYkZRWmdCMkFWQVBXVVZIU0haUUhqRDJ1cFdsdGhaSUVBTG1MdkNIRDVFRjBnRG1iMlZ3MVJCSEhnWHlmZERRZ3FLbEFOQmFaaHFQSWdMSTA0RElEbExSWjNCMkFJSHhSNFlVT2lGUUVTQUg1TnBIV0pXUDlDR21Xb0VKQU1Nd01WQVFqMUdIT2tLSExkQXliMm56U1NMbUl3Q2x4Z1hTcWFFSlN0RjJ4aUhRT2NXUlNGTXpmYURIMHhNSmdTRlNPY0F4TVNCeUlkQjB5bUZSOVNMd040cFBWeUFKMXRGUUVTbjJXTm4wWmlLSE1RSDNINUFhRVpFeTFWQVJJZUx4T2VEbDlxRXhBR3FHeDVvUk1FSHh0MEVKZ3ZEVGdRWTExVEQxQTFCR2d5S3c1dkZRRVNuMldObjBaaUtITVFIM0g1Q1J1UksyajlwVEVLQlJFWG52QWtFeEQxSndXVkFQU01veFNIRHhPYUR3RU1xUExoWlJNR292UnVWRkFFVnZiNEh2eVNJMmtURGxSeURVWnpWMFNOSjFxT0ExMXlXeElvSUo1elZGMGpGSkx1VkZIeE1sUnVWRkFFVnhPMHAweDJxSng0WUZSZ0JHcXNWRlJ1VkZadUkyT0tZbFNLTFE4YVZJcXRDbHB1STJOL1dsU0tMUThhVklxdENscHVJMk9HcVBXa0pKTGhWRlJ1VnY5NnJhYnZvMjVLV2xBRUcyeGNBeDVOWEpFVFowTUlMRlJnREdBSVZIdXBDU0x1TVBXU0lsVmRDSDVMVnhJTEkxeHZMVUF0SnZaYUJKeW9WME9nbmxid0QxU0dvbEF2SXhnVVdST1JuSHR4SzFnRUhGU0FGMDh1VkpFMFhLRHVNUFdkV2xSaENLV2VXSFIwWnhSdU1QV3dKbFZiSXg5elZGMU9MUzR2THlTYkVQUmhxUWpjVkhxQUhsNHVGSXhjcG10NlpIcVlWbHFZcUpJVUt4Z0ZBbEw2Q0lXZFYwT2hYbFZ2WG1iK252TDZDSU54V3diOUhsMHZEM1N1RnZEem9sdDVWelNhRnpwekhseDFMRlN3bnpNRVd6NVJERjh1WG05WkpQQXFwUzlkV1NFT1d6OGFabTRqR2x4L0t2SXJXMVdORktOdVZGYmFWbFJnREtXeFdTRU9XejhhbndTQkhsU3BMSUlsWFFFMUgyTHVYMWJiWXZSeURHMUNJbWtzWVNiM292RVBLUFdPblRrZ0NQY1BEdlo4RUZiZ1htTWtXMkQ4Q1B0anAyODZNUmJ6Rnd0NVlHOXRWRlJiS3l0NkZ6VnZLd2NYRzJjUFZ6T0ZvSmNOQjFFWUlVYzZWRlJ1VkZadVZGUnVXRlJ1VkZWL1ZGUnVWdzhiS0l1Q0JIdWNIeE10RkdOdkVKeUhFRjlGVzFFdEZ3T2lWR2tOWHhPT1lGQUlZMXA4WndnY1ZGUnVWSjlLQ1FTd0pSSXVMVHlsRVRMZVp3eVBBU2JrWHhON0tJSXZEemtoRUtSdW96MXFZd09wSElOM0VJZ0lvekx1WUdPV012UnVXRkVhVkZSdVYxUndwbWdkWjBFV292cG1FSTR3STJEdVZGeUhudlJ1VkZXVFgwSUFYbUFPQWxxTk0wSVZIVHgyRXhINVdhQVFuR2t6b1JBY0syQWdBUkRpQUhBT0lGTGpBbUhtSkhqeFZ6OWpYU0FTS1NXQ29sUmdaUzVnVkZSeVdVTnVWRlJ3TFBEbVpGTGVJbWpoWEowdVZGUndIRkFQSlNjbURJRGNLd0hoWlJNSERsUnVWRkFFVnhBMHBJOU5DUGdMQXZSdVhHeGNWRlJ1Vnc0YktJdUNCRjRsSUlrUkVKVmpBd0lPSVIxbUEycHpuM0h1RXhXR016RVJNeTR3WFBWY3B4WmNNbHBsWEZTUW5RcXJWdzFqQlRnRkV4QUhWd2p2RVJFTklSU1JZd3hmRUYwZk13RVJGMFdiSWxSdVZGVitWd3g0RUZJYVdhSDFYMExkWUZmK0R6a2dwUHFUWEp5aUF2UnVYUzVJRG1aZUNRV2FXbHh3WlJEaUxJV0FWek95V1R1UEFTYmRadlJ1VkZBRVdTY2FFVUlURUgxTVowT2xFMjFiRUljZUVTOHVZR042TEZSdVhTNW5BbWtjQ1NXU1lGa3pBUkVZQWxEYVZGUnlXVHR1VkZSdUZ2WmxaUWp1RElFSklGdU9CR1d3QVBSdVZGQUVWeERsTVQ5TnB6UmtXRlJ1V0ZIZVZGUnVWMVJ3S0pTWXFSSGZJU3A0RElFUFpGUnVWRkh4TXZSdVZGVitZd05hQ3hjYVczVmVBMEVXTVBjakRJRDdudnVUWHZ5WElsUnVWRlYvWXhnUEUwZnVWR2ovWEZWNURJcGVWd3lPSWxmdkJIU25XUFdqb1BJVVZhTnduUnh1STJPRVlGTGdDUkFSV1FaNkZ3dHhuS092QmxJWUlJRVlWRlJ1VnY5NnJhYnZCR3VTV0ZBRUcyeGNBeDVOWEpFVFlKa2tZRlJoV3owbVZGNTBCRlZ1WUhSM0FsU3hWeDVuVnhBa0cwRHVNeWYxV3ZWY0EzQVpWSE0xQnpqdUVtZ1hZRlNXSlVJbFZIZ0hDMmZ1TVRmekxGV3RwM1dsVkZnbkFSWnZMMXFKQVBWZVpHV3dWME9oV1NadUwydGVKdkFwQVFOdVZGZi9ZeDR3S0tPT0xQWjhYSXFlV1BSaFhtZnVWSEg1WEZSaHFST0dWRmt0Q2xMdVlHZ21aRlJ1WHZwd1ZGUmRYUEx1VkZiYldQUmZMUmNDVkZSZFdsWnVZSFNFSkZaOFhJcWVXUWtvRFJ0dUtUU0lwdkVwRnhJb1ZGZ25YUDR1V0hSa0ZtanlZenlDVnk5dFZ2V1NXdk1kRG0xakJTQXFFeEVscDFEMUF2dW5MUklyWlNIY1ZGMGtFdmp1VkZIeEl2UnVWRlNYV0ZSdlZGRHVWRkh4cUZSdVZGVitWd3g0RUZJYVdseGlaME1ScUhiaFZsVmRaME9PSDNJSVpHcGpWR2d6RUlnWm5USHVZR1NhQWxSdVdGRXNWRlJ1Vnc0ZkF2NXFFUklvQnlrd1ZGMGpHMnR1VkZXVUd4SXBBbTFmVkZjSEpIeVNMbUx6Q1JPbEZRT3lWbElBRkpPT0gzSUlaR2YvWUlnbUVJZ0lvekx1WUdPV012UnVXRkVhVkZSdVYxUnhDMGd3cHhSM1dsV2ZFeEUxRmFIdVZGUnZDbHRhVncwM1ZGUm1abEx2cFBBdkVsV2pWbXQ1V1FaNkZ3dGhGMGdzSGxJWUlJRUFWRlJ1VnY5NnJhYnZvMjVLV2xEbVpGTGVBeDVOWEpFVEFRYmpuRlJnREdEMlZIMVlHUlJ1WUhSNkJQVmJwSUlTVkgxSElKcHVGSXUxbnZXVUF5MHpWSkVxSVJadk1JYmFaRlN4VnljTFZ2dUpHMkx1WUhTWUlsV3ZISnVSVkY1MENQeHVFMDFHWXZTQUR6UmpWbGpjVzBwdlhtUmZKbEFPSlJXckN5NUVISTh3S1VBWUttNXJISVNzV1BaNUlTOVNZS1NNVmxFTkVUZ2xXU2d0VnpEeENKY0NYUFdUSUhFZFcxV0hvS1J4RFJFZXB2RW9MUFphVnZ1SkxIanlWMmdUQ0ZXVEdRNXlXVUVZTXk4dUwyY25HRkg2TWFWZ1ZGZi9DSVp3S0tPRE1GSUVDSFNsV0lFdEpSYmlZSHFscFBJbUwwcHhWRjQrVng4dVl2Wi9XUEwzTG10alZGZi9Fdzh1WHhmN0FQUmhDdkR2VnpOOUp5dHVZdzR4VnZXTUtLTmtWRmduWFA0dVdIU1RIeElwRkh5aFZGMGpuYVJ1VkZFWlpVYzZWRlJ1VkZadVZGUnVXRlJ1VkZWL1ZGUnVWdzhiS0l1Q0JIdWNIeE10RkdOdkVKeUhFRjlGVzFFdEZ3T2lWR2tOWHhPT1lGQUlZMElwb0pTbFZGMGpwM0R1VkZIeVZ2UnVWRlYrWUp5dUFIeVNKMUloTXZSZ1pSa2FWRlJ5V0ZIdVZGUndZRlJ1VkZWK0FTRVVGUzVWQXdwbUN4RVdNUGNtRUpXaUhGZ05IUzFLVkhBY0NUTWZEMnlzTDIwMEVQODFEMFNJV3dOM0FGTWxNMkh1VkZIeG52UnVWRlYrWlRPSlpJV1NLUk9Rb0ZSZ1pUcWpWRlJ5V0Z0dVZGUnZDd0lFRDJBdVl3T1RJUlp1VkZSd0hGV1FMbWNvRlBBd1pINHVWRkh5WVBSdVZGVitYUzFMR214aFpLRDRDSE10R0dmM0R6Y2xvUEh4SWx1dkowQXlLUTVJRFFjbVl6a1NLR0FtcUZSZ1ltV1BWRlJ5V1QwdVZGUnZDd3hjb2FTZkVJOVZGUUh1WUdTTFp2UnVXRkgyVkZSdVYxUndXSTlvS3hFeVh4cDFWMFdURGFTVEtsa0tCSElvR1R1eVZHdDNJM0lURDBWNUF4TGNuSEhiVkZSeVdUUnVWRlJ2Q3djUFpIT2pFSWY2S1RadVdIUmdYbFdSRVQ0dUVHcTBHR0lPSVNNSVhSUjVXbWJ6VkZSeVdGZnVWRlJ2Q3dmL1lJZ21NbE1NTGxiZ25KUjFGSElvSUo1elZGMGpHVHB1VkZ1cktITGJGbUx2QzFjYURsY1FuU2YvQTF5RVgxeGFFS0lNWTFmdVZGUmFYbFI5TXZqM1ZHa0JCSGZ1Q3pnYkdsU01MeXlQVkcxT29RYnVKRmoxQnZTVkdIZ1ZWRlJ4R1A5NnJ2UnVWRlJ4VkZSdVZGeHVWRlJ1TVBSdVZGVi9GMEhicUlPVkNJTGRxUmZjTW1qdkV3eGdYMXVRV2w5REtSdWNIeWdMREYwaEsyMVdaUFdTbnhaYVhQSG1GVHlxbzBTQ1Z3NXBLUnVjTUZFeURGMDJJUmdTS0pJVEYwUmdDSnFlRFFPckp5SVRCSmtRSm1Xbkh3cWZDVVd3THdWdkJHdUVYSGZkWEZrR0VST3lHdk1UV2x0ZHB2UjhDUDB3VkdqL0FsTHVDUThrV1JFT1psY0NWR2o4WUZBVEJLSVdLUVduSHdxZ0NJRVNDSE5qRUc4bFdIZmNMejlEREZraUdsNUtDUnR5Qm1IMlhTY3RFSTRqSUZ4dVlHU1RZUFJ1V0ZFSlZGUnVWSGJ4SnlnZ1ZsUnVYUzVLRXpPQUJtcVBuYUhkTGxSdVZGVnpWbTh3WVNTVEtsa0tCSElvR1R1eVZGY0hJeDFTTHo5bkFIU0dxSDVmVkZSdVZ3NGVJUjFZRHhJb1hTT3VWRjBqRFRadVZGSHhuUFJ1VkZTWFZ2YmdWSjh1VkZEa1hISXZaUUxsQm04Z0ozQVNKMUloTXZSZ1pSeXpWRlJ5V1RwdVZGUndIRkVuTXprbURHcGFGdldRbkZTenBTOTFGMlo3RUtFeUlTWnVWRlJhV0ZSOHB5UjdWRzF6WVFmdUNIU2ZKUFI4cHlSM1ZIdUFJUmZ1VkZFWlkzYzZWRlJ1VkZEdVZGUnVXbFJ1VkZTeFZGUnVWdzgvWmFBbVh4dDVISElCRmx5YUNQV1RCRjh4QklFdER4Z09GVHlvcDJTVEJIdW1uMFJnV1FBUEd3ajlIbVNWbkpIeE1SUmdBeUVZRUlra24wV09ZRzFhbjBOaklJRUhFd3l3Q0libEp5VjNubWtsTVBnRFZHajhZRlp1Q1JObUZIUmdDSnFlRFFPYVZHeVJDbWdZb1JMNlZJVnZWR2ovSlFSN0p4a2NFdlJ1VkZTWFdROU5NUFZ1VkZ1cktIT2xZRnRlREd4bEFsRU5CMjl4cUcxa0FGSXNESVdISjJqL0p5RXJxUk43bzJFMUVJNXFwbDR1WUdPVE1GUnVXRkgzVkZSdVZ3NGVJUjFZRHhJb1hTT3VWRjBqRFRadVZGSHhuUFJ1VkZTWFZ2YmdWSjh1VkZEa1lITGJCR0x1RUZnQ1dtUjdDbDFvcDBJb0lKNXpWRjBqRkpMdVZGSHhNbFJ1VkZBRVd5RXNHdkVPQWxNYkswRXpvMURtRFVXd1ZLQU9JUnRtVkZSdVdGcUdydlNLbkhWZlZHMGlLR2Z1Q0hTY0FsU0xvbHgyVkcxellINU5NeVNZWTBPekhIZmlyYWJ1Vkg0L1d2UnVJMEhhVkZ0Z0syRHVZR2tlcFBSdVdHMUtFd3h5cG1xVEJHdGdCeHhpb3c5ZUlSSVBCR2tRV211SktSWmFEbWIwRkdOdktLV0hFSWtqWUlFdEVsOWlGVHlxb1JNVEJKMDJvMFN3TUl4ZlZHa05aMGNPWUYwNUVSZ1NZRmJ4REYxTkdKWjJuSTljQzBmY3BSVnlGVHlxb1JjVm5KTTFEdlI4RFJnWElSTU5HVDh1Q1JPWUdSUmdFejFmRkdObUcwNVJER1pkR2xSOENQMHdGVGJ1cDJObEp5WjNZbTFIRUcxTlpSSC9adnVZWEpXaUhSUmZvMDhoWXdPdEcyTDFBdnVuTFJPekp5UmpyYWJ1VkdaZ1ZsUnVFR3h5VkYwNFlROHVZR3UwSWxSdVdIV1ZDejVSRVRXVEJGSW1BMFJmcHdmYkNTcVNZdkFTQ1F5TUdtZ25HVHVqVkZSdVZ3NGxDbUFySTBJcUV2ZnZWRjBqRkpMdVZGSHhNdlJ1VkZWK1l3TmFDeGNTS0pSOVdGUjVMSEFzVkYwa0FQTHVWRkg4S1JNUUlRdVBBUkVwcEhxTkIwanVGbDlkWHpBTEVSeWhXbUFTS3ZWa0JsTGdYSTFCWFMxTEdteGhaSUlPSWxSdVZGVitWd3g0RUZJYVdhRU9Ed2N6RlBxREV2eURIRnVPSVNjS1p3STBBR0FFQnY0NFl3eHhJMFdiTW14MFhTSW1CME1Cb1JxYVcxTWhBUk1TRVFIMkRJRGNLd0g5cFJjRElIRVhudkFrRXlOM1dGWjFxSGptREdqZHB3QWhNbHFBQUdNVEQySWdXUkl1TEdMMkJKT0RZejVhV2FJWFl4RVduUnRjRFVWZ1hQeU9JUlYzVmxSdVZ4cUNDS09HWFVONk0xZnhwUWdWWnc5QkV2eWRIMHh1VkZIeEtsUnVWRlYrWVRreG8wTVNKMUloTXZSZ1pSeXpWRlJ5V1RwdVZGUndIRlZkREZFZm5JcHpweXlTcUhwd0pGUnVWRkR4VkcxT25HMHVDSFNjQmxSK0pJa1FWRzBpS0dwdUNVV0VaRlI4cHlXVEVROGFKR2NOTXlTWVkzYzZWRlJkV2xWdVZLV0tYdlJiWUk5eFZGMDlERnh1VkZIZERSTDVZVDVFR3dqZlhKT1dZMjVGSjB1Y0lUTU5Fd3lPWm1mdUNST1lGSUVTQkdaOElUT1VZMjlWbklFekRSTDVIbTg5VkdrTkYweUhFR3htQ3lFdEVsOWlGVHlITXhPVEJKSVlDbFI4RFJnV0lSSDVaME9ITFJwaW8wSDlIRklBRVJXcVp6T1RCdlIxVmxSOENQMHdWR2ovQWxNUkRGUmFIUkw2WHdmMFZHajhZRlp1Q1E4M1d4RC9CMGdmQ1VXd0x3VnZCR3VFWEhmZFhGa0dFUk95R3ZNVFgzSU5GbFI4Q1Awd1ZHai9BbEx1Q1E5TFpHZ25Gd01YQnZmMloweHhKd044cG05b1dSTGlEMGtrR2wwaFpHYmhxRlJ1VkZBRVZ2eXRBYUg5cFJWeW54T0pvMnR4RUpaYm55cHVZR1Z1Q1BSdVdGSCtWRlJ1Vnc0L1phQW1YeEl1S1VTWFZGMGxISGp1VkZ1cktHZ1lKemp1RHpqaEVIMVNMMVJjQ0hJc0wxYjRWRklOcElOd0tSUjJvUk9tWEowbUVKQUJIRjR1VkZIeE12UnVWRlYrWXdOYUN4Y2FXbHF3SUhEaEh3dUFWRlJ1Vnc4YktJdUNCRlJ1WHhmaVZJcWNLR054Wm1jWEFsRG1CeGIzV3YwbVpHOHZCSFNpWjBJd0VQcW5WRnkwRHhnYVdtV01ZSEl2REtaZE1scGxYVVdPSDJrTlcwTU1aMXVpVkZWY3BTVitwUDV5VnpNaEQxVnhJYVNWTElJSnBIdW1LUmZ5SHZTR0Z4Z0tJSEV6b3laaEtUTUpNUlZiWDFOOVcxQVlEVDFWS0lNcUoxRU5CVDl2b0g4dVZGSHlDRlJ1VkZWK0F6eW9aeklTTFNwMURQUmRJVGdIRUpXaUhGZ05IUVdwQVJJVkhUeDJFeEhrTEp0dVZGSHlGbFJ1VkZWK1p5Y0JNMXVhVzAxZUEwSXZZMWNjRHpqM0h2dHVJMXBtVm0xa0pHMXRFUnlvTW1PU0x3TmdaRjloSVFNWEV6T0FXd3FTSTFiNkRGUmdZbVdQVkZSeVdINHVWRlJ2V3ZEL0t4SHhFSlNCQXpNT0gzSUlaRldISDA0ekVJY1VZU2Z1QlFxVkR6cHpKUzF1WVNTV014SWFXeXg3SnZTdUFtMHVYbXhsRHhTYVd5dVpvdlNRR1RrQ1ZGUnVWMVJ1RUo0ZUltYnZNeU1WRUlnUUx6RHVZR05oS0ZSdVhTNUpEemozb0dFVEhRTWhDeE1TWnZ4M0VJZ1puVEh1QlFxQm5SRVlGMjg3VkZSdVYxUnhDMGo3cVJJd0wwU1ZEemtoV0hWd0R4TVBwUkFhTTJxdk1sTTFYRjFUWHYwZUN4TGNKS1ZqRXhXSFlURU9JU01JWFJMZFhUajZFUnlXRHo1U0x5T1pIdlJkSVN5TkRRZmpCejVTTG1MdUhQV1JYSnFmRXhXSFYwY1JNd3lFQTBNU0VTTVZFeEhrb0pqdVZGdXJJSEhmSVRaOUVKVjFCeDh1WUdXcUhQUnVXUVJkRXZ5REhGdVNMeHFUSEZSZElTOCtFVExqRlB1TnBhSGFuUnFiR3hPUERJRUJWR1NUSFFNa1lISGZLSFZlREd4Y0Z6RHVWRkh4S2xSdVZGVitZUUxoS0hFU0ptY3BMbFJnWlI5YlZGUnlXVDB1VkZSdkN3Z25GVEUwRUpPU1hHNHVZR1dQRWxSdVdGSVhWRlJ1Vnc1Tk15U1lZMEl3WFRjS1ZGMG1XeWJ1VkZ1ckpSTVJZUzBlRFFjTEVsVjVMU05ob3hJcUpRcHhWR3QzSlBTUEhIT25vSFNSWXdaaEV4QVBabUFhV2FIaVkwV2ZCMXA2QkdFdER5dVJNVEVucG11SFd5cXFFSkFFQjBTVEVGOXdaUFJ1V0ZFelZGUnVWdzRnbkpSMUZISW9LYUVhVkd0M0tIT1JZMXFtWUhBYkFKRGxWRlJ1Vnc5YkN6RUJJRkFFSlVIZ1YxU01ad1p3SEl4bFpsQUVKR1ZtV1R5akx3ZnhuS09KQWxMZ1phRDVXUVo2RVFId0hJeGxabEFFSkdWbVYxU01ad1p4bktPdkJsRWNwVUVRVnd5T0lsZnZCSFNLWGxWNURJcGVWd3lPSWxmdkJIU0tYbFY1RElwZVZ3eVlad2J1cHp5UFhQU2xuSFZjVktXdENQdHVwek44WEZTbEltTGJWS1dLQXZ4dXB4NGpYUFNsR3dOY1ZLV1NDUVZqRUhFRkttT1NFU1dzV1R5am5RMHhuS09iQ0ZFY3BUdCtWd3lIWVF0dUkyT0tZbGNLSnpNRVYxU01Dd3h3SEpmbFpGQUVKSGI3V1FaNkl3ZnhabWNiREZFZFdGZ1JXVGJ4SXdMd0hJeGZabFY1RElwZVZ3eVhuRzB3SDFXV0xQQUdZd1NIVjFaeVgwOHdIMHlRSGxWNURKOG1XVHlqS1F4eG5LT1JaRkFFSkhiN1dIZ0dEbThrTGw5SnBSU0FKdldtWjBTQkVIOU5BS040SUdTVXBUY1NaR1NMbzAxT293SVFZeE4xWnhSelpIcWJWSDBtV2FFQVl3QVBXYU5qWnk5eFpGU05BSUh3SHdPWEptWnZEU09iSjFIbVd6cD3aBXBsYWlu2gApAXInAAAAKRZaCWN5X2xvYWRlcnICAAAAcgMAAADaCUV4Y2VwdGlvbnIMAAAAcgUAAAByEwAAAHI0AAAAcgoAAAByEAAAAHISAAAAchYAAADaA3N0cnIhAAAAchwAAAByJgAAAFoHUEFZTE9BRFoETU9ERVoIU0FMVF9IRVhaB0tFWV9FTlbaBGNvZGXaBGV4ZWNyCAAAAHIIAAAAcggAAAByCQAAANoIPG1vZHVsZT4DAAAAcyIAAAACARQBDAEmAggDCAMIAwgDEgMSBxgMDggEAQQBBAEEAhIB"""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
