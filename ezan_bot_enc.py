#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYSAuAABuS1dQV3ljNnJhYnVWSEg1V0ZSYU0wMXVWRjA2V0ZSdVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYweEYwYjlvM1YwQTBSZ1dSZ1lDS056Qnd1T1lGMUVHSER4QVBBVEVQRDlYSHR1Q1E5TFpIUmdXUmdCQ0tPT0dRZ09ZRkVZR20xakZ5SVNERjAzRTJWOXBTa3VDMUVUWVFMNklUT1hDRnlPWUc4YUVIUmdGUmdYRjBIZlpUV09ZSWNLR3hnU1lRT3dESHlMQTJqOXBHNGdHRzFrRW1BZ0RGNGxxSXVZRUdIMk0wUmhFRmtwRjBIZlpUcU9GSEgxTVJSaEkwU0dERjV1TUZJT1l6eVJNUmdTWUlwZENLU2VHeUlRWFRmZW9SVmNxSDVIR3dqZEhGeU9ZbXlhcUhmY29sMWRESHlTQUpFT1kwU2VKeFJoTEpIeURGOVhuVU9ZRUYxS1h3MWxYU2NLRGx1ZVgzV1BYS0lCSVI0OFh5UmlERjlqQWxNWVhKOGdvUlNXRUdJeERHTndCek9PWXpTeVdIUmpZUXRhRjBIZ0lsYjlwd2N6SkhaYm5sandER09WSUZnT1pTVnVBeFJqSklMa0YwSGdJbGI5cHhBZkhIWmNJSXVsREdPZUx3SUJDUUl1b1NFdEN2eWhESGYxQUY1WVhKZzFISFNXRWw1Q0lUTitYSjVPRkhwaEcxRXRDdnloREYwd0lGOGhBUjlZS0ZSdVZGU2lZd09PWmw5T0FteUZuME1SQUlEYU1scUFubXVSWXlWMm5SQWNudmJtV3dMZEh6T09IM1dLVzBXZkpHNG1FUmNaRFNIZUV3RUVEUkxiRjBWdURHcDVIenBsRVA5dEwwRXpaUEl2cmFidVZGUnVWdlJ1VkZSY1ZGUnVWSkR1VkZSdkNtZzFMMjExRlF5RUVINVRCRmtoSEhSZ1lHeVJHd2orQVMxV1kyNC9ueUVTRHlTT0lUT1haM051STFjdVp2VjVCU1JjRmxiY1lTWjhwelppVkdPdEp3dUFaUkg3WDFWdUNRamdWbTFIREh4ekNVV3hYMGp1Q1FqZ1ZsUjhDMnAyVno5a01QZjdKeGNZRzBSZm8wOGhZd09CRUZWdUZTWndDME10S21FV1ptV2Zwd0R3S1JPZ0xSRXlYeVZ2RHY0bXFHZnZFRjgybnhFSkN4QXZBS0lyWUlwM0hsMDVEenB6cUY4bUVUTDBCUUFRbkdrdG9GNGpCUDBhREtJREwwNHlaUDFPWWFSL013OGdEMnlkS0ZnT0gzSHVESnBhR0laMkRRY0tLMUlOQ1E1aU12UnVWRlYvV1Faa1d2ZnVWRmJnV0ZMZ0FSV3VWYU56TFNEdVZGUnZZbFI4Q1BidnJhYnVJMXBtVmxBRUcyeGNBeDVOWEpFVFdVTnVZdlJnREdBc1ZITTFBUlJ1THdnUW9GVmdBU3VHVkh1cER5dHZYbVJjcHZTVHFHMVJWeTgzTTNadkJIU1pYUFJlSnZwMFZGU1NCeVp1cGxNUUN2TGxDR05lWnhEK1htWnVWRmJhVmxSZEZtYnpWRmduWFA0dVdIUmhGenB6SnhEOFZ5RUdHdk1TSTNJWkVQUmJIR1dHVkZSdVZhSHVMR0x2RVJFWURhV05ESVdPbjJJTnBKTW5adlp6WWFBd0RJQTFJUTB2RUhNdkZ2UnVXRkVVVkZSdVZ3NHhabVJ6WDJwenFVVmlFUDlycFBjYVd5eXRYRkVjTW10Z0VJdXRWSGZ1WUY5QUZsUnVXRkVaVkZSdVYxUnhXUU9CcUhTRkRLRUpFeForb0pSdVZGSGFEM2J1Q3ZaNUhQdGFWdzAzTWxwYm9sRVNYMnlwQXZad28xOXdEMGtrTVFaekZSRXlaeE96cUpabXJhYnVWSnlFWEZSdUkwSGFWRnRnSzJEdVlHamNKdlJ1V1I4a0ZHTjlvM0VWbklrSHAwTDVWMnVFSGwwMEF4RVZuSkg5WlJ1Y01JZnVERjAwcFQ5VkJJU1NHMFphV3pXd0ZUYmVXVE9PWUh5a3BSeGpIUHBhSVJJUW4yTVdaU3hnWElFU0JTdGhJVE9YSmw5UUR4Y0tISFJnTVNPekV6OXdJeTg4cHpBdlp3Z25HR1NBREYxdVdJUjhwelppVkZSOENQMHdWR2ovQWxNT1lUOUNZd09TQ3lNdEIxY1hBeVI2WjI1Tld4TVNFUmNRWjFrQll2QVJGYUFxWVJIZXBtV1BFRjFuSFExUk13TnVXUnR4Q1VSMUVKVmdubUlSTXZIaEV4TjdJUnB1WXdPR0NsMU5wSnB5WkpwYUJsamVFek5jQjBTVll6eVdDeFNISXlIYkRIRGhZRkVPSUdXMUFITGRYVHgwREpSYUdsSHVWRldVR1RwYVp4MGNFSlN0TWxnYVdtZ3NBeERoSHl0aEV5TjJubDFSTUZjVUVUUjRMbVYvTWxNMHBLT1REbTlJV1RwYUJKOC9CU1dVWDFiOW4xdGhXSFNIQjJiYkV2YmNGMXB2WFVIa01ISUxFVEVWVkZJT1pKOGNWM0FMQnhJblgyOUxWRjBqWFNmdVZGSHhKRlJ1VkZBRVZ2Y1hKUEFTSnl4NEtGUmdZbVdQVkZSYkt5V1FaYUF1TFBSdVdGRVlWRlJ1Vnc0eUYwdVhZMnBhcEl4ZEV4QUdxSmdURVFJSFgwRVhYbFo2VkZSdVZ3OGJLSXVDQkZSdVh3WmFXSGdFS1FId0hJdTFZRkxnWmxIN1hQcGVJRzh4Wm1iK1owSW9LYUVhVkZnRVZGOTZydlJ1VkhIZ1ZGUnVEdmp1VkZBTk1QUnVXRnR4VkdqOFgwUnVadnFOTVBSaENKeWJWSkR2R21mdkZ4cWFGdlNRSEtPWlZITDJDSFp1TVVEY3FQU3hubHFQVnk4M0pGMHVGU0V0WkZxRUxJTmZWSlY3QzAwdVl3RWNKRlMxSXZ5eFZKdXFLdjB2RnhxZEZsVmVCd3h1VnZiM1hTWmFISlNHSEZBckwxOXZWeXAzQjA0dnB5V1NBbFNXSkZ5Z1ZHVmFKUnB2RnhxZEVGV3VNMEVzVm11Z0dKeHdXSVp1R0ZEdkcwV0ZXU3hqSnlMeUJ6TW1DRlpiQXpOYlYwcDdaMjR1WFFNem9JQWdadzVUVjE1Z1ZsandYM0hnRkZBdktteVdXUk9TWnZJSEhGa3hCUFdYQ2xjUlZHVmFLeHh2TUliNXFQUmdER0QyV0cxT0dUNHpWYVp6cVBJcEkya2xWSnV6SlJaeEoyTmZHdklrRlFBU1ZIeURCVVp6QTJaK0tsTUtGVExoVkdWYW53SHpWYVp3Q3ZTd29LT0hXeXlZTHpSdUVhSWFudkRiRDNOZFdtY3pBdlJ1STJONkZsV3lKeFY2V3ZXbVYwOHhKemtrbnZxRFdKTDRWRzV2TEY4eXBIdG1FRlNVSzJTS0dUeXVBdkh6cFVBcm52cWdwUTFLVkZnbm5teHZZbGt2cGxSZ1h6cDNXMVN1blN0YUFTOWlIRlI4RUdSL1ZGZ25YUDR1V0hTdUoycGFJejVSRFNxRVdGV1BuYUVMTEhJblZ6eUtWRjBpcVN0dVZGSHhKbFJ1VkZBRVZ4RWtLemtORW1WdVkwV2ZZeExnRVRMall3OHdEeXVucDBXZkExVmNFeUVrTTBwdUFLSGRKSExiV3piZldHTmdERjV0Wm0wZFZ4TjdDM0gyQTFJcldJTmhDU09hcFBSdVczTnpMUVNabnlxVElGSWdGUFIxcUZjS0R6ajNGVVNUSVVTYUVsUmFxUkQrSVFEY0gxYnZvMjVLV20xckwwRWhMUUFRTFVSOXBRcVlBMExiV3pmOFZ4T3dNbXFTb3lJb0x4V0VLUFJpTWxNZEkxNVNveUl1b0hONnBtcWlEemZ3TVBSNElTQUVIeHRtRTFFd1oxZ1dHUk5kSTFSakNsNGpaMUVLRVA4dW9HU1REMk1CQkZWNUJSSHluSk1RQjJFVEpSeGhuUFJ4RlJxaEQwNUNCUUhqTUpTc0tSTjdEeVdnRFFBUEJ2SUpNSGp4SnhTQVlQeWxEUWtmRGFEZUVVRUpYSE44cUc4ZG4yOVlNbHh1WUhjUkVGUnVYRlo3SHp5Zm5GRHVWRlJ1REhweVZtTmhEekFrV3ZXc29QSUhudjlhWHo1MEVQNGhMdjluVm1xWkx2Z1JLVU53RDJ0a0Z6dVJEeDV6QTF5bUEwYjRWRlJ1VkhiYUhIODJJUFJ1V1FSZkV6T3NZUVdSTW1PaENSQWJKM1owTWxxQW94QU9JUkRnTTBOOENhVm1WeTljVzJ5UlpQcXNFRlJ1VkZWK1l3TmFDeGNhV2FJT0MwTVRXS0FNVkZSdVZ2THZYSk55V1ExakgzU3NEVU9tWkpNVkNJNDNMeE9sRlFBaER6ajNHR3h2RDNFa0swU3NGSEhsRXhIbEN4V1BvUDVVQlBXU0tROWpESTlXRUdXVEVHUzFCUldmWXhMeVZLV2xDUEVhV3pneld4TURBbDVTRElBMVdUQVJZeVd4WlJONnBtTmRWek9oRjJnT0lRTmJZUTFqRmFTdEUwTmZGbXFPWFR0eFlIV2VBS052RFVTWUR2MHZFUjF1TDBFa0pHdDNGUWtaSXoxUk1sa0VYSEV5VkdBZkVJamhBMmZ1QlFxbnBSTjdwUVJ2RVJiZHFHTnVWRlJ2V3ZXdFl5SUpESUF2R3lTVEVHZ0RFRzFqRmxXeURRa2ZaMmNURUY1em52UnVXRkVZVkZSdVZ3NHlGMHVYWTJwYXBLUjhFeEQxQ2xFT0lSRGdvMEV6QklBQlZGUnVWdzhsQ21BcklsUnVaMEhmWFBwZUxIWnVJMlJsQ2xWNURJUmRXekFjQ0c4d0hLRGxaUFNLTFE4YVZJcXRDbHB1cHdqZFl2TGdabGY5Vnd5T0hGeGVwUE15TVBxU0lRa0pYUzFoSzB0dVZGUndIRld0b3pBaUVKQXRMUVY5cFNBSkl4RGlFSTR1REd4bEFJMTZydlJ1VkZSd1ZGUnVWRkh1VkZSdU1QUnVWRlYvWFMxTEdteU9ZRkhjSnhMNVdLWjNGVHlGb0k5UVdsOWJMSUV0SFFJakRGa2lHbDRoWlFqM01KNGZHeE1hQjJINUwxV1JXbWJ5RFNBaFp5QUlEemozSWwxT0ExMWRuMHR3WkhMYlgwNDVwMlNRR0hPSHBIU1lKSEhmRFFqZ1pUMVJZdjRtV3hXMUMyeXNFUldCQ0c5VFhSZ1ZaUkV5VkdBMER6a05vUUF0Wm0wYXBJTXlXSEkwSklrTW9QNUdCUWcwSFE5Z1cyTmFGUUw5STFXb0ltTDNGUGdOQkl1dkVUOU9CVFNUSkZ1WEJSTGRYVHhoRFNxd0ZtajhZR2owcDBTSVlTNUtXUWI0RlJBT0JQMGFxSERpQ1REYkR6QWpudklKTUo5ZEpQZ1JGek9lRHpqMVd2RGpBd2Y0RXhMYkJHTGNEU0x6cFVIZUVTeVJYSE44Q205akQwSUZDbDlKTUhqd25tOWhKeXgvRXZia3B3SU5welo1b0hTRkZGZzBCd1I0VkhjVkF4T1BDeEFBRFQwZkRJRVJHUE1QTDNSYVgxZ0tBd0VsRDBJRkNsOUpNSGp3bm05aEp5am1EMDFOb0ZrT0lSRGpXUnR1cUZXQ0lta05Bdnh1VkZSdkN3RWlMeVNzTWxNMG9sU05DUlptWEhXZVkxdWlNbE1uV0o4dlh4U3haUklMTFBTWVZGMGlHSGZ1VkZIeEdQUnVWRkFFV0ZSZnFLRU9BbHFDb1JBYldIWndESVN6V21MdVlHdDREbFJ1VkZSd1Z3eUtKbWZ1VkZSdld2RW5NejB4RDJ4OE16a1RFUUluWnhPekp5UmpyYWJ1Vkp5RVhGUnZCVHhnVkZ0Z0syRHVZR3VwSFBSdVdIV1ZEbE1icUhrT1lGRG1EeDQ4WDBwaEV3eDJNMmNZWEo5WUx4QVBZMFZnRXd5T1pRMVZuSVdnTHhaYUZ3V0NJVE9EQUtPT1lUOUNZeFJnRlJnWEYwSGdEdkFPWUZTREZ5RVNZMVZoSVRPV0cxMVlYS09QV0hMNUF6cWVGbHlpRjJXUUR2OVBNSEw1REdOOUZUeUZvSldRVzBibEgxRXRIUUlqREZraUdsNVRCR01hbjBmY28wZ3ZEMFdHSmx1Vm5KRWFLUHh4Vng5SURGMWdKSkVWbkpFYUp2eHhWbHF6RlR5eE0yWmNXUFphTTBMNU1RT21GVHloTEZTWVh2MUJYMHVkQVN5MEV3eU9aUTFWbklXZ0x4WmFGd1dKSVRPREFLT09ZVDlDWXh1ZEFQY2NYRkR2WklMY1dQWmFuSHVkWDIwd0ZUeWhMRkVPWXhIZktTWmdDRlIvRXdidUNVT1FXMFIrSXhmY292dDNFd2JkWGFTWVhKZzFISEw1REdOOUZUeUZvSldRVzBibEowdWRZVUgrREY1dVpKa0ZNeHUwWnh1Y28yeDhERjVkQTNPRk14dTBBU0FXWFVFZVZHai9KUVI3SnhiMktRYi9LMkFuVkZSdkUwZ2FXMEVEWFJxcUh6dC9EemtoREYwdVZGUnZER0Q1WVE5cUJHTVVXeklOQjJSd00wRGNweklXWlFMNktIdVFuR2t6b1JNUkFJYmxYMDRrR1BBc29QSHpwMk5tQ0ZMaUsyY2VHMXlPRjFxUkNJMURHSE9qWDBIY0FROVBvSE1LQTBTR0xUTGFEVE1uSEdPNnJ2UnVabDB3VkZTU0JGSHVYSnlkcVBSZ0JUdUdWRlJ4SlFBVm5JV1RLUnhqVnkxbElSSGJKSkFDSVJnQVh3Z25HVHVXVkZSdVZIYnVIMVdxcUhNU1p2eDNZd09PWmx4aW5UZzFKMEhmb1JXelZGUnlXUmZ1VkZSdkN2SVlGUmJpTWxxSHB5eVBvVElQWDBFelcwcUtEdnlib21BaVhIY3VudlJoVjJaaURJRUpCS1NSTUZSbXFSV2ZEVGtPQVJFcHBIcU5CMGp1Rmw5ZFhhV3VFdmJib21TUlkxOXFCUFNPV3hOa1ZGUnVWSk1SRHg1T0F2Z0JaSGp3SzJqeVd6cVVXSEV6QTF5cEpITWpEemtNblJ0YktJdUNCSElLRlA0L1ZGMVlwM1J1VkZBblpIRVlJVEg5RFNxd0dRT1JGSHlQbnhTT24xOWtGUFNrblBnTlowT2RBUXVZSzFrSEV4QVBBbDlNcEhOaG9SRXpaU2I3RVRJakhQMVRDS1NHTEZSdVZGVitZbDB3SkgwM0cxa1pLRnh3cDF0NkVJY1VZU2Z1WUY5MEpQUnVXRkVkVkZSdVZ3NGhGMFdVRjBNSkFTY0dWRnh5QXhjVEszVjNaUnR1cVROakRRZ3FJejlNcHl0eFhQU3BDeHgvVmFaK0NUNDlxSjF4RmxnaW5TRVFZd0UxTFFPUG9QSDhvMEl2SVJWZkRJRU9vbDFzb1BIbU1QZ1FGVGNSRXk1ekVGSVNMeUExb205aEd6ajVNbE0xR0Y5VUtJOUxEMExjSktWakV5TjJuUUlPSDNJQkdsUnVWRlYrQVQ5dkhJOVNLbERqWkZSZ1pJdGxWRlJ5V1RwdVZGUnZDd1YvWjE1S01sTWZFUWtTTDAxaXBGUnVWeHFGRUk4MkNRWnVCUXFIcEhOOFlIeGxNbE1mWW1PTnB6T1dNdlJ1V0ZFb1ZGUnVWdzRjVjNBTEJ4SXJEelJlVkYwa0V2anVWRkh4RmxSdVZGVitXR05nREY1U0pUeGFHUFI0QTJiekRJRUpCS1NSTUZSbXFSV2ZEVGswVkZSdVZ3OGhGMFdVRmxSdVoxcGxXVHlqb3c4dkJIVitDbEVjcFQ0L1Z3eVBDdzh3SEl4bFpsRWNwUmJtV3YwbG93cHhudkVKQXZXSER2WjZWMVNwcDAwdVZGUnZXdkR4WkdJMUV2dDVBdnlOSXZweEdLYzZWRlJ1VkZadVZGUnVXRlJ1VkZTeFZGUnVWdzg2S0hrV3BITDVXU2dhRGxNbFd4NVlYS09QV1J1Y0tRa2VFejl3SXdBVEJIYjJDMHVjSHoxckRscHlvMHVITFNOMXBSUmZvMDhoREYwZ25JRVZuSXhjTHhSZ0FVT2lFd3luTTJ1WVhKZzFISEw1RndML0ZUeUZvSTVRV2xJaUYxRXRIUUlqREZraUdsNGhaU3FXblBmNVp4V09LMmIxWkgxT0YxeU9BeExiRjB0akVUSHVaM0VQb1JPZnBsZ1JFMXhhWDBBSEhQdVNMejhpQndqZnAwcWFWRlJ5Q1RMNlpHdHVGeHQyQzFmbEQydGhBbEFQb1A1bnFSSXZISXhjRDA1Q0JGTGVFUFpicVJBYll3TDBZd09kb1VSdVZGUnZDd3RmcHlNY0VJOGdBd1Z1WUdPbXFQUnVXRkh6VkZSdVZ3NDBvMldFSzBJTUtTcUhWR1p4V1E4NEwxQWJuMElyWlNIY1ZGMGlHSGZ1VkZIeEZsUnVWRlYrV0hnVkZ2OWFXbWZmWEhSM1cwRHdEU3Q0VnladVlHdUpHRlJ1VkZSd1dUeWpJd3B6WUdXaEFsRWNwU0wzRUpSNEpITHVYeUV2SEhFWURhVmpFdnQ1QXZ5Tkl2cHhHS2M2VkZSdVZGWnVWRlJ1V0ZSdVZGU3hWRlJ1Vnc4MEJGai9LSEw1V1NnYURsTWxXeDVZWEtPUFdSdWNLUWtlRXo5bkhRV09ZRkV3SDB1Y0pGeXZERjBlbno1VEJIdW9NeGZjbjNJRUV3eUdDUlNWbklXZ0t4WmFXSjlYSVRPREFLT09ZVDlDWXY0akd4WjRFSWdiV0p0dVlIZmVKRlJ1Vm04dkQydGhBbEFQb1A1bnFSSW5NdjRlRUZmZG5sa25WbFNtblN5a0RSeGtFSk90QjBSdVlHU0laRlJ1V0ZIbFZGUnVWdzRsQ21BckkwSU1LU3FIVkYwa0FQTHVWRkh5V2xSdVZGVitDeVI5TEZ1U0pUTnVGbFJnWTAxWVZGUnlXUmp1VkZSd0hGRHZGSnFzQzFjYUFsMVRLenB2WFBSdVdGcVdydlNMb2x4NFZHMUdxR3B1RlIxWUZQUnVXUVJoRWxId1pQQVRFU09CWTBPekp5UmpyYWJ1VjBxSkJQUndZUkQxVkZ0Z0syRHVZR2NnQnZSdVdSOGtERmtqRUhxV1pQU2RKeFJnWUlTWEVQRHdYMkh1Q1JObUVSdWNIejF1RGxxUEFUY1daUUVFcElFU016eVZJVE9ZSEhJVm52V1pJMEw1b3g1VUZUeUZvSlNRVzBSZkdJRXRIUUlqREZraUdsNVRCdmNQcUhSZ0NUV0FGVGJ1cDJOY1dQWnhNSUVTTXZSbUlUT1hKbDlPWUpIaHFSeGpFbFJ5RXZjQU1RRUhFdkExRTBaYUJRdUhERjFocEdWdUNROUxaR2duR0dTWURGMW1aSUFXWlNOYVcwUmhXbXFIRkdPTVlGdU9Zd045SUh4akx3WmNERjQ1RDFNV1pUZjVYeFJoRHh5S0ZHTzBDbGdPWXhnQ0pSeGtYUkhmREY1SElJeVdaR09LcUh1ZFZLQXNYRkR4WUZnT1l6YjNvSUVTTXZSbURGNTBKUWtGTXh1MFowdWRWS0F0WEZEeFlGZ09ZbHFRcHlXekZVRDJGVGNWWnhTT1lteURWSVd6RlVENEZUY25DeEFPWTBncFdJV3pGVUQ2RlRjZkZ4SU9ZMTh1SFJ4a0J3eGJJUkx3cUhxUVdtdDRJUnVkcUpXQlZHa05GMGNRWFBBUW9IUmlNdkx1REdOeEpRQVdaSEFLWDB1ZVhKSUxER05oRUhNWVhLT1BaeFJqQXdSakMwOXNYSTlIRXlSK0dSWmFCUXVIRlRmbG95TnVDUTlMSEhSakUwYmdER09NSXdTT1pUZ3ZBSFJrWFQ0NURHUjdXRzFPWkgwa0RIUmtLbTFTREdTa0ZIeU9adjVJR0hSbER5OWJGR1NIcFJxVm52U21LbHh4V1AwZURHV0dMUWdPWUhJYkd5V3pGVUVLSDB1TEVJV1RCeU1oRFJSbG9tV1FBenlyR0lxV1pKcUtZMHVkVktBc1hGRHdXVElPWUhJYkd4dWRXUHlXREYxR0tsNVZuMGdscEg0OEV5eVFGVGdKSDBXVFpKRUdCUklZRTFPcURGMW1aSUFXWnZIekMxRVNNenlLREdaeENKV1dadjRmREhSbVlQeUJIek1WcVNrVm4yeGVHeFJtQ3dJRkRGNGFBMUVGTXh1MEF4dWVLdmJ2WEZEeFlGZ09ZbXlEWVJSaEJIQUpIek1WcVF1Vm4xNGRXUHh4V1AwZURGOVlLUDVPWXhnQ0pTV3pGVUQ2RlRnclh2TGNXUERnWDBSbEtLRWRaeWNHQW1rQ0JGcC9LMHVjTUlmZ0lSTCtDMU9ITFJnd0ZSeGxBdzlKRlRnaldhSVRCSjVCR1J1Y0h6MXVEbHFPcUZBSExTTjFwUlJmbzA4aFl3TXJHUnh1Q1FqZFZ2NGpCUDBnQXhOdUp6U1RXSGZpR0dMbVdVSXdLMmIxWkgxT0YxeU9BeExiRjB0akVUSHVaM0VQb1JPZnBsZ1JFMXhhWDBBSEhQdVNKek1MQkhIeFlJT3JFdnVZRlFPUk1GUm1xUldmRFRqbUFSNG1wRnVQSFJFWUd2Zi9KMVNHRDJ1Z0lScGhBRkFLSkZSdVZGVitYRzg1TEdnU0p4cGZKbFI1bmFPZ1ZGUnZFMGdTSndFMUpGUmdGbFdKVkZSeFd2NVFHSE9nWVJTSERKOHlEM1dTSDNXTkIxRVRMVE5tRDNSNFkwdCtMeDVTS1FwOW9QUmRJU0xlRXpOY0FHTVRYUmdPRXZSdVZGVitaUkg3WFNTU0tTV0NvbFJnWlRxalZGUnlZSWJ1VkZSd00xRDVKRzlMQndSNFZIY1ZBdzgycDBBQURUMGZESUVSRmwxY01URDNCSEl0Q1BaOVZHdDNFS1JqTFNMa0h2RDNGeU1vRXhEZklQcGVDeHFNcFR5eE1RcDVDUUluRFR1UUdIUmFYdmdORjNPYkRRZ3FKVUhoWkYxVEcxRDRLR09wTFFaOVh2V05CbTkxRlBnU0tRY21WRlJ1REpBRlZ3RU1CUjh1V1Vaa0tJT3NDUFdIWUYwakIwTUpWeDVFVkZWaUFUTUVYUE1pQXlTVU14RG1ESGdLWHlMZUVJamtwUFJ1VkhTa0lRdXBHMGN0Wm0wd24wRVdNUnVQWDBJcFpLTnVWRlNPcElENEtSa1dBdlowRlFBTkIxVmZGdmdTS1FTalZGUnVES1NIQlNrckdtMXJMMEVoTFFBUUV4cGVIUnVjV21xS0ZsdU5WRlJ5V1NOdVZGUnZDdldISDA0ekZRSGtJR0FRR0hPZ1lSU0hFUDFhRHoxVFlGeU9JU0VEQ3hMY0hVV1BZSXFEV0tJVVdIcXFCUldmb3lNUUVUSDZYMk9UWEdINVdIV2VXd3V1RFVTekdUa05wSFdyQVBnT0F2MXREUWNCcVRXVkFseDZYeEFhblFPakRUYnZLSnFOcEpNWnB4cWpXRkQ3WDBTRW5LU1RFUHl4SzBEaEh6UnlEVU9qRmw0NEhGOU9HRjQ5WEpmZUV6T0pER0lSV21XaHFISXZvbXRpQklOeUpSTVRLbHlvRVF5Y25sVjdGUUxnWFBxUldtWjRXbDlFV1N4bERRQU9ISk1Qb0ZmYVl4TGJvMk9PWW1PV0pLU1FHSVYvb1J0MkxhT2ZGUEFGbm01TkIxZmxKUlNHcUZ0dkRRZ1dXeU9UTFM4N0JSSXZJU3FOWDBIYm53cDdNbFJmWFJTSVkxQUZCU0R6SVRnUG9UNVlDeFNZSko4YVgwT2FWSTFTWDJjQkNSV2VYR1o0WDBWOEIyNVVXSHFxQlJXZm95TVFFVEg2WDJnT0htOGRvSEVaWElncEV5OWVKR0Q3RktBWUlSRXpZMTlzQkdNVUUySVBvVDFBS3dmaEFTU0hFSkVQWHYxTkJteUlvSEx1WDB5a0RRZ0hFS1I0SVNBcUl4RGFaeldlRVJiZERhQVRMUmtoREZnUFhLSWZEd0QxTEtFU0x3T0REd2tVb1IxYkVSV0FLM1NQQVFJb29SdDlCejhqRVRMZ0tRQVRYR0g1V0hXZVd3dWxESGdMRlM5TkIxMUZNUk1NRUpFa1ZGdDZHMHVOQjExTHFGZ0JaSDBhSVFINFhTY1BMMjl0R3pPWk0zT0dFUmNvQTNXdFpIOTFIRjhqRko4M0VKV3pBd1plSHpqdkpJa3VKd0lWSjNBUElseVNYM1ovWVJNU0dGWmhYME5qRzFFUG9RcUxYME1TWkpMbUR6a05vUUFSTUdiZU1STXRJeFIxRVFOeG5Ra09NYUExbzBMY3FGTGJGUUwrcEZBUk13T0taSFYwcUhaeEVSYmJYU2NSTXZwL1h4TVNFUHhkWDBXQkZsSVFuUDV1WFJSM0t2TWlBbFJscDB5UE1HU1BZUUkwWUZ4a0JUY0VYeFI1TUdxUktITjdGME8wRXZ1aVd6RHdWdlIvSEhFV29IOGhXemd3TUlTT0gzRWpuUDhqRkg0eURHdXdDM0FUWFQ4ek1QWitGbGtLRVRIdUJLUmhadjFzcEZSdVZGVitXeHVSTUdXZW9TSWhMbFI1bnlJeFZGUmNBekh1VkZSd0xQWjJBVE5ibjIwaEEydHVCSmN4bkZSdVdGRXBWRlJ1VjJOeEd4amlZVGdnSHg5ZlZGMGxGUnh1VkZ4Mm92UnVWRkF0V0pNd0htT2VvdlNhcFBSNW5scWtWRlJjQWFWdVZGUndMUHBkV3ZWMG4yNVRYYUR1WUhrWlhsUnVYSDFwSFJJZ0NKRU5CMUVVVkZnUEVUOXhEemtoWlBNU0x5U0xuUk44WlE1bkxRQVRZVEl0R1R0M255YndKU2tjWG0xWXBhU1RFUGtIV2xmK0dKamVIUWYwTTBOeEZRdUhGeFdERVJnWFgwSXBWemZ1VkZWZ25QZ0JXMTV3RDBraUcwa1ZabGdTS1JJc0ZSdDFWR3llWjNIdVZGRGtaUUwrQndxQUVSY3RwbVNPSDNJeldGOUFZMDltQkpnT0VJZ1JNRnExQUZXSEgwNHpYMVNOcFF4ZUVJajlxUFJ1VnZraFkwMGhDdlNIQlMwaktUTm1DRmJ2RFFmL3FIdGVFd0V0RXhON0R5WnVEMnQzSTI5Ull5V2FXeEV5WHo5T0V4SWJvSUx6Qkd0ZEpQUnVYUzVHRHprT1dQUnVWRlJ2Q3cwNVd3MHhFSTh4WlFSdVlHU0xadlJ1V0ZFMFZGUnVWdzRnWmxmd0UwSXFueFp6VkYwa0FscHVWRkh4TWxSdVZGQUVWeTg3TEoxU1lGcXNCMFNHcUZTbERHcXVGVUVSRkh5UG93MWtZUjl1RVJ5eFh6V1JNRlNqWVJTR3FJTVJWek95V1R1UEFTcUFZeElzQXdqbVZGMGlFUnR1VkZIeUZQUnVWRlYrQUlTUUwyU1NLd3lvWHZSZ1pIWmVWRlJ5V1RmdVZGUnZXdldzblRxakRRZ1BXUjFQQXhSZFcwTGFCUzF2RHdJUllJOHdXdjVkTUhFV01SdXZWeTUxWkpNTkIxRGpHMHR1cVRMNURsV3RKdmdUWFNrTUswWm1YbWpsQzF4dUgySU5FbVNjcHhXZldHOXVXVUlZSEtFUEhGSVNNMEVXRkhXaEV2cDRNemNVS0lmN1dSQWNWdmpsVkZSdVZ2THdXdjVtTUhFeEh4UjRWSHV0RFBidVZGUnZDdkVjTW10Z0VJdXRWSGZ1WUY5QUZsUnVXRkVaVkZSdVYxUnhWeHlhS205bkt2VnVESUVCTUdSdVZGSGNCS2J1SlJjekJQU0xvbHg2VkdrdEVHcHVDVE9ZRWxSOExSSDNWR2t0RlFOdUNGOXFabFI5WTEwbVZHMGlLR1p2Q0ZmeEdLV0tFR2pjcHdqZEF2eWtxSkRqWEtTbkZGYmNwRzhoV1B5a1dQMWRWbEQwb0djQlZHMXpZUXB1Q3ZBT0JQUjhHd3hhVkdrQkJGcHVDUjQ1V2xSOEd3eGFWR2tCQkZwdUNSNDVXbFI4R3d4YVZHa0JCRnB1Q1I0NVcyMGpBUTFTVkcxellSOHVDVVdFWUZSOVkxMDNWR2tCQkdadUNGTUVZUFNMRElwZlZLQXBLRmp2QnZXd1lQV0lDSnhmVmFPTG9sNWxwbDlsREZSOHB5V1RGUjQwV1JxTk15Y0VaVWM2VkZSZFdsVnVWRmJhVnZSYllJOXhWRjA0QlJadVZGRUNaR2duRndNWEJ2OWZBeFp1VkZSdnFGU1ZHVEQwVkZSeVdSZnVWRlJ2Q3ZIallIUmhFSXVjVzBqdUJRcXFEUkFhblFPY0RHcDNKMk51VkZSdkN3Zi9ZSWdtRUpFb28yTHVXSE9tV3ZXUlp6RWlEVVJmR3c1NnJ2UnVWRkR2VkZSdVlGSHVWRkFOTVBSdVdGcUdWRlJ1VnhOdVp2cU5DbFJmQjFXQVZ2dUpFbGZ1STJONlpsUmNuSmdWVkpOdW4yZnVWRlJ1THhFWEkyTzFEUWNvQ1MxUlhTY2xYUk1zbjJqekVSSDRvSjVUWFJnVlpSRXlWR0EwRHprTm9RQVVXSHFsWUZmK0EyNVZEMDFOb0ZrT0lSRXpLRlJ1VkZWK0ZUeUNZSHVTSlROdUZsUmdZMDFZVkZSeVdSanVWRlJ3SEZINm52RXJEUWtWRGw0L0p4Z3JwMEFkRWxnUFZGUnlXMFM2VkpBY0x6YnVWRkEwRkZTaG9KYndEUWpnVkprVEhRTWtaUk42TEdjaUVSZ0dCUnB1VkZaL1hSTDhGeGZ1RFFnQm9USXRHVGZjSHh0d0ZJNVVFbElSTUdTUXB3amlLdmdRb2xMY0V4QXpBdnVQTDI5cUpSSGVuSWJ6QW0wekR5ZmVEUDlhcEZnUlYwcDBESVoyV1VOZUVQWmJxUkFiWXdMYVl3T1RJUDB1VkZSdW8wSU1ZbXlDVkZJT3AyMHdEeXVCb3hTRktJWnZFSWY2S1RadUJRcXVXUldFRFNjZ0RHdGZwVDlTS0l0M1dQUmdZbGtOVkZSeVdSUnVWRlJ2Q3ZEbVpGTGVFSTA5V0ZSdUJRcUhueEVZVzJOL0NLT29GemY0SHhxVG9HeGtCMUVuVm04MUJSNU9HbWI4STBJcW54WnpWRjBpREhwdVZGSHhHRlJ1VkZWK1hQcHZDR3FTS0ZjZ3FQUmdaUTF2VkZSeVdUcHVWRlJ2Q3dwalZHZ3pDS1IrRkkxVFhLRXdXeFNGRHZnbkVSeXhIS09TTDA5eUhGUnVXRklSVkZSdVZ3NCtvU3VkWEhJdURJOVVWRjBtRVREdVZGSHluUFJ1VkZBRVZsQWlCU01PSHlEZW5HcVlDUkVhTWxwY0VteVBvUXR3cHZMNENsQWlEemozSlBrVlZKV0JZMEFjVkpwYUR3THZFeTB1VkZIeEZsUnVWRlYrV0dOZ0RGNVNKVHhhR1BSNEExMU5FUDlLcGwxUW5RSXhadlJ1VkZWL0FUOXZISTh3SEl4bFpsQUVKR1ZtV3YwbVdHZndISlY0QVBEbUJ3dG1WMVY2SXdqdnBVRVhBbEQwSm0xYldUeWpLUTR4bktPcEhQRWNwU2tPV1R5aktROHhuS09xQmxJWUhKNCtXekFjQW0wd0hJY3BCUk9lS20xQ0RHV2hWdjFPb3dBY1ltWnpIUXRhWlRMdVkzU09HSVd5WVFTVld6TGNaRmtycFJBTm9SeTBad1NVcEdSYlowU1RwdlpsTUh1WEpITjFJeHlGREp5QUl2YmtaSk9XVndTYkF0PT3aBXBsYWlu2gApAXInAAAAKRZaCWN5X2xvYWRlcnICAAAAcgMAAADaCUV4Y2VwdGlvbnIMAAAAcgUAAAByEwAAAHI0AAAAcgoAAAByEAAAAHISAAAAchYAAADaA3N0cnIhAAAAchwAAAByJgAAAFoHUEFZTE9BRFoETU9ERVoIU0FMVF9IRVhaB0tFWV9FTlbaBGNvZGXaBGV4ZWNyCAAAAHIIAAAAcggAAAByCQAAANoIPG1vZHVsZT4DAAAAcyIAAAACARQBDAEmAggDCAMIAwgDEgMSBxgMDggEAQQBBAEEAhIB"""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
