#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYcA1AABuS1dQV3ljNnJhYnVWbForQVBSYU0wMXVWRjA3TFNWdVZGSDlLSFJmcFAxTkQxMVdJbTFPWVVOZ0RSQXFIeTAvREZrallIT1FLSWd3REhSZnBQMU5EMTF4bkhBT1lVTmdESEFxb3lBTUNLTjBwUGtPRlRFcE1RMWpESDlRREh1eEtURVlYSjhnS0hSZnBQMU5EMTVUQlI5T1lVTmdEUkFyR201RURGa2pZSE9RS3l1UkgwUmZwUDFORDE1dUZ5SU9ZVU5nRHhBcm5tRWVDS1JrSEdIOHB6RGZNbFY1Q1BTUkZRT3ZIUVp1Q1FqZ1YwU1dBRldOREYxT0hsanVDUTlvQjFFVEx5cDdJVE9VWTI5T0ZHSHZEUlJnSDE4aFZHai9KbWdIRXpXS0NJRXRFbDlpREh4MVZ4T09ZSkllWlBSOEMxZjdJUk12SW05SExScGlvMFNXQUZXTkRGNHdWd1Z1Q1E5b0IxRVRMeXFPSVRPVVkyOU9GR0h2RFJSaEFGNDBWR2ovSm1nSEV6V0tEMUV0RWw5aURIeDFWeE9PWXhwNkF2UjhDbXB6RVE4N0Yya09ZeDFjSUhSaEl6OUtERjVBbklxT1l5OTFKeFJobkZNcERGNWxZUzVPWWxMbExSUmlZbXV2REY4NEN6RU9ZMFNSTXhSaUZ4Y2JERjVzcUpXT1kwY1hueFJoR0p5dkRGOUdIVDFPWXk5MU14UmlESEVnREY1Sm8ycU9ZMWtKcHhSaUZ4Y2tERjl5S1VJT0dRYzBXMFJpb1JXd0ZseWVxSVNPWlBaMVYxV3pGVUQvSDB1U1dIQU9HUWMwQkhmY24zSUVESGo2cVBxT1kya1BMMGZjbjNJRURIajZwR09ZWEpnMUhIUmpDeERlRjBIZlpGdU9aU09EWTBnU1lRUmNESGtLQXdadUNROUxaSFJnV1JnWENKOWxBbWNIRkg5V3FTRXRFbDlpREhqNnBHT1lYSmcxSEhTWm5RYm1ESGZoWHcxT1pUZ3lYMVd6RlVFVUgwdUxJMHQ5cVJMMVowUmpBeExjVkdqL0oxdU9aUU1UWEZSOEMxZ3FER053QUZBRk14dTBGUlNZWXZiOURHUm1xSU9ZWEo4aFlIU1pCYVJoRmx5ZXFJU09HUWNrWlJmY24zSUVESGtiQndBT0ZsNGRDSFJrQmx0aUh6TVZxUmdHRlN1S0ZRMTBKUk9nSVJNdkkwRUhMUnBpbzBSa0dHU09ER1NzQ0hJT0dUNUpxUlJrb3pOdURHVnlHMGdPWndxb0cwUmxGSnFHREdXb3AxcU9aejRkSjBSbVhtTXNER1o5RHpBT1oxU1pwdzEwTEhFQkRHQXZNSGI5cVRjWEhIUm1xVVNaQ0tFbUhTRU9BUVZiR3cxMVcxeVNGbHl2bzFPT1lGQUlZbDQzR3hieFZGUnVWSjhoWlF0Z1gwTXRuUkRpWkpTbEZJYmFBRnVmbzBTSEVRRHhESVdQSGxFT0lSRGdNUlYwSktEekZRSGJDR0VTV1A5ZUFSTGRYVHhmRDJPZ0x3T1NGU09jQXhNU0IyU05FRmdtQlFNUG9RdHVBeE43RjJSekV2eURIRnVPSVNwMUEwSGVwbXQyRHpqNFZHTU5CMGd1V3hXZkJQUjJEUWdZbnpjT0ExMXlZRnRtVktIZlgwRVVLbXFURDBWdVdGZ1NwSFplRFNxVkRtV1RYUmdQQ1BJS0ZQMHhYMEVVS21xVEQwVnVXRmdTWEcxV1d6OXNIRnRlRVJxc0EwTVFEdlJ5WDBJUW92NU9CVFo5WnZMNVhHOHpYMEVVS21xVEQwVnVXRmdTSXcwM0RJSDBvbGtQb1JwbFkwRVlEejhoRDJ1MEFGOVRYSU9sRHZJbExtTHlYMEVVS21xVEQwVnVXRmdTSzBaaUZRRU1XR09TV1A5ZUFSTGRYVHhmRDJPZ24wQVBubUlqV1JPbFlTNXZFSkVOcG1OK0JtdGxwR09mQm1FT1hKRCtXU3hrRTNad3BGWjVZSmp5QVBaNEptT1ZaMXlQb3dSZ0FteVZFUU93RXZmK0IwUjRwd1JsSXcxUFhKRCtXMWJrRTJ5bHBQWjVZSmp6QVBaNExHV1ZaMXlQb3dSZ0FteUFFUU93RXZmK0JtdGxwR1NjQTA5UlhKRCtXU3hrRlFOaXBsWjVZSmp5QVBaNEpQOVZaMXlQb3dPenBHT1pFUDFOVzJFUG9UNW5FU2NjRGx0ZW5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VHBHNWJLeTA4cHpOMFZsZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtyWlJJRVd6V05YSVJ5QlJPakhGTVRKU0VJTFRMaXFTUnlBMmdXSEdSa0NtT0FKU2ZrV0gxMFZHYnlLUkwvV3lXckN6U2FCejQ5Q3pNRm93MCtuVURlSHpna01IMTBWR2J6R1JPUUx2U1pEUkF2VkhmZ1p3Z2RWRmdFVkY5NnJhYnVWRlJkV1BSdVYwT3hWRlJ5VzAwdVZGUnZEUFJsVzBOYVZIMVlHS051WDFiYll2UnlEVUVTRUlxd0RSVnVXSFJ1V2xTd0d2ODJWbHAxV21XVEQyTDhNbFJnWTBTVVZGUnlXUnB1VkZSd3BGRDVJMHVXRXhIa012RVJGSXlmTEZWYkhGNWFadkFnSUlNU3B6ajlERlJ1VkZIL1dSNVpZbGtOTXlTWVkzYzZWRlJtWUZadVZ2TXFYbFJiWUk5eFZGMDZJR051VkZIZERTV3pGVUR2RXd4aG53V09ZRjFjSDFXekZVRHhFd3gzcFFBT1lHOTFJU1d6RlVEekgweGpMME1WbklFekRJRXREUnlwQ3o4eW5UdVRCSGIyQzBSZ0gxOGhWR2tOWjBxVm5Ja2RWbFI4RFBjYkRGa2lHbDRoWlR5SW9sU29XSnVnRzFEMURTMWNNejh3SHlPc1dKdU1Gek43bzBNY016OHdIeU9zV0p1TUZ6TjdvME1jTXo4d0h5T3NXSnVNRnpON28wTWNNejh3SHlPc1dKdU1Gek43bzBNY016OHdIeU9zV0p1TUZ6TjdvME1jTXo4d0h5T3NXSnVNRnpON28wTWNNejh3SHlPc1dKdU1Gek43bzBNY016OHdIeU9zV0p1TUZ6TjdvME1jTXo4d0h5T3NXSnVNRnpON28wTWNNejh3SHlPc1dKdU1Gek43bzBNY016OHdIeU9zV0p1TUZ6TjdvME1jTXo4d0h5T3NXSnVNRnpON28wTHhDMTFPR1BSdVZ2OHhGdzRlWklJR0pRNWlCSUFMQ3hWZEgxdCtJbVNHSlE1UFh5QUxDeHRmSDF0K25HcUdKUTQyV3lBTEN5cXVvdzArcHZNaENHNWxYVDQ5Q2FWYm93MCtwd0VoQ0c1bEJ6NDlDYVZtb3cwK3B3eGVDMEFLWkhXZkEyYjBEUWdpcFVJUUd5dW5DME9tV3o0eEV5MXBJeER1V1JqNUcxSGRZM1dsSHZIZElReUZWMGtDWHlWeEFsRGtIdkFaR2xjRlYxNW9ZU1Z4b0h0M0h2WmJBbE1GV1F1dEsxQUxDd2piSDF0K0ZsMUdKUTQyV3lBTEN5MG1IMXQrS0dBR0pRNVBYeUFMQ3lFdFoxY2pLUElSRmFBcVlSSGVwbVp2RVRMYVdhT05CeDhhcEZEL0ttYmdWRlJjVjBBWExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXp5em9sQUZIUzh5blN5WExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXp5em9sQUZIUzh5blN5WExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXp5em9sQUZIUzh5blN5WExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXZmOEpHa3dIeE5qRndXRkQxT0NadkFBRm1XVU1sTU1EbVZ1RVNMNElSTGNKS1ZqRXhFREp2OU9JU1NFWXhNUkFJRGFNbHBjSFFNT0hsQWNBbFd0SDBnbEVSZ1dDUDg5cFA4NEowSXdBRmd0RFFrMXBtcHdvVGNsWHhJTEIxNVVWRjBpRVJ0dVZGdXJJUk45VkdJb1ZGUnVWdzhiS0l1Q0JGUnVYd3hjVktXY0R2eHVwek44WEZTbEltTGNWS1dCQ1AweG5LT3BCSElNREhJRVZGNHdKdlNURUhFWERtQXBHdjRoWTI4K1kxU1BvUXFkQVJON28zTzFEVVdWWjNTTklJcXZLeE1JWWFBV1ZHeDRJVHhrVjIxeUV2Z1NLdnFEVkZSdlltV0dJMGZ4WFNBS0Z4NWlIMXFZV1B1R0kwZnhYU0FLRnljbUgxcVhvRkVHSTBjYUh6NDlDeXltb3cwK0pKNGVISFMxTWxmNkJHcXBIMXQrTG1JR0pRNDJXeUFMQ3pqNEgxdCtvbXlHSlE0L3FQZjhKSkgwVkZSdVYxY1hCM0lSRXhiOFhUcWtBd1p4cUpaZUh6Z2tMUmN1TXdFZkdhT2xJRkVEQkhXTkwwOVZLR1JjRzB0aW5QRUNFMk9DcUg5VVh2Z2lHMHEwRDBXR3FUMVhHbEQyS1R4aUh2RW9DUUlGVmx0M1d5VnlWSDQ0SHZIZElReUZWMExkR1BmOEpKSDBWRlJ1VjFjWEIzSVVFMGI4WFRxa0F6eW9aekhlSHpna0xSY1RGbGdlRmx0ZkNKMVlYUGo5b0g1anB5SHhIVGNlQXZjQklJcVpWMU41RHhPd0cwcUJEM0FDRXo1cEJTQTBvSGNDV1FNcG5GOUZXU2Y4QUlWd1hRcHpIdkh1R3d1RldGY0hCSVZ3RXZjWkZRWjFJMDBoSlJFcEN4dCtZdzFaWDBBaVdLU1FNMnVTcGw4akZ4RVBGUUlRVndSaUEyeXFHd2tScVVIdUFTeUdGMGZpQTJ5cUtSSVBIRlJoWmxmNEtKWnVWRkVlR0hSbUV2dDlFbFNqRFFiMXFUY0ZaR3FHRlJJZ0VJa3JEeEQ1blA4em93eUJIUWNaQ1JJUkFseVBuMGt4TFJXZVpST2dabEw4RjE4akZ4cVRCbXFFWjF4eFkwMWlFeE5rWDJXV0htcURGUkVvWnhIMFhKVm1EdnA3S1FBUFdtNXpYMEVVRktTUkZteDFwd0VNS0ZBTkRHcDVIbFowTFFBdm5HY2FXdmJ2QTI4bXFHNDZZbGtkbkdrU0VKcGVEVVdmSVJnVUkxVnhKUkxjbjJqM0VUSWNwUEgwS3Z1ZFp4Wm1YbERmWjBwNnFKSVFMbFdabjBJU0h4SVFEemp5S0hwK1Z2YmJGR1JrcVJFTUN2UnVud2dUVzJiYVp4U0hFUDFmREdBUk1GZmxMUWtTR3daem5JMUNBUFI0SVN1Tkl4Z05CRmcxWFQ4aVpGamJBbWJrRlA0bUZHWnpuSmtGWnZ1SUZHOG1ESnlCRm1PelpKMVlaMWtLQnZabExQUi9HUVN3WTJPRFp2NUlabDlPSHo4NllRT1lYeHR3WnZ5T0p4NU5vUDVvSVFXV294a0NaSldsSnZabFl6cVBad1d5WDE0ZFpKV2NGbEFOb1BEZklRV1hXUkhsWlRjMU0yNG1FekFZWlJPRER5cVdaRmNHTUZNVFhUTHhYSEx4Wkk0eVp4SHVDMGpqTXdjeEZ3V1FwUzVPWnpOOEVING1XenlxR2w4bEJGSVFadnhncDBaa0wxZ1ZJUU9YSHY5MVpKQUZFdk1PWmxWZVp4TjFJeHlBWlRNUUt4Wm1ER2o5VnhTY0IxeGRaUmNXV2FXT1p2QXRGME9rWTNSYlpSY2daejhtWG1FTElHU3dXeU1tRFNPWUtUNU5vUElJRm1PWEpJV1ZaME1MS3ZSa0wxZ05XbGp1WUo5YURJRUFwUGtSTXdONVZ3RXVHVGJjWDBJUklITDBKUGNLTUdjVG94T25aek44RUg0bVd6eXFHbDhsQkZJUVp2eGdwMFpsWEY0YUdtT1hIdjkxWlI5aEp4ZmxFR0FIR3dPZUd2NUNaMFZ6S0gwam4wNU5YUVdzTUp5RkRRSXpxRk1OQUlNRFh4U0JaeDBjWmxMMVhGSGpHMmtncEdTVld5MHVESnVncVAxT0dIdGlISFJsRFRIZERKdXhNU1dPQTB5S1pQamFubGovRXhJUkZ4Wm1LUjRoWkhxUEpJY0ZFUmdQb2w1UEF2SVNxUDloQlRwNnBIU0NXVHVURVVINkt3TmlXSDVoRW1jZ0lSeVRYdnVjVzBJdUxUTDdEVVdWWm1nVkJKT25FSEV6Qkd4Y0RIZ0xDMVdTTG1JelhsanVaVVpsWDNIYkxsOGVxUjljS1FibEx3SGFBS1p5RVNXTkIxMUlWd0RkRUpWbFpsRVlvS1ZmVnZEeExIRXpXbVpsRVBxUld6VjBKUHlJQW1WYUh3NVhBR2YzRHp4ZldQOVhweFI0TDFmMVlRVmRabUFSWTJTSER3MWpZbTVGRUpBbkdtSVRYUE1pcGw5SEpJcVhESUg0QlR1Uk0wdGZBeEFhTUtFR1kydXlEM1Y5WFVJREswRWFZR3FUQnY5Y0N6YmpGd0h5RFBnUEd3dWpaeEV4Rm1rVUlsSVBZRmdOWlVBd0QydDJKMWNOSG1jU0ltTmlKSDlTWTJ4ZkRsNGdwSkRkWkd5YkpseXBEMnVvSmFWZURUcHVISEFBcVN1U0F5eVpHU3lSWXlPTklRT1hxUng2WTJ1eW93WmVEdnlxS1JOOFlGcDRadnlOWlJEa0ZQTVJEUU96S21BWlpsTXZWek4rVjJNY0swTGJLSHFERHhrMUMwWmtNVFdlcFExdG9TYjdEMng3QVF0M0JsRXhWSFYxRHc0ZkNLUjhJeGpsRUZSNUdHV3RYd2tWWjBTQkVIZm1GR0FEcHhEaFlLTmZBS0lZRkdEbVhIRUdESFJsTVVFTkJINDBveGdWQ1BiOUd4V1pYME5rRFFNaE0xcDlLSkhnTFFNTlZJU1dBeUFhSTBBUFp4MDdLRzBkQ204NUNLT3dxR2pqRmx1b0RHU3dXVDFRWXdWd01KcU5CeDV5SkhIZ1lIWjZEUWNCTUl5U1lGY29EMEVXSjFFa0R6ajNId055cEY5bUpSU0haek9RRDJxYloyOVRLeWtpb20xakRIY0hFVElkV2FJYVdtV1hCSFdlR0YxMENLT1lYU2NPb3c4dW8wSXhERkgxRElXeENQSVBGdldOQlJ0MEpGNGlEVGdSWnZ0aUlUZ1hIeERpSTJrMEQydDNvbGNUWFJjY0FIT2tKMHQ2RFFFd0VtcU5DUThlVnhJd1dQZjBFdnVYbkdJT293OGFvMFdYVkpWZUV2YmNLd2tUWFJjY0FIU2hDbHFpRHhidlhRNU9BMTR6cDBMYkZ6eDFESjQvVzI5UEZ2VjZDeE1Rbm1jSUV6T0pZUXBpSHpONlcwRVlHUVJsRTFMZEMwTU5JS1JhWEhSNW95cGhZMVdsbnhXT28zU21ZUlNHcUpMeUUxTGRJMFZpSHpPSUJsOUdIMlNPV0l0NUh3NVBZeWo5RzBwNk1Ra05EUWZqSGx4ekJKOXhEUkVZRHo4aER3THlFS0RpSHpPUVd4cW9NMkVIcmFidVZGU3RBdlJ1VklEbFZGUndEVER1VkZIYUdsU0tJbUVQVkY0ME1sVnVGSXUxbnZSaEFURHVWSHlMcHl4dUZJeHdKbFN2QjBBUlZ4QWtKMHR3V0lXbUdQQXBBUU1EV1ExZEd5RHhxUmdhQmxFb25GamNWRmduSHkwdUVhSXNadlZlQndnaVZKV2tNMlZ1TVRmY3FQV1FwdnRhVnZ4M3AySHZLbXRtb0ZXdVpUMGdWSHVGcDE4dVp2cVpYbE0wb200Nldsa3JNVUh1RlNrUEpQWnlIMElrVkhrZFhQVmFwSHFVRmxBTm95SGpWSnVxTTIwdVl3NGFWRlp5SDAxelZGZ25vMlJ1WDFjbEx2UmhDdmJ2VmxJR0dKTHVYMWNpTEZSZUphSXdWRjQrWUZad1dJQUFNdlJlSno5dVZGZ29WMkR1WXcxZnBGWnlIMDF6VkZnbm8yUnVYMWZ6TUZSZUpseXpWRjQrWlBEd1dJQUFNdlJlSno5dVZGZ29ZVHB1WDFmY012UmhDd1dsVkp1cUxGNGVYbGY4S2xSa0xHU3ZWSDFQS3pqdVgxZmxuRlJoQ3dMelZsSUdHSkx1WDFjaUxGUmVKbUlkVkY0K0JGcHdXSUFBTXZSZUp6OXVWRmdvQlRmdVl3NDhYUFp5SDAxelZGZ25vMlJ1WDFmN29QUmVKbHl6VkY0K0NscW5DSHAxWWxJa0ZVRW1WdnVKRzBMdkttcWFGdkFOb3ZjQldQV0NEeVZ4SkdPbkl2SU5NVE1HV3diOUtseHVFbFNDRkZTeHFTYnpWSldrTTJWeXFQV2tCRk1HWEh0MFZ2OHdwVDR1WXc1WVlGTWhFSE5nVkY0K0dKZmhWS0g3bkZSZUowOGVWR1NCcVBSaEpTTURvUFJlSjFIZ1dTOHlZRmppQndxa3BsUmVKMWZpV0hPb0NsNGlwVDRicGxSZUoyUmtWSGtkWFBWakl2TXpYUHFFTEhFWlZsSUhGUVJ1WUhTQ1Z2UitMek9WWkZ5UHBHRHVZSFNGVmxSK0x6T1ZaSEVyV0dIdVl3SVlBRlIrTHpSalZHa1NaSFZ4SjJPTURQUjhFR1J5VkZrdG5TanVZSFNMWnZTV0NHZjhWRlJkV2xadVlIU25xUFJoQVRwdlZJcXRCdnR1WVM5Y29QUmZMUmdnV1NjZm4ydGtuekw2b0ZSZUozQUxWS0lRcHp4dUNSSGtadlJjbkpnVlp4cUdISDVQSElaL0JSTHduM1pnRHpJVFhtZ1RYdnVjVzBJdUxUTDdEVVdWWm1nTkIyOWpBeE0wbjF1TURVUmpFbFdSRjBna0hIQWNDVVp3RVJEZlkzUmtFMnEwQlFPQ0tVTitEMnVvRHpNVEVRSW5ad04yTXZxZ0UwV01JMDVSTXlFcEZSTXRHR2ZqRVJ5b0lVU09IejFlRXhPa0tHY2VFdnVZRTFMOEVGeVRDd1pnb1BjWlkyNWlaMElURDBTYVd4TjdIeXBmRVRMZkNJdDVBUzlvSHY5Q0NHV3lFbElVcUdSNElQTUhuME42cDFJYkVQcGtLMnRqTUtFTkJGZ05aVDFJRUpaMUp2TGVDSGZ1WHdOaUFGNVBYbTV3V3dBT0JUajJFRmYrRTFSalpTVmZDbDBrRlA1UENRdDJXS1dLQW1xell2cDZGeDlwTFFEdUFsMWlCdmdxWUtOa1lHTUlHUTB5SnhBeFkxTnlweHFRR0hPYVcwRVJwbWJiQVBSM3AxTi9JSWdXQXh0N1d3T2NER0FUWFE5T255a2RLR0ltTVRmYUEya0tCUk5tWEdBTkxIUjVaeHV4QW15Q1hHSDhZVGMxRHhPbG9TZnpFeEVlcHZnUkVJRW1JUkwrTVBwOEUxZ3ZJeHhrR3h4ekhRa3dwS0UwWnpMbW5TNU9uMldxTEdxS1p3MVhEMkVLR1NIZkp5a1hwMExibzFSa0FTeXNBemdPSDNaYk1tcWVDekFpRVJBaG56SDlwUDVocUdxR1l6NGlBS0lQTVA1YVdhSHpBMFdmRTBqaXBITjFvUVdSRjBnVllITDlNbU8wRVJiZVdseWtEUEF0WlJFWUYwdGdFdzFhRkdnU1gxV3RYbXQ0bklTZU1scUlaekFSRnpid3BITVJBSWJsRlFEdUpKNU9JUldOTTBWMEpLRHpDS09OQ21FUk1KYnpxRzFqRkhIMUVUSWRXYUhrWjNBVnAwT2taUHViRXcxYVpVT1JGdmZkVjBWMEp4VmFDRzFnWHdwaUcwOVVvMEVXb0cwdkR6a05vUk44WUpPVG8wdDBMR3BsQlI5ZURQV05CMjlMTEhXZldIamREemY3RFFaeW9KU3FCUlNIWnpPUUFtZ3dJSVdPQlBram9tMWtKSTV0RHpmbEJLRU9CSEQvb1JSNEFJdTBEU0ltWXk4aFpSYjVaUk10SXZqM0VSeVdEejVhVzBFTVgwTGNxSU9SRUpWZG9RU09BMTFqcUhPa0R2V3FER1IzSVFMd0RIT29JMFIzS0pIek1sTTBwS09URDBXWEl2anduR0l5WDBIa0x3U1RYeEVERDBSakNsODVFeXF2QW1JVEQyTVlYUlJqQ3lEZ1gwRVVLbHFSTXlFZlpST2xwbTFVQnp4YUtIOVRYUnVYQkhJeEJURDVEd0QxR1RqaU0wWmZvR0lxSEpqZFZGUnlXU1Z1VkZSdkV2SWVNbDVHQzF1blhJTmdDR2JlbndFc1ltdVhJbWp5VjE4dVZGUnZXdkFPQlBxd0VGZ2RBdjFhV2FJREN4U0hGUmZlRHpma0R5V09wUElqWG05bldtY2JESUVPTTJqdVZGRGtBeFNGbzBNdkMxeDBBVDFRbkcxQlkwUjNXekllTWxwYnFGeVRMUHg3WEZFTUNUY3FESVdQV0pNUW5GVnhBeHQyTVFPVUV4RTFCeTRqWWxIMld4TjZCekRnRlBEdUtta1JGSHlUWXhxT1hTUmhESDBoRndXUlhUSGVNeFJtRnlxWkRHcDVIemY5cFNrTUhSRXlFdmJ1RUZnZEd2WnhDeE1FTTBIZm8xYjVEUWovVzJSZFgyT01veFNGRHhSdkVSeWduS1NURVRnQll4V2ZZeEkwRHpqM0YydVJZeVYyb1JOOHFQSVpFeElSRnhabUtSNGhWbDlob21BU0V4QU9NbE1OQjFXS1lSRXpXRjQ1RUZnanFSZmpNSWNtRXhPbEZSamdFeEg1WHlNT0gzSHhMMEhlWHpwaUUwU2JHR0QvSnhnc1ZIU0hJU1ppVnZBUkl6TGhaUWtuSlJNdEl2ajNDMXlDV0pmZUJHV1BERzFrRTFJcURLTnpaUHlOQ1E4YW5tOU1YbHVzRHpqeW8zTnVWRlJ1WGxmNlltNXBWMjFsQW14aUdGOURYbDlBWTFOZVkwMGlIUGZpR0Y5RFhsOUFZMU5lWTAwaUhQZmlHRjlEWGw5QVkxTmVZMDBpSFBmaUdGOURYbDlBWTFOZVkwMGlIUGZpRkdneEh5RDVXUmNBS1Fna01QSUdKUTVxWjFBTEN3THpIMXQrSndXR0pRNC9KSTlGTTNPakV5cXJKSlJ1WHo5bVdTRDVGUUltb3cwK3B2a2hDRzVsWno0OUNhVnpvdzArcHY1aENHNWxaRmdBcVROMUN4V0FGS1p1VkZENloyNDlISDFQWDFXZXBKdUJJSXFaWDFTWkdSdDBIUjlEWUdTREcxTmdaSVNaR1J0MElQdHpCbWtCQndrUVh5Vm1CSFNNWDBXbHFRUnVWRlJ2WEZFWm55Z0VKSmNxWEk4ZUh6Z2tuU1plWEtINUcxV0dNbDVEbnpmMlp4NHhZRlNaWDBXbHFQNHVWRlJ2WEZFWm55Z0NLUU5rQndBRldTZjhBSVZ4SHdMMEh2SHVHd3VGV0ZaMUJTMGdYUTB3WXpNcUhSaitvSnBib3lSZHBQdWRHbFJkcEk5RldTZjhBSVZ4b0h0M0h2QWpNbDVGV0drdEIxVndYUXB6SHZIZElReUZWMEhqWEkwZ1hRMHdYUzFMR214K29KcGJveU9SS3lXRUgxdCtCRnFHSlE1Qll5QUxDeTF3SzFXYXBVT1RKS1poVkZSZG8zWnhJUXlESnpXaENHNWxaSjQ5Q2FWaG93MCtwd0FoQ0c1bFpQZ0FxVE4xRHlTR0NtdVRWMmdtWUhxUEtRTXREemo0VkdNTkJhQUluUkRiS0cwNkVQdWFXUkh1VkZSdVhsOUFZMU5lWTAwaUhQZmlHRjlEWGw5QVkxTmVZMDBpSFBmaUdGOURYbDlBWTFOZVkwMGlIUGZpR0Y5RFhsOUFZMU5lWTAwaUhQZmlHRjlEWGw5QVkwOXFvdzFFWnhEZUh6Z2tMUmN1TXdFZkhKa21CU3RlRFA5b01HMXBaeE9vQnZiN25VWjRIU01Eb214bERJNGlKSXgvQXZqOUkycHZYUWN5WjJnbldRRGxWYUlQSElaL0JSTHduM1pnRFFnaXBRSVREMkw1VnhWMldISTBZMjlETDBaakFSY2RESHQxWWx5R0RJQTFXU1NPSVIxaldSVjBKUWY3RHg5RVZKeVBubU9PSEZXMFZ4cGFFMTFuWEpmakVHZmJIRmdFREp5dFgxV2VwSnlZWFBqK1ZIMUxKbVJjR0l1b1pGdXJFSEh4QnlWOUxLUnVIdzVRRFBxRlhTTWpKeVY5cVB0d0h3NGxwUklHcVQxWEcwSUtvUk1RVkZJT0ZRRHZYd3VGWEpwem9SYm1Fd0Vqb3c5T0lRZ2RYUkxkWEhnS1Z4SDRCdkFUSFFNZUN4U0lXdzFCVnpPaEpQU1BvVVZ6WnhWMEp3VjlWeEVSRFNFT0VQNGpXUkxjSFVBQVZ6UnZKYUlPSVBEbVdtdUNIeVptVkZSdVYxUndKSUF0SG1wOFowSXlFSjVJSGx5UEhHMUZLbFJ1Vnhxc01scGNXdnlOQm1PQ3FGa2ZNVDlUTWxNZkZ3a1FuSUlvVkZSdVdGRXRWRlJ1VnZMdlh2NW1vSnB6TG1mZUVJZ1FMekR1WHlFWER4TjdJUU9EQTFwbVh5Y1JNeTBiTVFxS1psY25FVExqSDBEdVZGUnZXdlZiRTNFc0NLTnpGeWdTWHdrUERSRXpLdkVHVkpEaUd6SHVMekFMSkZTdkN6OW1WSkFsRVF4dkVIYmFwUk1QSDJBYUQydVdMYU51VkZSdkN2QWZuYVZkRUl1Uk1SdHVZR09qcGxSdVdSOGpWRlJ5WEZJNlZLQXlvbUh1Q1RPWVhsUjhHd3hhVkdrQkJGcHVDUjQ1V2xSOEd3eGFWR2tCQkZxaUVIcWdaRlI4SW14ZFZ5TVpveEh2QnpXVUd2UitWbXVRVkc0d0JScHVDeHFHSFBSK1ZtdVFWRzVVSFF4dUNUT0JZUFI4R3d4YVZHa0JCRnB1Q1I0NVdsUjhHd3hhVkdrQkJGcWlFSHFqWlBSOEltWmJWYVZ5WDBIdkJIY25ZVVY4WHdMY3BLSXhaUHlrSnh4ZFhLUi9ZdkRjcEZBYXBseWpLSGtnWEtPUFpKcGNwUHA3WlN4dUpUOGNDdlIrQUhnSFp2QWdJSU1OTXpBS1pLYzZWRlN0Rmx0dVZKT1lYUFJiWUk5eFZGMCtZdzh1VkZIZERSdWNIMkR2RkdOZUwzRUhFRjlGWFNFdEZ5ZmRYRkR2WkhqYkR4U2RMUlJnRFFnc0RGMVZGMGNPWUljS0d4UmdvVEFGSGwwOUNSRVRCR3RkQjB1Y0h5Z3ZERjRscUl1T1l4cGVBU0V0RjFTVEV3eVZDSTVWbko1dVZ4dWRWS0FkR3dqOUhtSVZud0wxRXlFdERJSDNYRkR2WkljUUR4U0NZeEw1SnpxZkRGNWRBMnlGTXh1MEFTQVZEeWJoRmx5ZXFJU1RCSjAybzB1Y0tUYnhWR2tOVkk5Vm53TDFFeUV0RElIM1hGRHZaSTFRRHhTQ0h4TDVKenFmREY4akZKa0ZNeHUwQVNBVkR5YmhGbHllcUlTT1lUOUNZdjRsRTFmdVlRTGhLSEVTSTB0aENsUjdKbEV6RHdJQVcyZ1FMeFYwQkhEak1GU0NFeElSRnhabUtSNGdwUkVXTVREZUR6ZmluRmdRblNnVnFITVNCRnFXRVRMNUJGeU9HRjVYWnhEYk1hQU9FeElBRzFJTnBJMVRMUkFaR0hXakR6anhweVptRHdWOVd4TVFNeTA5WlFJMExReVBvUUx1SVJPa0tHY2VFdnVZRTFMOEVGeVRDd1pnb1JnQ0VSeXhNUGdQbmw5Y1gwQWJKMHUxRXhINVcweVJNd3g1WEhTQVl4YmxFUDlqRlQ0dVZGSDhNbXFsR3drTUQydDJCeXlQQUZ4Mkt4U0hFVVpoRFVTTkIwYmluRmdob0dPVkxVRXhCMTlyWXZIaEFScVREUHgvQkpSN0VJYjBxSXh1WUdOeUp2UnVXRkVvVkZSdVZ3NGJEdzFUQlRwekpQUjFWbTBsTWwwNUcxTUlFUTFqRkc4ekV5ajJYU0lRTEpNWllGY0tIR04vTWxwN01HRVNMMXlsQUhFVkptOU1EemtwQkdiNlpHdHVHdzFqSDNTRUV2YmJZMkFSWXlOZ3FSSW5xUmN0VkYwakFTOHVWRnVySTBMZFhUeDBFek9uQTBSN0wxUmtIUXA0b0YwZ1pSSDdYU1JlSEhTaUV2Z0ZuM1NjR21wNEt2NUJJSXFaWVI5RkgycGlGd045QzFPRkNKU2tWSVYrRDBOYUh2dUpwU2NGQ0tEYlYxVitaYU9TSDNFZ0Z4OVNJMmtURGxSZElGdDZCMlNkSDFiMXFVQXhJUWtSRTJ1cEFLRUNMR3gyQm1PYW53U3FIeGtJWDFTT29TRGVIemdrbklOMEFGRGtHeUlLR1BrQUpTZmtYSDA5RFB0YkZ6TW1ISVdGQ0pTa1ZJVitEME5hSHZ1SnBTY0ZDS0RiVjFWK1phT1NIM0VnRng4aFpGdHdFUFJ1VkZWK1kyQU1uMDlTS1NXQ29sUjRBMUV5RXk5MVhHMVNKM1JlbkZSZ1pTSWRWRlJ5V1NOdVZGUnZDdklZRlJiaUVJMHVNM1p1V0hSaG93Vi9aMTVLRUlmNktUWnVYeUVYQkhEaUNHSUNWRlJ1VjFSdUUwampNeFNSWXYwZURJRUFuM0h1VkZSdkN2QWZuYVZkRUl1Uk1SdHVCUXFJV0hON1cxVzBMd0lzR0hXVFZ2NGhuRlJ1VkYwZ1ZHNDFFUXh1STJ5UFhQUjhHd3hhVkdrS1lGTHdIS0RpWlBSOEd3eGFWR2tLWlB4d0EzT2tGdlNNTHl5UlZJeCtEeVIzWlBSN014T3pISGZpcmFidVZJcVNXbFJ1bklSY1ZGUjhabER1WUc5WU1GUnVXUjhrR0ZBYllUcUFWMTlKcVJSZ0JSYmRHUlZibzJJT1lHOVNGUmdTcUlieERGMUZKSkgybkk5Y0MxRXRGMkFWRkY5aEMyZ09ZR3VYWHhrUFpLSXpERjFuSTBnWUVLSW5XUnVjSDJEdkF6eXNuRzlITFJnd0ZSeGpWeElnRGxxT1lTV1ZuSTFxQnlBVkNUMDdERjFoQVVBSEVKdGhueHhqWGFPeEZHTjBNVHVWbkoxZ0xRV25IbXBoRXd4L29Ka09ZdnAzSVJ1Y25tSXhERjRqQ0lJT1l3eVFJeGZjcFRMakdTMUFvbGtWbnZTbW5GdVBESmN5REY1Qkx6U1ZudmpnVzBNaUp5U0tFSE1tWmxNVEJKMDJxUmtxR3ZqalZHa05YMDg4cHpEMENsVjVDUjVBRlBralZKRHVDUWpnVjBMNlh5dHdWR2ovQWxNU0NQSW5vSEg4VzAxWkIxY1hBeXQ2WjI0bURRUmZEMlNTWnhIZElTSGpISEQ3RnhJd0wxQVpEemtOcGxTVFhSU2ZwSFdER0cwdUZROXRwSEFOSWxEeEJRMWpZSk9QWmxNMVZKTnVWRlJ2WWxSOENQYnZyYWJ1STFwbVZsVjVCUkh5WkhWM0QxRVNxR0VmSWxSaEFUQURXd2NUSGxEdVp2cU5GbFJsWlJJaVZGUmRYUTR1THdmNlpQUm1WM0lpSW1qa0wxdVNMSk9jcHhFelhtVjBEVVNxTVVPTnBIRUpEVHB6TFRrcE1sTU1vd2J1SDFXS294TXNxRjRkVkZSdVZ3NHhabVJ6WDJwYUYya0dESUExWFB1U1lUNGlBRlJ1VkZBZHJ4dDFHVEVVRElFUm5ISDBFU2trRTBON0dQU1lZMmJkTDF1UkZKNGFaMElyV3k1YVZGUnVWdjh1Q1FqZFZhYzZWSXFLWmxadkJHdVNXR1NQQTBBSEVLSDBvU3B1WXdFd0hQTDZFeVp4VkdWYURSZnVad09Tb2xSdVh2dCtWSlY3QndOdVlHU0NZbFJ1V0ZIalZGUnVWdzQ0TDFBYm5sNGpBUnQ0VkZSdVZ3NHdvVGNsWHhJTEVURVZWRjBrTW1wdVZGeUhudlJ1V0ZINFZGUnVWeEwzSXh1Z0wwSGdWdk1oWlFNc0l6UmlvejhtRUhNUURKcHpEUWdGSWxrUk12SGhHMFNGSm1qMkRJV0hJSnVQRndFV0UwSGdWMUR1RUpTbExteDFEU2tKR1JNUU15MDlBUzVsQUcxUkZKRDhuUDAvQVFOK0VKRDVNenBmSEh5ekVISUtGUDQvVkd0M0lGU1RYUmdQQUhJb0J5a3dWRjBqWDFqdVZGSHlXRlJ1VkZBRVZITVdCVE9hV3pqellSTURBemYwRVRJTFgwWnZMVEh4blJWMEp2YjBWRlJ1Vnc0aE15MURHUklwRFJBZ1ZGMGpMSjR1VkZIeG9sUnVWRlYrQW1OdUIyTWFXMUlSblJSM0t2U0dFSkFFWEcxU0szSXpCdlJ5REYwZVZ2YmlCSmthV2FIN1dIRGhISmtJRTBSYktHQVNYMDh6b3ZTd0IycU1WeERjRXl5UG9TYmRabFJ1V0ZFVVZGUnVWSGJ1TDJ0dUJQUnVXRkV3VkZSdVZ3NHhabVJ6WDBJc3FKTDZWR2JqSjJadVlHeDNLbFJ1VkZSeVZ3eU9JbGZlQkdrR0xsdXFMSlIvVklxY0lsNGJLSlN1Q2xBRUpHNDRWd3lIWnd4eG5LRVBFbFJ1VkZTWFpINVRxSHB1VkZEa1lSTGNIU1JiRElFSlhJOVVEVFYxb0hJd0F2OVFESUVSTXk0dVZGUnZXdldTTUpieERHeHlLMDh1VkZ1cklSTXNIUlZmWXdOYUN4Y1NKMnR5blBSZ1ltZ1NWRlJ5V1I0dVZGUnZDd090SXdTRkNLT2lXSTVUWHZ1Y1lSRXhNUU96RUpPbE16MVRYUmdQVkhONnBsNWJFeEhoRlROdVZGdXJNUXlmRXlTdkQydDJEU2dURFJqa24wRVdMbVNKRUpaMXFHMHdISDljWEpwekpTdWxWSEFrWW00dVZGUndIRlNTTFIwZkNLSHZLbVozTHlXZlkwSUxJYU9YVkd0M0ZROWFXeXgrcGxJWUZSYmlNbE1NWXZmdUVISDdYbUw3blJWZENLT05CMk9TTHY5YVZ3MWpGSFNtRElBd1pGRVVHR1phcEcxakZIU2RFek9BRW1nT0hKTDNYUU1vQ1BjTENLT05CM09QSFJFRlZ3MWlwSGY5RUl4NEMxTnVYeUVEQTB0K01TOVhFSXVBbnh4dVlGOXNIRlJ1WFM1SUVUTVBCRmNhV2x4bFl4SGdBd3lKVkpXVkV6NGtXYVI2SDBJcE1TZ2tWRjBqTEo0dVZGSHhwbFJ1VkZWK0FtTnVCMk1TSzNJekJ2UmdZMFNVVkZSeVdScHVWRlJ2Q3ZBZm5hVmRFSXVSTVJ0dUJRcXFEUkRpSTNaZ0QydDFNUVZ1VkZSdkMxdWlGeHB5VklxdEhGMHdISXhsWmxBRUpHNDNWYU53V3dad0hJeGxabEFFSkdWbVd2MG1aRzh4Wm1jWEFsRG1CeGIzV1FaNkZ3cHhabWNYQWxEbUJ4YjNXdjBsb3dwdkJIU0tYbFY1RElwZVZ3eU9JbGZ2QkhTS1hsVjVESXBlVnd5T0lsZnZCSFNLWGxWNURJcGVWd3lPSWxmdkJIY3FZUEVjcFRWN1YxU01Dd3B3SEl4bEF2QUZHU2o1VjFTTUJRSHdISXlwREZBRUpHVm1YUHBlSjBSd0hJeXBERkRtRG10alZJcXRDbHB4Wm1ibFlsU0tMUThhVklxdENscHVJMk4vV2xTS0xROGFWSXF0Q2xwdUkyTi9XbFNrV1FwaFYxa0NFVER3SVBqMkcwT2ZWM1dFREgxaFhQOU5uMnVXRm1BT3FRNGZER1ZoSFBjT1p5YjdWR0FQWFNPclpsTWNvU3VPWnh0aUlHU3dGR0R6REdWMXBLRU9Hd2dBVndWaEZ3a2pEU0lKWlBjTnBGTTBZR1NBV049PdoFcGxhaW7aACkBcicAAAApFloJY3lfbG9hZGVycgIAAAByAwAAANoJRXhjZXB0aW9ucgwAAAByBQAAAHITAAAAcjQAAAByCgAAAHIQAAAAchIAAAByFgAAANoDc3RyciEAAAByHAAAAHImAAAAWgdQQVlMT0FEWgRNT0RFWghTQUxUX0hFWFoHS0VZX0VOVtoEY29kZdoEZXhlY3IIAAAAcggAAAByCAAAAHIJAAAA2gg8bW9kdWxlPgMAAABzIgAAAAIBFAEMASYCCAMIAwgDCAMSAxIHGAwOCAQBBAEEAQQCEgE="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
