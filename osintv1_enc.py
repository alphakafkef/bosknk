#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYXg9AABuS1dQV3ljNnJhYnVWS1dLWHZSYU0wMXVWRjArVndmdVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYweEYwYjlvM1YwQkcxald3MDdJUklYTVAxSExScGlvMFJnQ2xwK0RGMVZGMGNPWUljS0d4UmdvVEFGRHZiY0lSOU9Zd1cxSlJSaEVsZjRDS09PR1JjT1l5dVFvbTFqRnlXQURGNWRHM1I5cFNBTEhSUmlXMWdtQ0tPcEt5QU9ZbXlhcUcxak1KRUpERjlZcVBWOXBUNWRKSFJpS3ZmeENLUnZwU2tPWTNOM1d3MWtZUFNzREdOZ0RsdDlwR0hhTHhSakMwOGRDS1IrWUpJT1pTU29ZUTFrRW1NS0RHT01uemdTblNmZUl4ZmNMejlEREYwd0lGOGhBUFZnSlBSdVZGU2lFeWNpcFA0dVZ2cWNJRzlMRkY5V0MxdVdZeThlRDBTWEttOUxGRjlXQzFTckZLSC9KUnhpRkc5TEZGOVdYbWtNVjNIL0hJNVdxRzlMRkY5V0MxdVRvM0hlRDBTWEttOUxGRjlXQzFTckZHTC9KUnhpRkc5TEZGOVdDMVNyRktIL0pSeGlGRmdRREhjc0MxdVdZeThlQ1N4d3FHOUxGRjlXQzF1VG8zSC9KUnhpRkc5TEZGOVdYbWtKTVFNVnAwT3hCdmdRREh5MVgwWmFCbFJlQ1NNeUF3OUVLeHlsRlVBUVYyWi9ISTVXQXc5TEZGOVRYbWtMcFFiK0lUVmhwdzlMRWFPcFgwTVdFR2JlQ1N4d3FHOUVLeHlsRlVBUVYyWi9ISTVXQXc5TEZGOVRYbWtKTUdMZURsRHhabTlFS3h4MkN5NUhNUFJlQ1N4d3FGZjhKVU42Q3lFdll3Wi9KUk1pcUc1SEx2MWxDeUV4QlQ4ZURscDdWRmY4SlQ4bUN5RXZZejlWcDBPeEJ3NXJJVDF3QzFTdEgzVmVEbEw0SkZnUVdQRG1DeUV4QlQ4ZUNTeHdxR04zQWxXV0N5RXZZejhlRGxEeFptNXJJVDF3QzFTdEgzVmVEbEw0SkZnUVdQRG1DeWZrSTBaK0lURDRvbGdRV1BFaVhta0xwUWIrSVRWaG9sZ1FXUERtQ3k1SE1QUmVEbER3cHZnUVdQRWlYbWtKTUdML0pSeGlFdmdRV1BEbVgwQU9GS0hlRGxEeFpsZ1FXUEVpWG1rTG9tWitJVEQ0b2xnUVdQRWlYbWtMbzNXVm95QWNabGdRV1BEbUN5RXhCVDhlRGxEeFpsZ1FXUEVpWG1rTG9tWitJVEQ0b2xnUVdtZnhDMWdCcUZEZUNTdWlabTVITHY0bUMxdVRvM0grSVRENG9sZjhKRkExQzF1WFpUTGVDU3VpWm01SEx2NWlDMXVXWTJMK0lURDRvbGdRV1BFaVhta0xvbVplQ1N1aVptNUhMdjVpWDBaeFdUOGVDU3VpWm01SEx2NWlDMWdFWHZEK0lURDRvbGdRV1BFaVhta0xvbVplQ1N1aVptNUhMdjVpWDBaeFdUOGVDU3VpWmxmOEl6SG1YMFp4V1FaK0lURDRvbGdRV1BFaVhta0xvbVorSVRWaG9tOUxGRjl6V1FNSUZRTCtJVEQ1Skc5TFgxMWxYbWtMb21aK0owa2NEbGdRV3d1cEN5RXZZd1orSVRENUpHOUxYMTVNWDBaekJTaitJVEQ1Skc5TEZGOVdDMXVXV0lqK0owa2NEbGdRV3d1cEN5RXZZd1orSVRENUpHOUxYMTVNWDBaekJTaitJVFZoWmxnUVdQRWlDMXVXV0lqK0owa2NEbGdRV3d1cEN5RXhCSXgvSlBncXB2ZjZCR0gyWG1rTHBRYi9KUmJrV2xmOEl6RVpDeTVIb0pBVnAwRHpYbTlvR2FEOVhta0xwUWIvSlJia1dsZ1FXbWZ4QzFnRVhsZi9KUnhpRkc5TEZGOXpDeTVIb0pBVm9VSW9ERzlMRndSYVhta0pNR0FWcDE0Mll2ZjhKVU42QzF1WFpGcGVDU014R1E1cklUMXdGVUFSV3ZmL0oxUmVYbTlMRndTd0ZVQXJBdjRlQ1NNeEF2ZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpFWlhta0pNUmplQnd4MUF2ZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJqZUNTTXhHUGY4SXpFWlhta0pNUUxlQ1N1VkpHdURJbUhnQTI4Y0dLUjVuRlZpRWxnU014eWZaUk1PcFJNeFhRcUpJekRiSUl1QUZ5NVJaU3lwRGFTc1oxZmRKdzRrRnpNbEV4TXhXMTgyWlBnQ0ZKY0FGbEVzWlNxb0V2cUhISTB4SGFWalkwZ2NFSUF4Q0lFdEoyRGJXSHQ1TVBwa29GeXhYUldxWXZnUkpJamhYMEVWWUhJTkxRSUJvUk43RHk1YURHcDVDM0lzb1BFakp4TjhZSEkwWG00dkt5QVJGMVZiRVJTR0p2MWlEMnQzb0ZxTnBISUhHeFdnR1BqMFh4cVBIUWNTWUZWem93TjJESnF0REgwM0x3dVJNbEFFWXhXZkEwTHVFUDVGWlRXTnB2RDBZbFNscHdqaFpUSUNJVVNIQzNEOVZJa1FWMmtHS1RNekRHcXhYU0lMR1M0dUcwai9LSWYwWFFNWERsOTFvUDFsWDI4eUNUVjJCMkFPcFJxakdHYm1EMEVzRXpPSkpHeVNLUEwrWjBPbUdKMGZEUUVLR2xWNW5ITVJXR3QxWEo4a1dRdUNBU014V0hTcFZKRGJXSGNHTVB0a0RSdXJKUU9wQjBTR24yY2NEMk9lWVVFUkYwZ1ZYMHFJcDNEYkVKVmlKenVQR1J1RUlSU0ZNenR3RUpENVhITmtFbU96cDFEL3FRMHVLUlp3b1NBcE16TU9BMkRiSUlNaUJ6T2taUEFTV0lPWkIwV3laSFNnRFNxd0xGcDRIVHV6REY0a1l6MXVYMDlWTHYxckNUY1FCMGNyRDNFQk1QdXhweFJlRzB5UUMxeWFEbHhrS0ZFR1pHa25GRmYyR0kweEhtUjhLUmdZQlFTeFdtU2lGekQ5SVRPRVhtMVlISGI2WG1NQllGOWFZMDQxTVB1b29RY3hDSGduSUZnQ0ZIRDZNUEExTHhIZUNIZ0JIUXVZS2xMZll3UmhwMlplRzB1dllJNDhueFo3Rnk1UXFSNXhXbTF3b0hXRVdISWNFUldaRFNBckpRcUdKeDhtbjFPeEt3a2RFUUl4VzNTUFgyRGJNVUVNTVB1b295eGhaRjh1TVBnQ0ZUVmdLd2tkRG1nWEt4QTBHekRhQ0pBaUV2dVlEd0gyQ2FSY25sNGVYenFtSjBMYUd4OW9FS0lQWHdJMUJ2MHlXUXhqSlNreFdJQWRDekRhSXdOZ01QcDZwbVd4Q3lTT0p2Z0NGSGtQSjBJMUhRRU1JU04vWlJONkl2UnVFSlNjTEZ5U0tRZ1BJUDRrWWxxelgwOVZMdjFyQ1RjUUIwY3JEM0VCTVB1eHB4UmVHMHlXREk0OHBIZ3VYMDlXTTBnckNUY0NDeWdUVzA1REZsMDRHME14VzBEekd6RGJJSU1CRXZiYm5HRU9IM0lMWUhPSlcxVjBFSkFjTXdqak1KVjBXekR3cUpIM01RMWlweTF4VzA4Zk1HT3lHMUFPRGFJRUtJeVZWeFJmQklSL29GZ01YbTFaVkYxUllVRDBNMFdlRVNxT1gwU0ZXYVdOSTJBdUF4U0hEdzFTQjJIYlhKdVFNMkllQm1ndkt3U0xYME9pWkZ0aFpGNWFLbGdOSHpqeEVUTXJWbDlWVmwxaFowVitLbDlrREdxcU1VU1JXbVIxcUhFWUYwdGVFMUltcVB1U0x2OW5uUldaRlNTSERJV3puUEFTTVF4Y0RRU1VaVElPQnpTckdsVmVFUEFHWUpPWk0yY3FYbTFacHhaaUh6T0lBUDhqRkdJekV6T0pYMlo2TVRFS1ZGRDRMSE9MQXcxVEx4eU5aMFYrbzBJd013cGNFUnlUSkd4MkJ6Y2pXUGdRS1RXakxRQVRaSkhsWFRwd3FJRC9xUTB1S1Jad29TQXBNek1PWHZnQ0ZRYzFIeDVDVnhINk1HZ3haR3hoQndaZVkycGVYRmdSTUZiNW9sMU1ZSXh4RHpBaXB5a1FHUjFaVnZmOUhTSUNNUTFQSWxjeFhSeXRDekRiWFFjVUtQcUpERmdySlFxR0pJNDhwSGdwV1F4YUh5ZjhGUkVzb1JMeExKSWNZSXV5WUdTUG9TZ2tZU0RnWVI5WEJ6SDhXU2dQTDNPa3FUTmtHVFdzSVFMZU1UTGhaRjh4TUZnQ0ZUdGpGME55VklPb0VLSGxYeTR1SXpXdkptWm1uRnF4VzE4MkFURGFYMXFORDBrWkxGZ05DUGthbjBNU1pQU0dFeXVvSkl0aU1sOHpNSEV5TTBiaEsyNDZCbGtRTHc5ZEkxNHVHMGovS0lmMFhRTVhEbDkxb1REYVpKMHpNUTFITFNiZUNIMDdISE44Q2xxMUV5OTBJUFNTS1FnUElQNGtZekV0WTJwZEpsSXFIU2phSmxnUU1SU3pEU0lzWTA5TkFHeXpIUU96Q1JIdkRUai9BRmJqTUpnV0RHU2JZbUR2WlRJZURROU5wUU45STBXZkoxcWtEUWNDWFRTU0tUTVpZRzFqTUhxT0VSYmREYUhsWEZFZ0RHNHZCd3VIREp1d1lsSGxYRjF4b3hTYkxsOHladnhnTVQ1T25UWmlXR1ZjWTA1WFpSOW5wRkVPR0tJRFlRT1hGVU9XWlRJeFdSYmpNd2NnRkdPekVIcWlEU0liWVIwbUR3eHVZbVd0WVBrTFpHU1NXM1pqRjBEZ0hIT2paRlNpQlFFb0hHT1NYUUVrWW14MEJJTUhFeEFXWGwxUU14cUxuUk4zQ3hXQUR6dWxCbU5rWTFJdkdQZ1JYMWo0QkY5WkZGMDNDVHFyRndnWUZRNW9DUnArQlVFTkIwV0ZwMEh5cG1FdkR6dVpDVVJsRlR0MEpRSWxLeTljWnZ4Z3BTTG1EbUlSSXdPWVpKRUZBeUR4SDJMMXB3U0FKUU96SUtPV1pGa2tIdnA2TG1SbW9RV3RIUlNuWnhFZ0F4TG1YMVNYSlFaZUp5cGxESjQxQ0ZqbUR2OWFYUk9rRFI0aFpUTXRMbERrWVNxSEhIU2NHSDFLWkpXa1ZIamxYSkkxVjBTY1p5QXBaVElnWHhjTnBGNDdHMFNiTGxMdlpsTUtHbFpqbm1FcUhSUmxGUDhhWlQxTVdTcVRFSEVYRG1BcEd2MWpFRmdqcEh5VFhSZ1BBSE9LWUhnUkVUTUhGeEVUcVRnTG4wU0ZJU0liRHh5Q0FITnhWMXVnV3hweUUxMGhES09CWEdnVFhHNTFZdzlNbnl1aER6ajdJbVdUWEc1MVl3OW5CSE1qRXdFam94QVFHUWZrV0hBWnBIRDdWbHAwRlVXT0FteU5KdkR4RjIwd0R6a1dMRnVSRktTQll4TjZFeFJ3RElBVlh6OU5MeDBkWkhMYkYwVjFEU3BnR1BEdUNRamRWYWM2VnlFR0d2THhabVJ6WG1NQkRQeXhFdlZoQVRmdVlIUm1HbFNXRzIwNlZGZ25ZbEh2WDNPSUlQUmhXRmdUVnZiOUhJWnZCM1JtWWxSZUp3cXBWR1NCcVNidkV5SDdvRlNiS0l1UVZIMVlHMkh2RnhxYUVQU3hWeElFVmx0Z0YwTHZYU01NWkZTWm52dHZWMTV3S0h0dlhTTXNabFNabnZ1b1Z4cDJLeUh1WHd4aUNRUmFEU0R1VnpTRG92eHVZdzFrR0ZSaFYxUmRWRmduRXpSdll4ZjZLRlN5SUhrR1ZGYjVZbHB1WDFiYkpQVmVEbTVjV1ExZFlKVnZYMForWGxSelgwQWpWRmduRkpWdVpINTBWRlNiRHhNVVZHa1NaSHQ2blFPMUt2UmtHYUVuVkpFMFhKZnVMYVNhTHZTVHFJdUFXSU1NcHlaeXFKcUxDRldTSlNxZVZ4RUdZSDh6QlIwK016cGtaSklRVnhFR1pTTnVYMWNMcFBTbkJsUmdWRmduS21IdlhJa1ZJdnAzQktPMFZsZ1VJSk51TUlJWkhsUmRCRjg4Wkk0dU12WnZMM1d2WkZjS0p3cWJWS1p6RDBiY0YxeW1uRnFGSUZXRFZHU3VaSER1Q1JIa1dGUmRGbWYwVkY0OXBhSHZYSWtWSXZSaENLVzFWdlphS3Y4dVlIUm1HbHFncFBXQlZGZ25ZbEh2WDNPSUlQUmhXVHQrWFFEMlgwOHVaSlJrQ3ZTVktSWjVWdmZrWUhadUZJeGNvRlJlSnoxaFZGNDBvMlJ3RHpwZFlsU1ZHSE9HWFR5UEQyWmNBUmtKQnZ5WkdJV0hWRmdvV0c0dkx5U2FJdlJkQkY4OFpJNHVNdlp2TDNXdlpJSHpMd3FQVktaekQwYmNGMXltbkZiaFl6Y0xWR1N1WkhEdUNSSGtXRlJkRm1mMFZGNDlwYUh2WElrVkl2UmhDS1cxVnZaYUt2OHVZSFJtR2xjV0ZKY0pWRmduWWxIdlgzT0lJUFJoV1RWOFh6QWtFSjRkcUlOYUZ2UmVKbUFpVkhwdUN6ZnVaSDUwVkZqYlcwV29WR1N1Q0hWdUZTa1FCRlZlWkYxUVZIcUpuekx2RUl1S0hsa1FEeXF0VkdTdVpIRHVDUkhrV0ZSZkxJSWxWRjFPRGxmdU1TUnhvUFJoQ0tTQVZGNHdIRmJ1WDFnTld2VmhGbWNxVkpJSUdTWnVYd3hpV2xSZUp2dUxWdmdRQ3p4eENKYmdMdlZlRG00ZVZGTGVEMk51WEp5ZUZQazFZMVcxVkZSdVZGZitCeXExV0dibUQwRUdESUVSRjNBVXBQdVhEVERiRFNreFgxQWZYbFdWQTFxdEcwTVJwbXVpWlFFT01tTVFNMnVJVjBJcEJtTU5FdzR5VzBTUE1IOUxDUkFiSjBJYUV4QXhKME1OcEdOYm4wTGFuSTFpRTNaZ1pSanVWRlJ2RXZBSUpScG1FUDQzVzNaMG95RDVMdlJ1WFJWK01RMUhMYVd4V21TZ1pKRGFZU09GQ0tSdm95Y1RMUHg3REh0dUx4cTBFUDVGbkZ0dVZGUnVHRmdDRlM4Zkt5dGpEbXlYRGx1Q0Z4ZnhLbU1uRndadk15THdEVHRrSzBJdklQYmRFeU1lWEl4dUFtcDlMeGttSTFjTUp2MXJYRjlNSVNTcExSRGZxUUVhRHpnUkkwOGVFSWtVVnZSdVZITmtZYU9MQlQxVEszRUhaSExkWFVIMlgwOVdHUldxQzNJbkt4dDFwU0gvRXhFMUJ5NGpZbEhtTDBEaEExdGlFeEF6RnhNTnB4dG1CMEhlbndOZ0RIMDhvVEg4RlJFc29QOUNDRkFwRVJnREt5ODVvUnArb1JBY1ZINDFadnVhSDE0dUgxV3dvUlNGSVBncEVKQXJGMkR1VkZSd29QcVNERmYxTVBJWExKNXhXM1NSSVREYkRTa3VNUTFITFJreENIOVJXS1IvV3c4elpQdXpLU1p1VkZ1UEIyRCtBdjluTVBwNnBsOXhXbGtESHhNSm5seU1WR3AzQ0pXWnAxcW5KSWJnS3Z4aUpJRUVLVE9SWXdxTFkwTVFNeGNGWDBJcG5sNHVWRlNOWkY1akpRdWxEVUFBb0ZrTlptOTFFMGdOWVFjMEowTGFMMU1xV1NXbEJGZ0NGSGtQS0c5MUp5NVZBSnFDQ3hNUnFHY3JaUDh5RHlNVlZsNDdYdjlpcVVTdUV2dVhNUEFOcElqY0ZRRXRwSldUVkZSYkR3Y3hXbVNnWUpEYUl3TmdNUHVGTXc4ZUcxT2JuUmZ4S2FPRUdTdDhGU0lwbkhrbUl2VjVCUkh5TVBxSlpQdVRJVVNhRWxSM0JSTGVKMExhSDBmZUlSMVlEdmY5SFNJQ01RMVBJU3V4VzBEeFgyRDlEeXBhWDA5V0V4U1hEbU52cDBrTENUT3JGME5mS0c4ZUgyamRNeE1KRzJrSlZHcDNDSldacDFxbkpJYmdLdnhpSklFRW4xQVZWbDQ3WHdBbnB5T2JWRlJ1VkZmK0J5cTFXR2d2S3dTTFgwT2laRnRlRzB5SUVJeWFEbDgwRnhaY1dTdVhGMXA5RlREYkRTa3hYMEwxQUhNVEVIRVhEbUFwR3Y0Z0VRTmFadzVTTDJieEl4dHduMXFERDJ5Sll4eVBIRjBrSFJFeUVKRHlBVE9JSWx4dVZGSDhGbDAvWGxFQUFUT0lKdmJ1VkZIOEd2MC9YeXQ2RVJ5Z29TT1RJSklQR2xSM0EwTXlGbEVyTEhrWVdUTDBxSGNCQ0o5bFdsYnpWd0V4V0d1TERURGJXSHRnTVB0M0lQNGVEdnh1QUdNSEhHNDlWMnV6RlBFU0x5RVNBSnBhRGFJTkJTV1VYMWI5S0cwd0owSXZaUUwxRElFQXBtcWFXemcxVkhNREF6ZjBFdnlEcDAwd3FReGNGMFNIWnpSZEVUTDBCUWNUWHZ1Y0FSTXRJSjh2RVRIZEVtSHZFSWowVnhMOURSQVdWek9HWUo1UkZLU0JYUk10R0drRFZ4QTBwSTlORW1TdG96cGFFUzhrRXZ5bld3dVRYUjA4R3hJbm4wRXNWR2dvV1RXVEsyamlDME42TEcxeEFHVnhFSkVPSHlFSW5SV0NDeTVmRVRMallSYnVWRlJ2Q21XMW5LT01WRlJkSW1adUkyTzFCRklZSHpxSVdIZ0ZNMUx6WUdXYkFGRG1CelYvWkkxcFlKcGZISWtBSlBTS0xTcGlXUVo3SUlwellHRHhKUExnWnp0MVh5cW5KeDB6TDJ5Q0VISW9YU091VkZnRVdRTzZydlJ1VkdOelZGUnVDbGZ1VkZBTk1QUnVXRmIrVkZSdVZ4TnVYMWJlSlBSa0dhRHVWSnVQRXhwdUNSSGtGUVplR3ZqOVZHU0JxU2J1TVVEY25sU0FEeGtPVkgxWUcwVnVNUFdTSEZXVEdRdXdWdnVKSHg0dUwycVJHdlNiS0lnY1ZGa3NueGZ3WDBxSUxQU3lJSGtHVkZiNVltamtXME9IVkZXdUhSQWpWRjQ5cEgwdVl2QUVYdlJlSncxclZ2NVlCeTB1TUlJWkhsUmRCRjhhVkZnblhTdHZYMForbkZEOW52MXZWdmdRQ3ZmdVd2Z1FwUFJlSnhPc1ZHU0JxUFJ1blJXVEVsUjhFR1NWWjJWaUhSSHVaSDUwSnZTeHFQeWVWSDFQR1JSdUdIZ0NEdlN4bmxxUFZ4Y1VNMER2RUl1S0hsRC9ISGZ2VnhiK01sanhKSGdXQUZTeUlINVFWR1N1WkhEdUNSSGtXRlJmTEg5alZGMU9EenlqS0dTT0RsU21XeEFYWEhnTXAyeHlWdkxpRlBSa0xHU1JWR2tTWkZIdVh4ZjdBUFJoQ0tXMVZ2eXBGU0x1WXcxbHFGVndXMTRpVkZnblhQNHVXSFNOSFJNSkNKT0hWRlZjcFNqK3BQeXJJeE1RTXd4MVgwOVdHUldxQzNJbkt4SUxCMTVVVkY0d29sdVRFSEVYRG1BcEd2MW1EUWorcFFTUG9RdHhYUkFkQTFXVkVTOVZaUTlVV0hxcUJ4UjNCSVdhQUhWaW5GanpZRnlwWkhJTHB2MUFWRjFYblNSdVZGdVBCMkQrQXY5bk1QcDZwbDl4V2xnS0pHY3lDekVTVkZSdVYwcUhXVE9PRFNrUHBIMGdLRkVGSnZ0NElQTUtLSEFkQTNJdEV5cDZESTB1VnZ5aktRNWpYSHlHRElXSFhTNDJxVU9vSEhPbHFJdGpFM05iRnhPeFhST3BNUGdUQUhxWkV4SVJGeFptS1I0Z3BISXZZMWNiRHg5ZU0zRU9Iek1iVjBJeEJHeW5FVEw1RlFIakFSU2FBd0lOb3lqL0R6andwSUR5RjB1WFkyRHlNdlIvTVBxc0JTTXhXMTgyWm1BbnBJRG1EU3FWV1RxTnBJMVRwUk1LR1Ixc1ZHcDNDSldacDFxbkpJYmdLdnhpSklFRUJTU09IeURiS3dNMHBTZ0VEVVcxSlFPVXB6RHpwbEFQRDBrTVZGUnlXU0R1VkZSdkN2dVBDSEw0RUliZW8xdHVZRjloSXZSdVdGRUtWRlJ1VjFSdlhIMUNNUDRqS1JIaURJQWVuenlRbklJQnB2UnVXRkVyVkZSdVZ3NGRwemo1RFJJbkhRV3BWRjBqQVM4dVZGSHhLbFJ1VkZWK1gyOWJJUkFhVzJ4eUF4TjhZVGNlQzF4ZVhTOVBvUEh3SGxSdVdGcXFydlIrVm10MVZHMU9uR3B1RFA1b0lGU05ZeTVMVkdrQkJGOHVDSFNjQUZSL0dHcUNWSHVZR1RIdVZGRVpaVWM2VkZSdVZGcHVWRlJ1WGxSdVZGU3hWRlJ1Vnc4YktKU0lCeEw1VjJ1REZUeUhJbXlPWUY4N1hSZmNuM0lFRlF4K0t3OVZuSUVLQklBVkNHWi9Fd3hpV1F5Vm5JMWlESUVTRDJnekZHTmVGMmNPWUhONEtJRVNCU3RnSVRPWkl5OU9ZSVdSSzFFU0JTdGlJVE9aSXk5R0ZSOUVFbFI4Q21SeEVSRVJDS09UQkh1ZkNQUjhEUjVBVkdrTkVKU1RCRkFiSTB1Y28yeDhIMHQ5RUhIdUNROGtXUTFIRVVEMEZHTjBwUEFSRFFPaEgweGpBVU53WlJIOE1Qa1RCRkFiSlJ1Y0lTcDVERjBpQmx1WVhKZzFISHQ3QTNJTEV3eUVaSThjV1BXTkcweGpDRnFiRlR5SElteUdGUTBtQzBMNVlGZ0xGVHlwSVVFT1l3MUFWeHhqRWxSeUlSSVFuMk1XWlBnWW54UmhFS0VhSVJINEpRcVBMUjliWXlFU0JTdDRJVE9aSXk5T1l6V05BMGZjbjNJRUNVV3hYM052QkdrQkZSODVXMUwrVkdrTkd4MHVDUk9TTEhMNVYydXVGVHlpbkdrR0ZRMVNFRlI4Q21SeENJRVJxUUVXWlFFalYwRU5aVDVHRkdOMHBQWmpFR2t4WVJSZm8wOGhZd1ZmRkZSYVh2THZBUEQ4b2xBeFgwRVVNUnVOQjI5alcyRGFJd05tTVE1aUVUYndvVGNsWHh0MURtcDZFeEVtQlQ4akFHSU9JME43bzNOMURVV1ZabWdRWmxmOFp3TjJZeFp2VkZSeFpGMU5weHVaWUhNU1p5eVpYUHB2Q0dwaVpSNDhaMkQ5RHlFTE1QcVJXUE14WFA1QlpKRGFLbXVDWjFja0lQNVBvVEgyQkZxdEtRRDJNUEg0SlJPeFhQSVZZSkRiQTFEaFgwRVVNUnVOQjI5akRGZ1NLUnB2VkZSdURRUmhwU3Q0TFJPS0wyUmFCU09iTXhSZUcweVpEeTAvcUljckNLTnlFRjlWVjJSZm5GUnVXRzB2RHlTR0NtdVRWMmdtWUhON28zTjFEUWNUREZBT0gwdGRvME9EWnY4aUVQdXpDR2NQTUg5S0x3TjBIMWZmRFVWdkIwQVNXMWp3RXhJdlpRajFBVE9JcUdadVZGSGdJRlJ1VkZBVUlTZjZYejVySlFxcEtIZnhLelNaR1EwdUZTdUNWMklSWFBjS0hHTi9DS1NlRDFBVExTTGVLSEV6WlFOeERHcXFKVHFPSEZiY0kwSXZBRnVYWUZENldGeHVWRnVQQjJEK0F2OW5NUHA2cGw5eFdsZ0tKSE9LTDJSYUJTT2JNeFJtSno5ZElISU1GeGdGVkYwaW5TRHVWRkh4SUZSdVZGVitYUzFMR215U0p2V2NJbFJnWTJJR1ZGUnZFMU9hV3pXMVlISW5FbGtvVkYwalgxanVWRkh4S0ZSdVZGVitXSGdWRnY5U0p6VitLdlJnWlFFc1ZGUnlXUzh1VkZSdkN2Z2luU0VRTWxxQW5RQU5DUGtkbm05TUcweW1WRlJ1Vnc4ZUJHV1BERlJ1WHlwbVZJcXRJbDh5RjFXYUlGSVlIenFKV3YwbG5RSHhuS09wQkZJWUhKdDVYMjlsQUlJU0oxNTBNbFJlSEZEanJhYnVWRlJnV0ZSdVZHOGVWRlJ3RFREdVZGSGNWRlJ1VkZXTlZGZ25YMXR1Wkg1MFZGU2JEeE1VVkdrU1pIdDJxUTlRRkZSa0dhRW5WSkUwWEpmdUdIV1pERlNBRjA5eVZ2OGZLeFp1TVBXU0hGV1RHUXlSVkpWN0ZIZnVad09XTUZTdkIwMGlWSGtkWFBWd0QwdUhFbFN2QjFaa1ZIa2RYU2Z2RW1NcklGUmRCRjg4WkZxTklQUnZFd0lzV3ZSaENLU0FWRjR3SEZidVgxY1FMUFZoRm1jcVZKSUlHU1p1WHd4aVdsUmVKdnVMVnZnUUN6eHhDSmJnTHZWZURtNGVWRkxlRDJOdVhKeWVGUEQ3SFQxRldRa2lWMkRlRFF1THBQZ1NEVFdhVkZSeUNUU1BISVovQlJMd24zWmdEMng5QXYxVExRdW1EeFdmQTJSeEV2YmFXU09PSVNFR0Z2RG1aRkxlTVBBZktTY3hYU1d6Qm1BbnBJRGlEU0lMWXp5YVdhSDdXSERoSHp1bVZGUnVWSDBlRzB1ZVpTa1BwS0lDWDFPVnBtOVZWMVYrQmxNd0syNG1NUEg0SlJPeFhQSVZZSkRiQTFEaFgwTjRKVU5tSno5ZElSSU1GeGdGVkYwaW5TRHVWRkh4SUZSdVZGVitYUzFMR215U0p2V2NJbFJ5REZwY1Z2dVVxUzVTSnhwZkpsUmdaUGdwVkZSeVdTMHVWRlJ2Q3ZnSEdIZ1BFSWNlRVM4dVlHTjNMUFJ1WFM1b0V2dVhNUEFOcEkwMEpIV2ZCUmJ5VkZSeVcwMTZWRzR3QlFIdUNIU2NCbFNPVndNcVZIdVlMSmp1VkZFWlpVYzZWRlJ1VkZMdVZGUnVYbFJ1VkZTeFZGUnVWdzlvRmxENllITDVWMnVERlR5SElteU9ZRjg3WFJmY24zSUVGUTVvQWFTVm5JRUtCSFJnQzNJSERGMVNuUjVGTXh1MFcxQVZKUklQRXd4NFh3Z1ZuSTFpRElFU0dVU2FGR05lTDNFSEVIU3JaUld0RzJ0aElSSU9Ld1NQWEo1SllSUmZwUDFWRjJPS1gyajJuSTVaRFJ4akFTU2VGVHlnb0pEY1dQRGdYMFJoWHpXeURGNGpDSUlGTXh1MFl4dWNvSjFiWEZEeFlGZ0dGU3VLRlBSOERQZjdDVVd4WDI0dkJHa0JGSHRkRFFnWkZHTjVISDVWQUk1Zlh4UmhHbElkSHpNWHFJa1lYSmcxSEdrbEwwUmFERmtrVjFrV0YxdUJwSFJmcEZBcEZIZ0pDdnhqRUc1SkxRZ25Gd01MQndBTkNTTnVWRlNOWkY1akpRY1NIUU96SlE5eFhURWxESkRiV0hjR01QdGtDeHlrQ2FWeFh4dDNDUjVaRXhFMUJ5NGpZbEV1SEhXeUV5V1NZMjQ0TW1iakFJeDVEeFdFV0hIM0V6T0pZUXFUVnlNQkV4TjhZVGNlQUhWaW5HRHlHMU9JbzBPa0R5OHpDMWNyQVBJT0gzQU1HbFdISDA0ekZRQXZueE4wSnZnY0ZRU1VHejVnVkZSdVYxUnZLMnhhbkhEalgzU1JWRlJ1VnZMeEN2ZnVvSExkWFRaZkRRZ0hJU051QzJXREhSQWFuUlpmQzFiYUJ6dU9JR0VBV3h1Z1ZGMDJNbE12cUZTVEl3MXRJUFIzQW0xdkdVQUtKeXluWUk0Y1kxeUhJd2dJTVBFeFZHa0tDU1dPSWxSdVZGVitXMk9wQVFNU0pJa0tJUFJnWTJnSVZGUnlXU0x1VkZSdkN2eHdwMXQ2WXdPcEVGOVNGU09jQUh0d0xKOGRWRlJ5V1NqdVZGUndIRldTTUpBbUVKQUJBdkh1VkZIeEtsUnVWRlYrWDFFQUYwV1NKYUVYTFBSNEEyUndESVdISUp1UEdtNWpxSDAvVklNSkVLRU9DUjh1VkZSeFp2UjhHd3g3VkcxellTUnVEVEhkSmxTVkdQcTFWRlJ4R1FPNnJ2UnVWRlJ6VkZSdVZGZnVWRlJ1TVBSdVZGVi9JMXBtVmxTVEJGQWJIUnVjSVNwNURGMGlCbHVZWEpnMUhIdDlEMEF5RXd4Zm95RGNXUFZrR3Z4eFdQMGVERjFGRVMxRk14YzFLeHhqVnhJZUlSSVBISFdITFJreW5TRXREeGdQRlR5enB4QU9ZSWN0RklFdEgyUmNERjF4bjJiY1dQUnpYRzVqQ0lqdUV3eHduU3VWbkoxZ01QeHhXUDBlREY0ZEx6SUhFSFNyQUlFdEdTTXNIMHVDSEhwdUNSTmVBR2tsTVBnaFZ3eDhHeHlWWEZ1VkRSeGpCSVNCRlFJcm9QY09Zd2toblNXekZhSXBGbHllcUlSOHB6QU9XMFJmcEZBcEZIZ0xHYVNPWVVSd0tSeVlJdzRjWlJIK0l6TjdKeGIySXdibURSV0ZWRlJ1RFFSaHBTdDRweFdFV0hJY0VSV0ZDUk94WFNnZkJ6RDlGMWNJWG0xUlpJNHVWRlJ2RXY5R0ZtTVhFRjB2V3o0akFSU2FBdjlpcVMxU0RHcDVEUDVQb1E1TUUwV0VXSEljRVJEZkowU1RYdnBhSXhTRklTSWJEeGdqQkhFVXBsMGpIUFJ1VkZWK1ZHajhYdldWWjF5eEJ4TXNZU0Q5QVRncllJdU5DUTh1b0hTSEh2eDdWRlJ1VnhMdkRGeVNHdmdQTUtFdEVGY2dKbDVTTVJPYVpIdWZxSUFqRVRNSEZtSGFMU2owQXpEeUJTdU5NUHR5RlAxeFhRcUhZdmdQWEtXZkRHcDVEUWJlRUhWM0NQUnVWeHFDRUlrZ0xLVnVZR05iSmxSdVdGRXBWRlJ1VjFSd1dsZjVweE1zb1A4L1hhV2ZCSE9TSnpnUktsUmdaUUVzVkZSeVdUTnVWRlJ3SEZIOEZQeWJFSlNsTDJ5VFhUTVlXeE43S21malZGUnlXMDk2Vkc0d0JRSHVDemdiRkZSK24ydXNWRzF6WUg0bUkwZmdKME96SnlSanJhYnVWSDQvV3ZSdld5MGVWRnRnSzJEdVlHMXlBRlJ1V0ZjTkRGMHlXeXVGTXh1MFYxQVZFeGdUVkdrTkV4Y09ZR0wvRXhXdEkxTXNERjFXQ3lrUExTcUpMUkw1WUZnTEV3eC9XSXRjV1BaeEx4dWNNVHF0R3dqOUhtV1RCRkVvbnhaYUJQTUVEMFdPR3l5T1lKMUpMMFphREZrWERGMXhuMmJjV1BEZ1gwUmhWemZqRVJOam95NVZuSjRkTVNXekZhSXBGbHllcUlSOHB6RGVvdlY1Q1I1WEZQdHZMR01XWlF5RUd4dDFLempkREY0bW5UcUZNeGMxS1JmY24zSUVDVVd3REZxT1lVUndLUnlZSlI1a0RGa2tWMWtXRjFMK1hHT1NDeU10QjFjWEF5SDZaME9WSVBSdVZITmtZYU9MQlVFVFhSZ1BBR0wrcEZ5ZU1QdXhweFN4WFBJWEgyRGJaRzVXRUlqM0NKanVZRjlVRkZSdVdGRVhWRlJ1VjFSdUZSSGZMbFJ1VkZTWFZKQXlMeDR1VkZ1ckkwSGVYekFrRVFOYUtsNHVWRlJ2REZFY01tdGdNUEg0SlFjeFcwRHhYMkQ5RzBEeUVJeGlCSDh1WUY5cEhQUnVXRjFMVkZSdVYwcUhXVE9PRFNrUHBIMGdLRkVGSnZ0OEZSRXNvUkx4TEpJY1oxY2lueU1TSkhjWUh2UmdZMnVIVkZSeVdTSHVWRlJ2Q3ZxdEtRRDJFSWJlbzF0dVlHTnZKRlJ1V0ZFS1ZGUnVWSGJ2TFRBVFZ2UnVXRkVaVkZSdVZ3NDBCRmovS0hJbkx3NXJWRjBqWXkwdVZGSHhLbFJ1VkZWK1gxRUFGMFdTSmFFWExQUjRBM1pjRElXSElKdVBHbTVoVzBTSEVUYnhFVHAzbklWdVZGSGFHM2J1Q3ZaNEFGUjlZMTBtVkc1VUhUZnVDSkxnR3dFSEUwdXJEVE1uSEdPNnJ2UnVDUVp4VkZWektGZnVYUDFzTVBSZ0IyT0RWRlJ5WHhPT1lGSHpKU1d6RlVEd0gwdVRGMEx1Q1JPU01IUmdBbVduSHpNWHFJa1daUFdTbkhSZ0RRdXBIek1WcVBNR0ZSTVlFdlI4Q21SeEVSRVJDS09UQkYxTXBQUjhEUjVaVkdrTkVKU1RCRkFiSUh1Y016WjdIMHQ5RUhIdUNROGtXUTFIRVVEMEZHTmVudlNSRFFPaEgweGpYMmJ1WlJIOE1Qa09ZVDlDWXY0am5JSWRZSDVUWVJ0eENUOHdNUGdDRlR0akYwTnlWSU9vRUtIbFh5NHVJeld2Sm1abW5GcXhXMTgyQVREYVgxeCtKbGNuRW1FQ1ZGQXpudjl3SkpnQ0ZRcDhHeGtURVVINkt3TmlXRmNaREdTYkJtV05JeGdrWEY5aW9QdXpCMkg1RHl1TnBJZ0JaUkVXTVEwYUFIVmtNMXFTTVF5YkRQY2xvUXlOTVBJT0t3eXhYU2dmQVREYUttdUNNUTVIWjNPbkZGZm1HSGdOWVJieEt2U0pGeWdCS0hiN1h2eC9CSlI3WG0xRElIT3hYU1diSkpEYXFTZ0dLeXRqQVFFWERsOWtwU2tQcEtSNUp5V1lvbDB1VkZSdnFGU3dNS0VIVkZSeVdTcHVWRlJ1RnZWZFlHQTFWRlJ5V1NmdVZGUnZDdmNsb1F5TkVJY2VFUzh1WUdOMEtsUnVXRkV0VkZSdVYxUnlWRmsxTTBJdXB6QWNEVVdWR1FTVEZ6OGpDdlJnQlNPWVZGUnVWRlZ6WUdXYkFGRG1CenVPV0hnSUlRdHVWRlJ2WWxSOENQYnZyYWJ1cGFWOFdQRG1aRkxlQXg1TlhKRVRYU09RSFBSZ0RHQUNWSHlDb0didVgxYmlXRlZlcFNJSFZGNHdLVVp2WG1SZENQUmtMR1IrVkh1cENTTnZFeGoyQ3ZSZUp3dGJWdmdqSUlEdVh3eGlDUVJhRFNEdVZIeDRXeVZ1WXcxaEdQUmhWMVJkVkZnbkJ5MHVuUU5rS1BTeUlIa0dWRmI1WWxwdVgxYmJKUFN5WFFXYVdRMWRZSlZ1TUZ0bFhGUnpYMEF0VkZ5Y24wdHdDeUVRSkZSdVZGUmVDd2NLcUZJeFdQeWJuekQ5RUo1Z01QdUZNdzl4WFJ5dEFKRDlDUTlvVjJrZHB2Y1ZBdzlnRDBNUnFHY3JaUDh5RHpxTkNROGFxSE1zcVNEdUVJajdEeURqQUZabUVIRVhwMFZhRUlrUkUzWnVWRlJ2REZ5bklUYjhYbTFESUhXeFhTZ2ZCSkRiRkpOK01QcWJDUDl4WFJrRG5RSTFCeDVYQlFBaEtSTHpMMTloWjBJclcwOGJWRklPVnlWdkxTWjVNUk1RTXhiMVZGUnVWdzRkcHpqNURSSW5uMEVzVkYwakFTOHVWRkh4TFBSdVZGQUVXd3lSRVRnU0xLV3duSE9qcDBBdkVGajRwbHlPSmFIaEFsUmdCU09ZVkZSdVZGVnpZR1diQUZEbUJ6dU9XSGdJSVF4dVZGUnZZM2M2cnZEbVpGTGVWSXFLWmxaMkd4TmNNUkx2WXdTZFZGMU9aMTh1RndjUUh2UmdER0FzVkpJSUdTWnVZSFI4SHZTWEJ4SHhWRjQwTDFwdUxsSWRKUVJtQ1NMaVZ2Z2pJbEx1RlNrVm9QU1hCeEFGVkYwekJKanVYMWIwRnZTd00zRUpWdnVKSHpMdUZJeHdubFd1TTBWYlZHa1NaRzh3S3pBSktsWnpDR3lwREo5aFlUWndFUVp6WHZWZENKT2pWdmdqSUlEdVlGTDVvUFJlSnhPQlZKQWNNbUh2WFNNcm52U1dKRnlnVjBBVkp2anVDUkhrQ2xBckwxTXNXUTVIS0pPRkkwY0xEdkVwRnhiaFZ6TzBWM0R2THlTYUl2UmdXd3lmVkZnbkdTVnVMMmdNbkZWYkl6Y2hWSHlNWTI4eFdGeWxaUFI4RUdSL1YxNXdJeTh5SXpqZk1UWi9XbDh1V0tFdW93VndEeUg4VmxBUlpsRUxWRjB6QkpqdVgxY0xJdlN3b0hrVlZ2dUtWS1Z1Rkl4MXBGRW9MUUgwVkdrU1pHOHdLekFKS2xNaVl5UmtWSHVYQ1RWdlhTcGFxUFNXSkd1bFdGVnpER0x1Q1JIa0NsQXJMMU1zVzFPeExtWnVGUmZqV0ZSZUp6cW1WR2tTWkk0dUZSV1ZYbEFxcFBNS1hRRTFJenB1WUZMNUlQUmNuSmdWWFJjcVhKYnVWRlJ3RTFOam9tWjNKdjFxb2xnWERsdXlGMkQrV1BBTE1RMXpvYUV4Q0l1WFd6cHpJM09CWVRreG8wTXhWM0l2S0pEYUttTGdNUHEwQVJNclZIOVpDMTFvQVB0MkZ3TjJBbFJtREhINUV3U3dBbU9BWmxNbEVIZmVIUnVjRzBNSkFTY0dWR3Ayb3lJbkZGRHdYMWZkSndqZERJQWVuenlRTDFxcW9GU09NSmJpVkZSdVYwcURaVHFBS0lnU3FHZmdLUU5lRFE0bUpsUmZJbVNkWFN5SVZGUmJEdjl4VzBEeFgyRGFJd05qWDBONEpVTmVDSU9JRzJEYUttdUNNUHFSV3lxeFcxdTFIbGdDSFVTZEtSWndxSXFYWlFqMEdKRGFaSjlYTVExSExsdGhBd3VJWHZTUFZsU1dWRlJ1VjBxRFpUcUFLSWdTcUdmZ0tRTmpZbDV4WFJ5dk1HT05DeHh2SkpxUVd3T3BEYVNlQTFrUVdRa25NUEExTHhIbUpsUmZJbVdZS2w1c1ZGUmJEdjl4VzBEeFgyRGFJd05qWDA5V0lISU1NMFppQVJjUVhGRUxGeGdGb0Z5Uk1GYjVvbGY5SFNJQU1QcGtvR0F4Q0hXSEh6RGJGSk4xTVEwOUJQWmdJSEVxSjBPa0tITHhZd0w0SUZidUR3SGdFdlJ1VkZBVUhRT2FHSTFvRUtIN1lJampaUDhnTVBwa29HQXhDSFdISlREOUVISC9FdnVZRHdIMkNhUmRaUGdERlR5SUV5eW1ZdlJ1QW1NaElJY1dXUFplSmxjbkNQY3hXSjh4SUpEeVp6ODdLdlNDVndTcFcxTVVZSXlhRGx4a0tSV2tJbGd4WFFxSENURGJGSk4vTVBwa29HU3hYUElWQVFBb1ZGa0taMHVucEladVZGdVBZMkRhRVBEZU1QcUpaUU5lRzB5V0RJNDhwSGd1WDA5V00wZ3JDVGNDQ3lnVFcwa1dZdmZ2V3dSa1lSeDZDekR3cFExVlp5NWpNUVI5bzNPU0FSTUtYUUlvVkdwM0ZKSW9FS0lHQUk0dUcwa05GbEVySzFaaW5TWjZCSUQ1cVJ0YklReDlLMHhrV2FSNkgyRHlZMDllWDA5RE1KTU1JU0wrRnpEYldIY0pNUTFQSVJiZUpQWmhYVERiSjJrT01RMVBJU3V4V21jMUd6RGJYUWNWRnk1Ulh5cXJDVGJrQVN5SldITjJFSXlYRjFWdUJRcUtFUUkxWFFPUkIxTVJBMGIzQlE5ZUJ2V3NuVGNoRXpPc0pSZnVWRlJ2Q3YwbVhsQVVFSWdycVRwdVlHT0xubFJ1V0ZFMFZGUnVWdzRtSTBmZ0owSXFueFp6VkYwa0NGeHVWRkh5WHZSdVZGU1hXUmNVS1Q5UEhGSUhwUlNIREpTZFZGUnlXVFp1VkZSdkN2MWNMR0lXRUlqeVpKYnVYeUVNRzBBWkJsdGJESUVTV2xWeVZGMGRWMFIzQkhPc0VIdURuR0lWVkdTcVYwTGJGMFYxRFNwZ0YzSVNGU09jQUh0dVpJQXdFVE1qWEhWL0p4WjBWeEl4QnpxakRVT21EMldTWVF1bVhIU0hES09pVkZSeVdTOHVWRlJ2Q3ZnaW5TRVFNbE0xQlBFUG9RY1NLUFJ1V0Z0aHJ2UjlZMk4wVkcwaUxRRHVDRjlxQUZSOVkxMG1WRzFPbkdIdUNGOXFBRlI5WTEwbVZHMU9uR0h1Q0Y5cUFGUjlZMTBtVkcxT25HSHVDRjlxQUZSOVkxMG1WRzFPbkdwdUNGOXFBRlI5REp4MVZHa2xJSHA2RHdTTnBUcGFFUElnRVA0aFlLVi9KUnAxcFJJTUtTcUhWRjBpb3lMdVZGRGtaUnFOTHdJZ0VKWjJZMEFPSVJFekxGUnVWRkFFVnhIaUF6Y1JGbXVSR3ZSdVdGRUdWRlJ1Vnc0ZkF2NXFFUklvRDJXeFZGMGpHVHB1VkZIeG5sUnVWRlYrWnc4bUt5cVNLSDhrVmxSZ1pHRHpWRlJ5V0Z4dVZGUnZDd0lmS3prdkVJOXdKd3R1QlFxcUxtOW5XbWNiRElXT01KVmVJUjFZRHhJbm4wRXNWRjBqQVM4dVZGSHhMUFJ1VkZBRVYxcTFwMFdPQkhFclZ3RWluMXF0VkYwNXAzWnVWRlI1WHZBRUpHVjJWd2N2THc4dkNQSDlEdlNLTFE4YVZJcXRGbGZ1STJOL1dsU2xYS1pnVjFIYUZURHdIMVdXR0ZBRklKdVNWMVdJblJad0h4QXBMUEFFS1JnaVp4RVZvRzVPR0pFakdtVmNId0FaRFFjYkN4MG1ESDVWR21Td1kyTHVaeEh2cVVIbEZ2MU9KUVplSnlwa1pUTVpvSHVPWnYwYnFHWnpDdnhjRFFjQUF2Y05IVDkxV3dPZVZGRWxaR1I22gVwbGFpbtoAKQFyJwAAACkWWgljeV9sb2FkZXJyAgAAAHIDAAAA2glFeGNlcHRpb25yDAAAAHIFAAAAchMAAAByNAAAAHIKAAAAchAAAAByEgAAAHIWAAAA2gNzdHJyIQAAAHIcAAAAciYAAABaB1BBWUxPQURaBE1PREVaCFNBTFRfSEVYWgdLRVlfRU5W2gRjb2Rl2gRleGVjcggAAAByCAAAAHIIAAAAcgkAAADaCDxtb2R1bGU+AwAAAHMiAAAAAgEUAQwBJgIIAwgDCAMIAxIDEgcYDA4IBAEEAQQBBAISAQ=="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
