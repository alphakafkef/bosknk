#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYdAfAABuS1dQV3ljNnJhYnVWSDQvV3ZSYU0wMXVWRjA4WElmdVZGRUNaUlJnV1JnVkVQQWdNeE51Q1E5TFpIUmdZSVNZQ0o5bEFRcU9ZRjFFR1Exald3YjRERjBnSEgwOXBQOU5CSFJnQXlxQ0VQRVRZMGJ1Q1E5TFpIUmdZSVNBQ0tOaURReU9ZRjFFRm0xaXB3RDNERjBnSElOOXBSY0ZDUlJnWUlTRUNLT0dKUTFPWUYxRUh3MWpLVFNWSVJMZlptRUhMUnBpbzBSZ0ZQMVNERjFFWjBxT1lJYjVGSFJnTG05WURGMWZFSDFPWUtJWUcwUmhYSVNFREY0bEkxQU9Zd2dxSUhSZ29SSUNERjF3QzFTT1lJUm1IUlJnSnd5RkRGNVJMMU9PWXgxY0owUmdIR0FDREYxd0MxSU9ZeU1pS3hSaFp5cW9ERjVBbkg5T1lJUm1JeFJoSzNJS0RGMXdDMXlPWXp5Uk1SZ1NZUU9sREhmL0RscHVDUTlvSFJSaVd5QXRIek1WcVFNT0ZJeGVZMUFWRzFTVUNLWnlCM0FPWWxNR0xTV3pGVUQzREh5TVhsOUdGUjlFRW0xbVl4U0xJUnVGblM1SExScGlvMFNZQzBaYVZHai9KbUVIRlNXYkt5RXRFbDlpREY5WG5VT1lFRmprVnhSaUtVRTBGMEhmWkZBT1lVTmdESEF1Q1FSakR2eWZYeTFPR1Fja1lIZmNveE4vQ2FPQklQRU9HUHh2Q0hTWXFTOGVHd2pkWm1BT0dRRHVWSFNaSlFnRlZHai9KMWdIRkljcUJGUjhER1dyRUhTUlhIODJuSTVaV3cxMFhsWm1JUnl3TG1idUNSUmxLeElTb0ZBSUIxY1hBek1lb1FjcExQUnlEVVp6VmxwZUJKMU9BMTF4SXY0akJQMGVFek9iRVA4a255SGpJSE1TRVJjUVoxa0JZdjRpb200aUhIV2ZBMmIwRFFnaXBVSU5weHRtcEhPSUkyV3JGUUFNRHo0ak1hUmpFeERqTDBMZUN3ZjRaYVJqb1FmMERGeXhDdkVNWkhxS25SRHdCRjFmV0dEd0JTZmpGUUFNRHo0ak1hUmpGeERqTDBMZUN3ZjRaYVJsWTFXTEVGeXhDdkVNWkh0YVhLVndCRjFmV0dEd0JUcDBGUUFNRHo0a1lHcDVGMERqTDBMZUN3ZjRabFZsTXdBZEZseXhDdmNMQVBBWVhJRGpGbWtpcEZaNVlKanpBUFo0SlA5VloxeVBvd1JnQW15WkVQNDhIUnE2cmFidVZGUjhYdlJ1VjBPeFZGUnlYVE51VkZSdkRQUmdER3BsVkZnblgxTnVuUU5rVmxTeFZ4ajFWR1N1QnhwdUNSSGtEdlZpVjJEZ1Z2OGZLM1Z1WUhSbUtsU1pudnR2Vnhid0lIdHVDUkhrRHZWaVYyRGdWdjhmSzNWdVlIUm1HbFd0cDI5TVZsSUZwMGp3S1FEMkhsU3ZCMXVZV1N4akpsYnZMeVNkSWxSZ0RHMDVWeEFrSXY0dUNSSGtEdlJnREdibVZGZ25BU1p1blFOa0tQVmVwU0lIVkZnblhQNHVXSFNOSFJNSEl5SVJWR3hqQXdPVE1KOGFDUFI1WlFJaW5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RLbEliSkhjdEIyOVRuSk1pVjFXREtsSWJKSGN0QjI5VG5KTWlWMVdES2xJYkpIY3RCMjlUbkpNaVYxV0RMSlo3REdTVUt6cVFaSXV5SHdXSnFJU3lxVHl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXp5em9sQUZIUzh5blN5WExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXp5em9sQUZIUzh5blN5WExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXp5em9sQUZIUzh5blN5WExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXp5em9sQUZIUzh5blN5WExRZ2lFenl6b2xBRkhTOHluU3lYTFFnaUV6eXpvbEFGSFM4eW5TeVhMUWdpRXh0bUN3T2VaVGo2WFVEMkIwa1lGR2NNRTNFcUQyeDhNbFI5cFF4ZUxSV2ZvSjljVnZiaHAyT2FXbVZ5cUhFWUYwdGtDUEhocHlWdkVRV0ZuSE1QSDJrTUVUSW1DbUVUV211dElIQWJKMDh2TWxwY0hRY05CeDVkcVBabFpRTHZFSldIRUdJYVd5dUZwUFNRcVR5VkV4RDFJUHFhV2x5REF4U0dWMnR4VklxS1psQUtCM09sRnZSdVZGVitXR05nREY1a0MyTC9ZSEFjbnkwZURJQTFWSFNhV21WdnBSRVhudkRlWUg1VFlSdVNxUDhqR0ZSdVZGMDlWRzFPbkdmdUNIU2NGRlI5REpjWFdKTXdIbU9WWmxrbkRSTUpMdkFMVkdjbkhST0RHMU5nWElwNkF4TitJdlNtcEdjSFhQTDdBU01xS1BBUUV5SVhaUmp1QnljRERSMHZXVUFtRmwwbVphRWFXbHUxV3hTRklTSWJWR2o4WHZXNnJ2WjJBVE5iV1Faa1d2ZjJHeE5jTVJMYkN3Y0NWRmduWDBOdUx6dW9MUFNXQ3liZVZGajdHMEx2WG1SZENQUmtMR1I5VkhNMUNKMHVMYVN4THZTdG8wUitXVHlqQ3Y4dVZGYmJXdlJmSzJ5ZlZGNHlBMWJ2WG1SakRsV1FwSWpqVkhNMUR5TnVZYUQ4RXZXUXBKVmxWSE0xRlNWdVl3MWxubFZlWkdBUlZ4QWtuUUR1RWFJUEhQUmhxUWtUVnhBa25tSHVFYUlWSHZSaENLSWZWeTg0VkpwdVpINTBKdlN5SUhrR1ZGYjVZbWtkQlRMMUtGUnVYdnRrV1VFWU15dHlJdjBjS1BMOUxUa0NWSHgrTFAwdVlRZ0NFdk1JSlNBWFZGZ25LbUh2WFNNUUp2U1RxSmZhVnZmNkN5WnVZVE5sRWxSdVh2cHdWRmNZQm00dUtUU0lMdnFGSUZ0dVZKRDBIdmJ1RlJmaldGV3NCUTlrVkdTQnFTYnVNSUlaSGxSZUp6Y2dWR1NCcVBSYkhsdU1JdlphQnZBbFZsdWZwU3B1WXZBaUFQUmxXMDhmWFRieFZ5TnVYMWNtblBBdlhUcGNYSU55V0lWdlhtUjhYdlIrTHpSalZHa1NaRkh1WVRObEVsUnVYdnB3VkZjWUJtNHVLVFNJb1FIeUUxSW9WeTloWHk0dVpSTjFXR3lFSUhxWVh2NGhMSUh1WkpSa0VQUjhFR1NQVnk4NEpQRHZNSWJqcEZSZUpsa2FWRkFVSTJMdUNSSGtDUElLblRndlh4eVhXUGJ1SnZ1Y25QUjhFR1JhVkZrc25KanVYMWJiWXZSeUR2U3ZwRzliRFRFT0lSV09aeFYwSktEekRRZzFCMGJ1WEdxUEpSV2ZXSUVpWlA5TURReGVDSGo4WHhFV01TZmpFdlJlQVNwZUN4cUVXd09ZSUhBUUVSeXhNUGdQbmw4K0RRT1lJSEFGRHowOVpsYmVDeXhnWVJNc0hTYnpaUVdNREc0ak1JTjBCUU9YTHhBUFkydXlxUXAwVkd1dG52NG1HVDlrRUZqNVhKSU9IeWo3RlJMK1YwamdaeTlWb0hIZUNIZ2ZId2pjV1BIN1gwRXZMdjFPRjF1WUgwT2xXUFJtWDBXU1d6OVRYVDlFWkdOaUhRYjRYME9QTTE5Uk12cHpDR095cVNIOVpSYjFBbTRtREpOL0ZHT1ZMRnhoRFNNWUpUeGVEdnlxS1JOOFlGcDRadnlOWlJEa0ZQRU5xUkl2SVE4ZUMxQXVIVDRrTHk1b1lHdWlvS09PRDBwaEQzTmpGVFJmV0hNUFZIOGNESDAyTHlWMkJ6Y2RDdmdORHpxQkVSY2RXUEhqQUZabURIVjFFUDExRDJxYklRWjJWMTV4Q1JON0lTVmlFeEhsWEdBUUxUMGlYeEhkb0pEdkVKQU1wd0lSRVBjeVdsOWNZUGYzWDBONkMzU09IUk53SFJON0YwamhESUFsSXlxVldQU0lNSE1zbjJnekVUSHVaMmtPR0dxSkFQZ09xSkF0RHprTm9SVjRIU0lQbzBIZktSV25aUDgxWkhOakZUUjdBSE44WUYwNlpUSURDR3htREZieFltTHdLekVSRElFUm52Z1JNdjRtTEdWYk0xZjdaVER6TXY1VEQySTFuMEVXSm1NbkRJV3FNM0FPSVQ5eUNRWmVBU1NtRFRrT0kwMVBISVovQlJMd24zWmdFMFdwQXpPVEVRSUJBUkV5TTNENEVUTHlZSjBoWlF0Z1lIV0NxU0lzRElFUm53amFBekh2cDBON3BRTjhFek9KWVFwaUhsTVRBME43WlI4eW4ya1FMelJ1WXZaN1d3Z1dwbTlKRVA5U252SU9BdlNwS3hJc0dRU2FFd2tNTFBmdVZGUnZFdldzblJnZVoxZmluMDhlcVNaeElQeXhDdkVNWkhxQkxRSU5CeUlZS1JMYkYwVmpEUWdISHdiZUR6SWtZbU9YRW1SM01sTUtwbWZmSElXZkV3T1hNUWdqWkpBRkYxSU9HSVd4SUdTdm5IMTBER1dWQUlNTkhVU0lHd1JmcEdSeFowTUxudkxtWDF1eFdSUmxXSVpkRFFJUkNIdGpGbWtFVnhOMUJKeUhaME1McGxnT1psVmRIR1d0WjFTR1pUTUlueE1OSFMxd0YwT2pwRnlYWnh5cllSNGpubHlqb21TVUxTQTFESVdvRnlWa1pINDZIbVdSSHZTUURINGNHRkxtREpPTFdtVmNKbU1WWnh5eUlGdU9BME9SSVJTR1ZJQUVESVdnSXlEbE1HOVJKUVp6R3g1QVpKcWxCdk1OQUhnbFZ4T2tBbWdBWlJma3BSNGtZUjVCR3hOMldQTUZabE1jcFBrTkFKOWxHbVJrRUdwYlpsZ3ZYdmprR1N1ZFh3U3dJUExlWnhFcE12U05vU1p5WW1Pekd4NVpaeTlORG1EMldSdGJHR2dYTXlSNUQyeGNwbWozQUlnYll3NHpBYVZiQ1JTV0tJeDRvenVUSDBBQ1d5dHdCbHlSVkhmNG9hU1lMR3VoblB0ekExTTFDRlI4RkZJc0ZRcDFBMDlnQTFNblhsNDNJeHFERDBSNEUwQXRCbU9Nb1B4K1d3TWxYUXFKSFNNUkJKTGdXVHA5Skp1S0x2OWJNSjRtRlJTZkMxT1JYUzRnRnhXZldIZ2ZFVEV4SUZ0aW9tNXRIUldlWFNXekQyY05KUnFSSzBJaFd3T1lCelNPWG0xWW8zRVJGMUhrTGxnUEJ4Z1VBdkFaQVNXUk1JcXRYR096WFQwMkRRamZLeHQ3WUtFRG52OUhZU2tzRDJxYkV2cDBWR01hTEcxTVpta1paRjAySUhNVEsxT25Xd05rS1RqMkJ4Y21GeVY5SkdaOFd3UmhYMjh3RXhJUFh5U1FFbDVXcHdPeXFSTjVaSHBrRXdxTkIwZ2dweE4wbnhxMFkxRVVvMHlOcGFINlcwTDlESXVPRlFFTUNTU1RFSFZkSVJTSEJHZ1JEempoRXZXVExTOWpCMExiRHZMOEVsSVVLR3VQb1JPZ0JQRU5WdjVTRXcxYklTU1FHVVNRWFBNVkVUSGxGUWZpVzNPVEVVSDZLd05pV1RTRUR6SXNHVUVSRmFBRUFSTjdGSDRkWTFXdEZHT1RYU2ZlRkhXZXBKcGlEMDVzQ0c5Uk12SGhCSHFOTHlwelpRTUhXbHFUTFB1aUFITXNYd0QvREdTa0VsZ09Iek1aWW1JUElKY0xFSHVEbkZXUG5tT09CU3FsTFF0eFlHODhKbWdUS2xrS0JHOW5LSTViQzF4MENLQVJYd2dEbkYwK01RUmlEemdRcFVFVERtTm1XeEl3SktWMUVSeDJvSmtPQTFnaEptU1VEMkVQWkZmeERSZ1RFUUgyVjBTSElGcWNaek51QXhMbFhKMUJHbVdSRkZjUllHMVpubUQvSkpiaE0wVjJEU3FrREg1dUZIVmdDSGtlQVE5bkt5VjBESDV1cFJrU0xsWjJXUDArRFFSY0FTYitaeVZsTFBibUVHU3dZdlNQWlJjMEcwVmxYRkV1RHYwOUt5NTBFUmNkV1BIMEswY3BHMFYxRVAxMUQycWJJUXlPQTExanFIT2tEdldiRlBBRkNJdDFxRnVFQW15QkpQSW1EMnFiWjI5VEt5a2lvbUVybkhPTER5UnlwbUwvSlNnUkpRRXJuSFNYWnhFeFZ2OG1YbURoR0hFeVZHQWZESDV1RkhWZ0Nta29DSEV5cDFSOER6a05vU05qTUpXRkRQNURMVFYrWmxFbEhJOU9IM0lMV1JXZVpSUjhabGd3TFFMbFl5NVBaSE9FWUZaeERTSWtGeHFUTFFjZlZ4TVFNSnB6RElFUm52Z1JNdjlpb1JFeVh4SVBaSHFyS3hIakZ5dTBMUk9lcFFXZUR6Z1JXbGdOcEd4NkxHRXJNbGNMWjBSOFowdGxYUzVJQ0dWaEJQcWhaVEllSlE0bUR3dXpHbDlBcFRrZ1psZ1RKUjhsWXhjWld3QU5CVE1nRXZxY3BsU1BBRng2V0dFcEJSZzBFVE1xQlQ5U1gzU1ZubVNURFFBTEVQNUdXUUFSRkowam9ITjdJU1Y5QXZEeExIZmZwdjVrSXhONnBtcXVEUWNJS0tTU1gzU1ZvUVp5cUlnYkRRamdEbE1PSVJEZ3FIU0dBSTVrRVJJSUhKcGdDSGtRRkhxT1pJYmFZRzFhS1FXUG5sdXJLSFdlWlJPd1pKWnlXMHhqRnl5Q0RRWnpDU1NIWmxMZEVIampNeTVHVkhMYW52YnlFSkFNcHdJUkVJRXJaRjAvR2FaOURJSDRCR0VPSHhXTk14U2luUjhkQVN5cEkwMGpGeE1icDBTSEVUYmVFVExpbzJrUk1GY1NEd1NVS3k1U1pSY0xxVE9TWVMwaldITjdJU1Y5RVFONW9tTU5wVVprbkh0dUx3WnpZRzFaRFRjVVdIcXFCUldmRFRrRFpIcXJKUlppbkZXdnAwU0hFVGJlRVRMaXBQV05CMUVGQ0dTVUt5dVFZMnh2THpTT0lUdXdxUlNGREo1eURRZ3FJRzA0QUhFMUl3Z1FBdzB4QzFjWUt6Y1BvUk9mSFF1RHBUcUlFdngrSW14MEt6TW9GeFNIblRBMERJV1BEMjFOQ1E4ZVZ4SXdWS0FYRVJ5eE1QZ1BubDlFVnhNc0hTYnpDMWJiVnZxTkl2cUZEbVNVS3l1UVkyeHZMejlPSG1JcnBIRVNJSVNhWUcxWkl2UjBKSWt0R1FPV0QyMXNBU3lwb1I4a0UxSWFGUVdTWjFFUlZKUjFuUTFSTXd5U1h4U0hHSmpjVkZSdVZ4THlueHFzWW05bm8yY2lEemZpRVJnVEVHV0FCUnQxQTB0YlpGMDNCSHlSWDBTQUswUmpDSmtoRElFUkphQVJZeU91R3hNdVh6a3hWRlZnb1ExdU13TVlYeWZmRnhXV25IOHdCdkRrTEZ1dkxJQVNMMXFabkg4dkR5OVhaUWthSlNaenBJa2JKbFo4b3gxR1hIa3RCVHlDVnhrQVhta0pNUmplQ1NNeEdUeWFWMU12SEZNMFZKY0NIRnlDTUp5YVYxTXZIRk0wVkpjQ0hGeUNNSnlhVjFNdkhGTTBWSmNDSEZ5Q01KeWFWMU12SEZNZkNLUmVDU014R1BmOEl6SGZCMlNkSGxrY012dHpMVHlhb0hPMEFJMWpGUXB1VkZWaVdTQW9ZMXlVWG1rSk1SamVDU015QkhxalhGZmRKR3g3blVTbkF3V1JGUkVYcDEwZkVGZ21abFdSTXZwenBSTjZHbGIwSDFmaUpIcGVDU014R1BmOEl6TXhIRk0wVkpjQ0hGeUNNSnlhVjFNdkhGTTBWSmNDSEZ5Q01KeWFWMU12SEZNMFZKY0NIRnlDTUp5YVYxTXZIRk0wVkpjQ0J2RDZIeFdFSG04NEV2QWVwbDFOQjI5akFITVFNd3h2RHdMeUVLRGlvMU93RG1OMEZ6Y09GUUhpWElBT0gzSHhISFNIR0tOeER3RUxCbWdQRzFSdW5IV2VaUlNFVmFEdkVscVVLSWJjcFBMakx6dGpDMWNpbno5UG5sOVJGMFNnbzBrbURJSDFBUUgrQm10bHBHT2ZCR013REdOOW9UNU9JUkVucDBEaEhUU0JYbTlLb0oxU0kyQU5EdlJkSVM5QkV4QVBCR01UVzJ5eFh4VmhBUVdPVjExdUYzV1RLbGtLQkhMMHBTOGlESUVuSWw5VEQyTXFDSnB6b1JEOEVKNUlLUWtTWVF4MlpISUxaeXVUVkZjSEdISVJNeTR3WFBWZERIdW1NbE12cUZSOXBQOUdLSEV6WXZSaU1sTTFIUTVPSVJFelhQUnVWRkFFVkhxUVh6cVBvUXFCTVBTeFlsTGdWSHVBQzBxVExTTGZBbEhqWUhSaEVJdXRWSGZ1WUY5REdQUnVYUzVzRFVTcUV6T1FHUWYwWHhTSEVTY21FUDVETEY0dVZGSGJBVWJ1SlA5QlhsU21ZMGdPVkdrbEhGOHVDUjQ1REZSL0JsZ0VWR2tsSVBqdUkyeVBYUFI4SWwwelZtTVRvbDh1Q0hTY1lsUjhJbVpmVnlIMHFHWnVDSUExQ0ZSOEd3OGNwd2tCSW1MdUNSNDVGRlI5TXZqOVZHMXpZUnB1TDJNTktsUnVXUmppcmFidVZGUnVWdlJ1VkZSYVZGUnVWSkR1VkZSdkNtSUVEMkF1REYwekN2cU9ZRjA1RVJnU1lGeWpERjFOR0paMm5JOWNDMUV0RjFTT0ZRRDBvVUFWbklBeFZ2UjhDbVJ4RUdqeFZ3NHVDUWpnVjBMNUMyMWRGbHllcUlSOUlSSVRER09TQ2x1Z0RGa2lHbDRoWlNxWVZsUmVIRkRqcmFidVZGUmFWbFJ1VkYweVZGUnlXbTh1VkZIYUlsUnVWRldWVkZjall6UnVGU2o5QWxTVHFHVmJWSElZWkZEdVlGTGFHdlNTWTNFV1ZKUjJudnRrWVJBdUVHV1NYeUVJWlNTUkIwY1NMMkFHR1JXZkRVWnVFdnVPb1VTUEhSMDlWSHQvTFVTUURTcHhXU3RoWlJSbVlISXVMVHlsRVRMZVp3RU5wSTF4cFJPa0RQdWRNbE10b1NrYVd5eWlZdkhqWUhSaEVJdXRWSGZ1WUY5REdQUnVYUzVuQVJEaUFIQU9JRkxqQW1IekJ3WnVWR2NqWlRidVZGSDhueFYwSktBZkVKU3VXbEQvSnpxVFdSSXdZUWp6REgwZ1hJMVJNRlJtb1JMeEJtWjlEd0VNcDJrVUtHcW9NSmdmS2FFeFZGSU9XbHh2RVNNZG5SRUpDd3QzRFFncUt6dWFXemp6WVJNU1kwdGFWRlJ2RTBnU0p3RTFKRlJnWTAxWVZGUnlXUmZ1VkZSdkN2SVlGUmJpTWx1TnFQOVJGSjFjcDBNUU1KcHlFdnVZRHdPTkIxRUZudlJ1VkZWL1dRWmtXdmZ1VkdBMUNQU0tMUzBrVmFOekxVTnVWRlJ3TFJSZm9TRGpZd040WUZrVEQwVm1XeFNISVJPRUNLT09GeGdSTXdPbkNSSUtIR0VOVkd0M0YyMVRYSnUxcEZSdVdGRXNWRlJ1VnZMdkVKSWRXUlI1V0pXRFZGUmJLeUVUWHlNYkZGRUJHUDhmQ0tPekZKV05JSlNOcHhxUEFtNDVNbE0xQ3dJT0lQRG1Xd01YQjB0OEVJdVJNUnR1QlFxVkl3MWlwRkRmTWxNTVYyYndvVGNsWHpwekpVRHpWSForRUc4M0VtcXdBMnB6SlRIdVZIRGJvMEw5SFFreEV6cHpKVVJ5VkhMdlpJdDdNeXFQRmxSdVhTNUpEemozb0dFVER5QWNuSEV5bktOeUNKOWtCVE9hV21XSkVSTGRYVUhrRUljTUJTMHVZR09GbkZSdVhTNW5FeERmS0ZnTkJ5dGJuSFdPWHlEMER5U05KejFPQkdXd0NsUnVWRlYrWVNTV014SWFXbVNBbkhJdlkxY2NNbE1uQ1Jqd1dHZ1duSFNHcUZMMFZ6T2hMMjlTTDJaOUdGUnVWRlYrV0dOZ0RGNVNKVE51RmxSZ1kwMVlWRlJ5V1JqdVZGUndIRkFLcUtBUERHeVJLdlYwbzJnS0xQUmdCMWNCVkZSdUVGNHdISXhsWmxBRUpHNDNWMVNNWndad0hJeGxabEFFSkd0MlZ3eU9JbGZ2QkhTS1hsVjVESXBlVnd5T0lsZnZCSFNLWGxWNURJcGVWd3lPSWxmdkJIU0tYbFY1RElwZVZ3eU9JbGZ2QkhTS1hsVjVLVUg4VmFOZkZ3NGFFSGNDREZXalZsTDBWMU1uR0p0d0hJeHpZbEVjcFRWN1dRWjZIUXh3SEljaER3V3NNUUFXWkZqYkh6OGpNd2tZR3dWaElHTmdaeEV4WUtIak14SUJIR1JmR1RTVVpIa2xBMDFOQnhJc1dIT2VLMGtZWkp0ekJ2RGxMUGJtcUhTQkNITmxaekVqQkY4bVd2YjZWbVdTQnQ9PdoFcGxhaW7aACkBcicAAAApFloJY3lfbG9hZGVycgIAAAByAwAAANoJRXhjZXB0aW9ucgwAAAByBQAAAHITAAAAcjQAAAByCgAAAHIQAAAAchIAAAByFgAAANoDc3RyciEAAAByHAAAAHImAAAAWgdQQVlMT0FEWgRNT0RFWghTQUxUX0hFWFoHS0VZX0VOVtoEY29kZdoEZXhlY3IIAAAAcggAAAByCAAAAHIJAAAA2gg8bW9kdWxlPgMAAABzIgAAAAIBFAEMASYCCAMIAwgDCAMSAxIHGAwOCAQBBAEEAQQCEgE="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
