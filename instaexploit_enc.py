#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """4wAAAAAAAAAAAAAAAAAAAAAIAAAAQAAAAHPgAAAAehRkAGQBbABtAVoBbQJaAgEAVwBuMgQAZQN5RgEAAQABAGQAZAJsBFoEZABkAmwFWgVkAGQCbAZaBmQAZAJsB1oHWQBuAjAAZANkBIQAWghkBWQGhABaCWQHZAiEAFoKZAlkCoQAWgtlDGUNZQ1kC5wDZAxkDYQEWg5lDWUNZQ1kDpwDZA9kEIQEWg9kG2UMZQxlDGUMZQ1kEpwFZBNkFIQFWgFlDWQVnAFkFmQXhARaAmQYWhBkGVoRZBpaEmQRWhNlAmUBZRBlEWUSZRODBIMBWhRlFWUUgwEBAGQCUwApHOkAAAAAKQLaB19kZWNvZGXaEV92ZXJpZnlfdW5tYXJzaGFsTmMBAAAAAAAAAAAAAAABAAAABAAAAEMAAABzDAAAAHQAoAF8AGQBoQJTACkCTtoGcm90XzEzKQLaBmNvZGVjc9oGZGVjb2RlKQHaAXOpAHIIAAAA+hE8dWx0cmFlbmNfcnVubmVyPtoGX3JvdDEzCAAAAHMCAAAAAAFyCgAAAGMBAAAAAAAAAAAAAAABAAAAAwAAAEMAAABzCgAAAHQAoAF8AKEBUwCpAU4pAtoGYmFzZTY02gliNjRkZWNvZGWpAdoBYnIIAAAAcggAAAByCQAAANoFX2I2NGQLAAAAcwIAAAAAAXIQAAAAYwEAAAAAAAAAAAAAAAEAAAADAAAAQwAAAHMKAAAAdACgAXwAoQFTAHILAAAAKQJyDAAAANoJYTg1ZGVjb2Rlcg4AAAByCAAAAHIIAAAAcgkAAADaBV9iODVkDgAAAHMCAAAAAAFyEgAAAGMBAAAAAAAAAAAAAAABAAAAAwAAAEMAAABzDgAAAHQAoAF8AKEBoAKhAFMAcgsAAAApA9oHaGFzaGxpYtoGc2hhMjU22gloZXhkaWdlc3RyDgAAAHIIAAAAcggAAAByCQAAANoKX3NoYTI1NmhleBEAAABzAgAAAAABchYAAAApA9oDa2V52gRzYWx02gZyZXR1cm5jAgAAAAAAAAAAAAAAAgAAAAQAAABDAAAAcxYAAAB0AKABfACgAqEAfAEXAKEBoAOhAFMAcgsAAAApBHITAAAAchQAAADaBmVuY29kZdoGZGlnZXN0KQJyFwAAAHIYAAAAcggAAAByCAAAAHIJAAAA2gRfa2RmFAAAAHMCAAAAAAFyHAAAACkD2gRkYXRhchcAAAByGQAAAGMCAAAAAAAAAAAAAAAGAAAABgAAAEMAAABzQgAAAHwBfQJ0AHQBfACDAYMBfQN0AnwAgwFEAF0gXAJ9BH0FfAV8AnwEdAF8AoMBFgAZAEEAfAN8BDwAcRh0A3wDgwFTAHILAAAAKQTaCWJ5dGVhcnJhedoDbGVu2gllbnVtZXJhdGXaBWJ5dGVzKQZyHQAAAHIXAAAA2gJrYtoDb3V02gFp2gFjcggAAAByCAAAAHIJAAAA2gRfeG9yFwAAAHMKAAAAAAEEAQwBEAEaAXImAAAA2glVTFRSQV9LRVkpBdoKcm90MTNfdGV4dNoEbW9kZdoIc2FsdF9oZXjaB2tleV9lbnZyGQAAAGMEAAAAAAAAAAAAAAAJAAAABwAAAEMAAABzZAAAAHQAfACDAX0EdAF8BKACoQCDAX0FdAN8BYMBfQZ8AWQBawJyYGQCZABsBH0HfAdqBaAGfAOhAX0IfAhzSnQHZAN8A5sAnQKDAYIBdAh8BnQJfAh0CqALfAKhAYMCgwJ9BnwGUwApBE7aA3hvcnIBAAAAehxNaXNzaW5nIGtleSBpbiBlbnZpcm9ubWVudDogKQxyCgAAAHIQAAAAchoAAAByEgAAANoCb3PaB2Vudmlyb27aA2dldNoMUnVudGltZUVycm9yciYAAAByHAAAAHIhAAAA2gdmcm9taGV4KQlyKAAAAHIpAAAAcioAAAByKwAAAFoDc3QxWgNzdDJaA3N0M3ItAAAAchcAAAByCAAAAHIIAAAAcgkAAAByAgAAAB4AAABzFAAAAAABCAEMAQgBCAEIAQwBBAEOARYBcgIAAAApAdoRcGF5bG9hZF93aXRoX2hhc2hjAQAAAAAAAAAAAAAAAwAAAAMAAABDAAAAczoAAAB8AGQBZACFAhkAoAChAH0BfABkAGQBhQIZAH0CdAF8AoMBfAFrA3IwdAJkAoMBggF0A6AEfAKhAVMAKQNOacD///91IQAAAFNIQTI1NiBtaXNtYXRjaCDigJMgZGF0YSB0YW1wZXJlZCkFcgYAAAByFgAAANoKVmFsdWVFcnJvctoHbWFyc2hhbNoFbG9hZHMpA3IyAAAAWghoZXhfaGFzaFoEYmxvYnIIAAAAcggAAAByCQAAAHIDAAAAKgAAAHMKAAAAAAEQAQwBDAEIAXIDAAAAYZghAABuS1dQV3ljNnJhYnVWR2ptV1BSYU0wMXVWRjArWFEwdVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYweEYwYjlvM1YwQTBSZ1dSZ1lDS056Qnd1T1lGRVlHUTFqWTBONURGMHhGMDA5cFF1VEJ4UmdXUmdCQ0tPT0dRZ09ZRjFFSFJEeEpRZ0JWR2ovSm1nT0ZGYndKUlJnWjFNWEZseWVxSVNPRkdXaUh4WmJWeU9IWFJXUFcycHVDUTlvQjBTV1h2QUxERjFTTHhrWVhKZzFISFJnSElTWkYwSGZaVFNPWUpBcUhSZ1NZUU92REYxMW5JRVlFRmpqTDBSaFphSUxGMEhmWlRFT1l4SGZLUmdTWVFPeURIYnpFMlNRRHhTQ0hSU1dwMHlpVkdqL0pRVjdKeGIySkpnZkJ5a3RWRng5cDBFYVdhQWZMUkl2WlNONkNGdUVaeXVSTXZwell4TVJuR3loQnY5dlgxdDNvMEVLRkZnTklINWlEMng5V1FPVEpLQU5XbFJ2WXk5cEt5YmNXUHFjblI4NUZ5SUpFMk10S3liY1dQcWNuUjg1RnlJSkUyTXJJUlNmSTFjY25SODJGSUlJSVFNTEd6OVZNSGNjblI4NUZ5SUpFMk10S3liY1dQcWNuUjg1RnlJSkUyTXRLeWJib21jY25RU2JLSUVGTGxFakZ4SHVBSU9jblFTYktJRUZMbEVqRnhIdUFJT2NuUVN6WTJ5YkdteVhJSU1VTXpPckp2eHhXMnliR215WElJTVVNek9ySnZ4eFcyeWJCbDV5SUlNVU16T3JKdnh4VzJ5YkdteVhJR2NQWjFxcURKTUlWMnliR215WElJTVVNek9ySnZ4eFcyeWJHbXlYSVNXd1dVT1hFRlIxSFR5YlpKdXFJU1d3V1VPWEVGUjFIVHliWkp1cUlTV3dXVU9YWUtEN1p5NW5YRkRhbkp1Q0JIY0lJeHF6TFM1blhGRGFuSnVDQkhjSUl4cXpLeGtuQUZ5Um5KdUNCSGNJSXhxekxTNW5YVDg2bkp1U3AwV0lJeHF6TFM1blhGRGFuSnVDQkhjSUl4cXpMUzVuWFQ4Nm5KdGtuUzFISHpaeHBSY1NWR0lEbkp0a25TMUhIelp4cFJjU1ZHSURuSnRrTXY5Y25SODVGeUlKRTJNdEt5YmNXUHFjblI4NUZ5SUpFMk10S3liY1dQcWNuUWZoTUlJSkUyTXRLeWJjV1BxY25SODVGeUg1R3l1Q0tSRWRCS0ljblI4NUZ5SUpFMk10S3liY1dQcWNuUjg1RnlFRkxsRWpGeEh1QUlPY25RU2JLSUVGTGxFakZ4SHVBSU9jblFTYktJRUZMbEVqRnYxMEJtV3JKdnh4VzJ5YkdteVhJSU1VTXpPckp2eHhXMnliR215WElJTVVNeTVaSndIY0VUeWJHbXlYSUlNVU16T3JKdnVpQnp5YkdtTVdJSU1VTXpPckp2eHhXMnliR215WElJTVVNek9ySnZ1aUJ6eWJaSnVxSVNXd1dVT1hFRlIxSFR5YlpKdXFJU1d3V1VPWEVGUjFIVHliWkpMaW5KdUNCSGNJSXhxekxTNW5YRkRhbkp1UkdUNUlJSGZqSTFnd0FQcW5uSnVCRFFPSUl4cXpMUzVuWEZEYW5KdUNCSGNISXdSN0N5a1Jud3kxbkp1Q0JIY0lJeHF6TFM1blhGRGFuSnVDQkhjSEh6WnhwUmNTVkdJRG5KdGtuUzFISHpaeHBSY1NWR0lEbkp0a25TMUhIelp4cFJiZ3FRZmxLeWJjV1BxY25SODVGeUVNV21BTEtSRWRCS0ljblI4NUZ5SUpFMk10S3liY1dQcWNuUjg1RnlJSkUyTXRLeWJjVjIxY25SNHZXeUlGSUd0NUt5YmNXUHFjblI4NUZ5SUpFMk10S3liYm9tY2NuUVNiS0lFRkxsRWpGeEh1QUlPY25RU2JLSUVGTGxFakZ4SHVBSU9jblFTelkyeWJHbXlYSVNxTlhSdVhFRlI0STJ5YkVLQVBJSU1VTXpPckp2eHhXMnliR215WElJTVVNek9ySnZ4eFcyeWJHbXlYSUlNVU16T3JKdnh4VzJ5YkdsU1BJSVdyQ3cxSERKa0JBSnliRXdBV0lTV3dXVU9YRUZSMUhUeWJaSnVxSVNXd1dVT1hFRlIxSFR5YlpKdXFJU1d3V1VPWFlLRDdZMDgxTDI0Zm5KdUNBeHlIb3p1TFdJa1Jud3kxbkp1Q0JIY0lJeHF6TFM1blhGRGFuSnVDQkhjSUl4cXpMUzVuWEZEYW5KdUNCSGNJSXhxekxTNW5YRkRhbkp1Q0JIY0lJeHF6TFJrbkFVRUtuSnRrblMxSEh6WnhwUmNTVkdJRG5KdGtuUzFISHpaeHBSY1NWR0lEbkp0a012OWNuUVNiS0lJSkN6T3NLeWJicHhXY25SSW1EeUlKRTJNdEt5YmNXUHFjblI4NUZ5SUpFMk10S3liY1dQcWNuUjg1RnlJSkUyTXRLeWJjV1BxY25SODVGeUlKRTJNdEt5YmNXUHFjblI4NUZ5RUZMbEVqRnhIdUFJT2NuUVNiS0lFRkxsRWpGeEh1QUlPY25RU2JLSUVGTGxFakZ2MTBCbVdvWVNXZHBKeWJHbXlYSVQ1YkpQSXBFVGI1cUp5YkdteVhJSU1VTXpPckp2eHhXMnliR215WElJTVVNek9ySnZ4eFcyeWJHbXlYSUlNVU16T3JKdnh4VzJ5YkdteVhJSU1VTXpPckp2dWlCenliWkp1cUlTV3dXVU9YRUZSMUhUeWJaSnVxSVNXd1dVT1hFRlIxSFR5YlpKTGluSnQ4b0hTSUl4cXpMUzVuWEZBUm5KdUNaUnFJSXhxekxTNW5YRkRhbkp1Q0JIY0lJeHF6TFM1blhGRGFuSnVDQkhjSUl4cXpMUzVuWEZEYW5KdUNCSGNJSXhxekxTNW5YRkRhbkp1Q0JIY0hIelp4cFJjU1ZHSURuSnRrblMxSEh6WnhwUmNTVkdJRG5KdGtuUzFISHpaeHBIY1dCeERtS1B5Q1pUNWNuUjg1RnlJSkUyTXRLeWJjV1BxY25SODVGeUlKRTJNdEt5YmNXUHFjblI4NUZ5SUpFMk10S3liY1dQcWNuUjg1RnlJSkUyTXRLeWJjV1BxY25SODVGeUlKRTJNc0dTYjBxU3FjblFTYktJRUZMbEVqRnhIdUFJT2NuUVNiS0lFRkxsRWpGeEh1QUlFY25RU3pZMnliR215WElJSUhBeU1HTFFNU0p6eWJHbXlYSUlNVU16T3JKdnh4VzJ5YkdteVhJSU1VTXpPckp2eHhXMnliR215WElJTVVNek9ySnZ4eFcyeWJHbXlYSUlNVU16T3JKdnVsSnp5YkdtT1VJU1d3V1VPWEVGUjFIVHliWkp1cUlTV3dXVU9YRUZSMUhUeWJaSnVxSVNXd1dVT1hZS0Q3Wnk1blhGRGFuSnVDQkhjSUhGVm1YMTFPTXlId25KdUNCSGNJSXhxekxTNW5YRkRhbkp1Q0JIY0lJeHF6TFM1blhGRGFuSnVDQkhjSUl4cXpMUzVuWFVaeW5KdUJId01JSXc1dEsxNW5YVDg2bkp0a25TMUhIelp4cFJjU1ZHSURuSnRrblMxSEh6WnhwUmN0Q1E1RW5KdDZvUU9jblI4NUZ5SUpFMk10S3liY1dQcWNuUjh1RHlJSEVIeUFIbHlJWHlJY25STG1GSUlKRTJNdEt5YmNXUHFjblI4NUZ5RU1GMGduS3liYnFJcWNuUjVMQlNJSkN6T3NLeWJjV1BxY25SODVGeUVGTGxFakZ4SHVBSU9jblFTYktJRUZMbEVqRnhIdUJTU2NuUVNiS0lFSlpHZjdGdjEwQmw5WEVGUjFIVHliWkp1cUlTV3dXVU9YRUZSMUhUeWJaSnVxSVNXd1dVT1hFRlIxSFR5YlpKdXFJU1d3V1VPWEVGUjFIVHliWkp1cUlTV3dXVU9YRUZSMUhUeWJaSnVxSVNXd1dVT1hFRlIxSFR5YlpKdXFJU1d3V1VPWEVGUjFIVHliWkp1cUlTV3NDS1YyQzNBcEZSTjhZSExhRDBrQUZVRTZyYWJ1cGFWOFdQV2lveXBhQXg1TlhKRVRWMmI2V1BSZ0RHQUNWSGI2RUZEdVlIUjNBbFN2SXhrUlZKdWlLenR1Rkl1MUp2VmlWMlI4VkhxSkxIYnZEM1NvRlBaY3B5a0xWSHlNVjNadVpINTBCRlNabnZ0NlZKdGpaSWp2V3pMa0ZsWitJUkFjVkZSdVZLSU9IMldqbkhFellJZ2dFeTkwSEYxTkNReU9vUGdOQndBeUV6TmJJYUVOQjBOdlcxWjRCM0VEWDBSMkkyT1RKeGtLb2xXclpLQXZaUjVoR3d0a1pSOXRCd1NhWlVWOFp2MVpXdzBtQlBnT01QRDRDR1NjWkhxYXAweGxMUjViS3ZaMkFUTmJZd040WUZxUUV4Z1VEUFdzblRjaEV6T3dDSFNTTEpPY3B4RXpYbVYwRFVTcU1VT05wSEwvcDBabEoycGJNbHA3WVBFUk1JcXFvSEx2V0dXaldQRVFXbFdPSHhWMG4wUjVFUE1yRFFnWURUeC9KSlNGbnhNcW9tdWREUWdZRFR4L0p4Z0ZueE43SVRxYkVKeVBXSWJ4bkpwNFlLUi9NdzhnRDJ5ZEtGZ09IM0h1REpwY0pHQVBFdmJjV3ZnUW5RTW1NeExjbjEwYUQycUpYUE1SWXY1Vm94TGJvbFJiRUpWakN3SHVWRlJ2Q2xBRUcyeGNWRlJkQ2xmeUYxVjNFSElMbkZxWlZGZ0VXbVM2cnZSdVZHOGVWRlJ1Q2xmdVZGUmRXUFJ1V0Z5eVZGUnVWd051Rkl4d0psU3pBYVZ2VkZnblpKUnVGYU96WmxSaUQxQXlWSlY3RXhIdkx5ZmlaUFZmQzI1YlZITTFEMEx3RVFrT1p2V1RHUWdoVkgxUEdSUnZFeGptV0ZTQUYwOVZWSHlNWVM0d0tRRDJIUEQ5bng1SFdVRVlNeXR5S1BjdEdsWmFweDlKVnZ4M3AyRHVNVGZtVnZXc0JQNGFWdmY2RUZId0VtZmRubFJoQ3ZrdFd3YjlMdmp1WUdBSUJsQXBBUmN1VkZnblhROHpKRk1pWFBSY25KamhWRmduS3lSekpGTWlYUFJjbkpqdVZGa3Vvdkh1WUhSOEpQV3Nvd015TEo5QUYyYndvVUR4SFBnUW4weXNXbU1URnZqeFdKeDRGdlJrTEdSeVd5eHpvbHR1VklxVFhsUmVKdnVMV1BIOFpJYnVYMWJiSlBEeUNRUjNWRkxlRDJOdVhKeWVGUHFBTFVaZER5U0dDbXVUVjJnbVlIV3lFdmY3RXZiYm5GcVNMSk96QjBPbEZRWjdEUWdpcFFNVHFUZ0xvSExiRjBWMVpRSURISE1RR3l1R0dUcHpKUEVKV0lIdUt6MVNKekg2cFJWZ0JKeU1FM1d4VzF0dUNRamRWYWM2VkdqOFh2VndBd0V0WFBwZFd2VjBFdkRhRXZMdVgxYmVNUFIrTHpPVlZJYmJuSXh1WnZxTkZsUmxXMFpiVnY4ZkxIWnVadnFRWFBWaVlUUjdWdngzcVFEdllsQWFubFJ3RTFxVVZ3Z3NXeWZ3V3dFUUJGQXJMMXFVVkc1dkxRcHVXSFJiRlJ0MHFQVmRDMWNIcFQ4L0pKUjBxRzlucFBWeEV2dWlIR1IwTEh5RExITGJvbXhjRElXaVl5cVJNRmZmSXh0bUZ4cDFESnQvVktWdURHSXpZSnB6cUZ4ZURRY0dWSjVSRko0eUVsWnlLMWdyRVRIZEVtSHdESE9DTUhXREswV2ZNbHBsSXdBTkFHeXBxSnBhR0hwYkUxZzBHdkVPSVIxMEZGWmFFYVp6RDJ1b0RHRHZMU1dnbnhMYkdsTDBFSHVFWnhTT0h4V1FvSE10SDNIME1sTTBwS09URDBEZ0dHMWpNVHVlQzFwakd6RC9Jd2thbnpwYll2Z0ZBM095b3l0OUt5TmxxR2dWV1A1c0J3WnhMSFp1VkZIeEZsUnVWRkFFV3o1dkwyNU9JUkQwV1JTRkR4a2dEd0lKWXZXVExSMHlERlJ1VkZWL1ZJcUtabFp1VkY1UHB4TjZKUjljRVJ5b0F6cC9KSmNNVkhBQkpTQVlBUkVwcEhxTkIwanVGbDloS1RSMURJRVJBUEVPSHhXWm9IVjFJdjR2RXpPQVd2cHVDUWpkVmFjNlZJcUtabFp2bzI1S1dscGRXdlYwRUtFeUlTWnVYMWJlRFBTdkIwQXBWRjlaSXpadkZKOUxFUFNXRzI5VlZGSU9YUnVhV3lxaEtGV1NLU2ZmREk5V0R2V09IbGtOb3hBY25QYmpDS1N2S3pjUEFGeDJueE44QzFIekVQOXVJUHVOcHh1WllITVBJUUl4RHprb0wzT1RFU1IxWlJMYm9teGNDMXlDRUdad1dtRXJYeEl1cHlqM1ZIdVJCSUlQbjBreG8wV2VHVEVhRElIaEpQZ09JUkVkWDBFelpTWmJWRlJ1VkhidW96NG1YSFdFV0pEdkMxYmJWdnFOSXZxRk1ISXVMR04wWEc4NUxHZmhaUUVWWWxSdVZGVitXVHlhQlAxU0pUTnVGbFI0QTJrakRJQTFYUFdOQ1E4YU14UjNCSVdhWXpNcUhSa1NxUDhqR0ZSdVZGcHlWR2tCQkZwdUNSNDVXM1NuSm1jQ1lHMVpFbDVOQjExRk1SUjNXbDVlRVRJZEZtcGludmNsTTBPanBtU2pBVUVyRnljUkZKMWNwME1RTUpNY0RRaitwRnR2SzBFRldta1NWd1dwQlNEeklUZ05CYUFJblJEYVpJT3laVElEWXdEakZ3SGJCbDlib2xmNEZRdHpMMHVTWVF4MXFITjhDbUR5RVJEZ0FKRVVEeWoySzBTaUVTNGZZMUVmWEgxT0gzSHVweFIzS0diMVgwQXpYVDVTTDF5ekF3RXFIUnVCWTA1T1dKQVBBejQ1WnY4akZ4YjNESjhib0tFT0hKTDNaeFdlR0ZTME1scGJxRk1STXkxWENGWmFwVElVRFVSalhUdVRDSnBqcFJFWFhsYndEd0VybzB0OEZSRXNvUDlDQ0ZBcEVSZ1paR0gySndNZExIU0dxSUVPQ1AxdEV6OVZBUjQ3RzBPa0R5THhZMDl1SFRJUk1GY0ZWeFYybmxnZVkwOWNXeXg0QUtXREx2OUNMSU9jRHpqM0YyWnhCeFN0R1JFV29HMHZEemtOb1FqdW96MWZvSFNGSVBncEVKQW5BbTR1VkZSd0hGV1NNSkFtRUlnc1dtUmduSlIxRkpwYVhGTGhFSloxcUhIY0xhRDdvME10SXZqM1gwRGZIUXFSRkpTZll4SW5NeFpsRXhBd0htV1BvUDVGWDB0MEd6NXZFSHVEbkdNVENScGhCUkl3QUtFblhtMUZIbWJ3QXdFdFhUcHpxRjhtRVRMMEJRRU9CSEV1WXhMMHBUNC9ESUQ3bnZ1VFh2eVhZUFdTQlFid0V5TjNYUUlVSjJmOFhSTVJBSWJsRXZwNVlTU09JUWdkWFJMZFcyeWtEVVNQSXZFUG9ST2hEbFZkQlNWY1l3UmtYRzh1VkZSd0hGRC9GMkR2RXZ1aUhHUi9KSDh5SGxMMlp5dTBCMHR4cFVWNkZ5dUpMUWNhSm1Ed0JJU1JZSVZ1VkZIeEx2UnVWRlYrWEc4NUxHZ1NKMGtiTUZSNEEwdWlDS056TUlNU0EzRCtYUklMSWFPWFZGMGpWeXh1VkZIeEZsUnVWRkFFV0tSalZKa05CMTFGTVJSM1dsNWVFVElkRm1wZkF2NXFFUkx2WXY1Y1ZGUnVXUEx1Q1RPU1lsU01ZUWdOV1FIZEQwUnVDUjQ1V2xSOEd3eGFWR2tLWHZId29GdGZDRlI5WTEwbVZHNHdCMER1Q3dJU0h3UnpwR2NHRFRNd0ltUzZydlJ1TFJmYlZGU0tFRnB1WFAxc01QUmdCMk9EVkZSeEdtU1ZuSWdqS3h4alhhT3BERjAyR3h1V1pRRUVuMFp6cEp5WEZUeUhJbXlPWUhjQVgwdWNvek8wREYxR1ZhU1daUTFkQzB1ZFdQeVJJVE9QRjBJVm52ZnhMbHh4V1FqbURGMXlubU9XWlNOYVcwUmZwUDFWSGxrMUxKajdKeHVhcUZSOENQMHdERmtqWUh5T1lKNXZZRldpcEpEZUIxY1hGMDlPWVQ5Q1l2NGtCVDFHV1BEakpsU1RYVDlFWkhXZVp3TGxWRlJ1VnhMYll6eVFMeE1RREpwekRRZ0ZZUkxrTHhrV0FtT1hBRnQ2WTJ5dm5ReGNGeEwxQTBIZ1Z2TWhaUU1zSXpSaW96OG1FSE1RREpwekRRZ0ZJbGtSTXZIaEh2WjdCUWdZQzF1blhJTmhaUTFCQmxSdVZGQUVWME9iSjJjUUdIT05XUTFrQ3hNekR3RWVwVVdQQVBBSU1SVjBKSE11REdNWUQxa1NMbUlFWFJBYkF4TUNEd0VNRXZSdW96MWdXSExiRjBWdUR6ZmxBd0h1VkZSdkV2YmRXRk1lRUljekFta1RDUnBrQXhNdFhTODBFVE1FcVJPTkNROGFXMEFiSjJSd0V3MU5DbUhpWUZBTUdKcHpuM0h1RXhIaW5HVnVWRnVySXhMZFhIcDZFRkhjV0hwd0t2dG1WeEl3WVFqekRJRVBFdnR1VkZIeHBGUnVWRlYrWUg1VFlSdVNLUnlXb3ZSNEExU2NFUmJ1TWwwa0tJV1pJSElMSWFPWFZGMGlGeGJ1VkZIeEZsUnVWRkFFV0dmakF6OC9KenFUV1JJdUd4NTFESjlRQXhOdVZGSGFIS2J1Q0Y5cVpsUituMnQ5VkcwaUtHeHVDSUExQUZTVkdRUndWRlJ4R1FXNnJ2UnVWRlJ5VkZSdVZGZnVWRlJ1TVBSdVZGVi9CSEgxV0oxVEJGQWJIUlJnWXhTdkdsV0RuUzlWbktOd0R4UmdBbVduSHpNVnFQSVZuSTFxQnhSZ0ZHNXJIek1WcVBxR0ZUZ2JuUFI4Q21SeERGa2ZMUUR2Qkcwekl2UjhEUFNZWlRPbkJTeGpFR2ZlSHZSOENQMHdDSUVPRkZNT1lUOUNZdjRqbklJaVdLU3FMRk1SRkpEZHAwTGJGMFYxWTNOY0N5Z2FXeXlLWXZJSFdUdUtFUnlkcEpBVEszRUhWSElxSFExYldSOUhvSUVPSVJFbnAwRGhIVFNCRlFBMFZJY1RYUmdPQW11Q0hTRXJGUVplRUlqaFpSUm1YMEV6RHd4ZE1scGNLUk9Qb1QxaUJQV0RHbXhhRHlSeU1QVi9KdnR2VzBPSlcxWndaeWNCTTF1U0tUMXVwdlI0QTFTekR6anlEUER4bkpwNFlISUxJYU9YVkYwaUdIZnVWRnVyS3hxUFl4RCtESVdQRzNEL0pHRHZNMFNFWTF0alZGMDRCUlp1VkZSdVZ2RWNxUlYxVkZSdVZ2OTZyYWJ3SEg5Y1hGWjJBVE5iQXg1TlhKRVNwemtORHZSZ0RHQXNWSHFKSjB0dUN6V3RNbFNBRHg5YVZGNDluSnR2RW1NcVd2U1ZLUmdJVkpJSUdIUnVYbFdQWXZTeFZ5dHVWRjQ5cGFadlhtUmZvRlJnWkZrUFZsdWZvbHR2WHZBekNQU0FEeWdUVnY4ZkszVnVZSFNZSWxWZVpHWi9WR1N1WkhEdUNSSGtEdkR5WEp4elZGNTBDbER2RXhqK0tsVjdwR1dvbkYxTUp3anZCM1JsWUZSZHAxT2ZWelNhRnpSdkltcDdNbFphQnZrcVZsdGdJMEh1WkpSa0VQUjhFR1NQV1JPU1d2YnVZYUQvV1BBUUZUV3lWbXVnR0k1dld6RWlWdkFyTDJnelZtdWdHd1Z1WkpSa0VQUjhFR1NQVjFqMEF6dHdYMHFJTFBTeUlIa0dWRjFPSVVWdlhtUjhWbEFOb3ZNS1ZGNTBEU1p1WUZ5YXBsQXBBUXljVjBPaFp5ZnVaSDUwSnZTeUlIa0dWRjBjTTIwenBQZ1FuRkVORVVFeVdTUmlwd0x1WkpSa0VQUjhFR1NQV0ZJaFd3OHlXdlNwV3ZSZ1dsa2ZWRnljbjB0eUJSMG1vd3VIV3lFZURRY21JSnVSV21BaFp4TGNxRkwyRVJXQUdHMGVDSDA3RHhMY3FGTDJFUmI4SW1SbUphVmhaUmp6blFid1dHdXJLMU1SRkprRkwwRGhBbHFtWjFjbEUyZnVWRlJ2Q3dXbkd6cUxGUURtQlMxVExQdXNBUWtWRVM5ZloxY2xGUFZ1VkZSdkV2QTFxRklMRUljeHBIUm1KYVdzSUdrVkVTOWZFUnlXRHo0bUphV3NId3A4WjBJeUVJMURDSk5oWlBwK0Z4VjZDd01KSHhOakZ6VjFCeHhiS2xaMkFUTmJFSXFFQVJOdVh5RUdaUXA0WUhXQkNGeWpadlJ1VkZ1cklSTGJGMHlXVnpPeVdUdVBBU2Jjb3ZSdVZGQUVWdnQrSzA1YVdseVVCSFdmQlBEMVpGTWtCeUFTS0hMZVZ2UmdaR2JiVkZSYkt5SVRFUUlIVzJwYVhJTjJESVp3TW1Od0tJOUVxRlJ1V1FSNEV6T0pZUHgvSnd5b3AwRVdvR09nRXk5MElQU1NMMTFrQlE5bkZ3YmpWRlJ4WkdBUW5HMDJZSE10QnkwaERJRUJWR1NURUY5d1pQUnVXRkUxVkZSdVZ2THhXUlo4VjBJdUd4NTFESjlSS1VIdVZGUnZDdkVjTW10Z0VJdXRWSGZ1QlFxRW9ITjdaU0lxVkZSdVZ3OGhGMFdVRmxSdVh5MDJWYU5mWndMdnBQanpadkFFTHc0M1dIZ0Vvd2p3SEl4K0FsQUVKSEQ1V1FaNkVRSHpMMnlXRGxNd3B6cUFXekR1WEhEdVZGUndIRkFvS2FTSURRZmpJSkQvSHljSll2OGdWMXlBRUl0bEpSTHVZR1NXWUZSdVdGRUNWRlJ1Vnc0YUVIUmVBSElvblBJYlZGMGluMUh1VkZEa1l4T2xGUVJ5RUpTdE16NVNJMVIwRFBSZ1pITGZWRlJ4WkZmM28wRXdFR2JqRkprbUFLRDlEUTA4VzJXQ0FsUnVWRlYrWkZNa0J5QVNLSExlVnZSZ1pHYmJWRlJ5V0dOdVZGUndIRkFvS2FTSkRRZ0hIeTgvSnh1RElQUnVXRkVYVkZSdVZ3NHhuSnA0WUhJTExQU1lWR3QzS0hPUlkxcW1ZSEFiQUpEbFZGUnVWdzhlbzJ1SERsQUVKR1ZtVjFTTVp3WndISXhsWmxBRUpHNDNXSGdGV0lOeUYxU2JDdkFJSVRNdlYxUzBFU0h3SEljSkJ3U1VuSXB6RFNPem9hRGxMUnArWEdPWEZGY1hER1dWVjA0a0dUY2RXR096R3ljSERHV3dHRmZqTXk4eEV3V3lGU0QwWkhxWkpRNGxNRkQyWUhOMUt2WnpaR1NLQVIwa0xsRWdwbVNiQXQ9PdoFcGxhaW7aACkBcicAAAApFloJY3lfbG9hZGVycgIAAAByAwAAANoJRXhjZXB0aW9ucgwAAAByBQAAAHITAAAAcjQAAAByCgAAAHIQAAAAchIAAAByFgAAANoDc3RyciEAAAByHAAAAHImAAAAWgdQQVlMT0FEWgRNT0RFWghTQUxUX0hFWFoHS0VZX0VOVtoEY29kZdoEZXhlY3IIAAAAcggAAAByCAAAAHIJAAAA2gg8bW9kdWxlPgMAAABzIgAAAAIBFAEMASYCCAMIAwgDCAMSAxIHGAwOCAQBBAEEAQQCEgE="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
