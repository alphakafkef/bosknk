#!/usr/bin/env python3
# ultraenc final wrapper â€” keeps internals hidden
import base64, marshal

DATA = """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DAEIAXIDAAAAYUAwAABuS1dQV3ljNnJhYnVWSXFTV2xSYU0wMXVWRjFORmxqdVZGRUNaUlJnV1JnVkNKOXRYUUlPWUZFWUZHMWluRjQyREYweEYwYjlvM1YwQTBSZ1dSZ1lDS056Qnd1T1lGRVlHUTFqWTBON0NLTjRFdzA5cFJTWkNtMWpGeVdPQ0tPR0pSWjlwU2tyRUcxak1KRVFDS09obnh0OXBGV2pFbTFrWVBTWUNLUjFXMDA5cEc0Z0dtMWtFbUFFQ0tTREJITU5aSjBmSUlXekZVRGhESHgwblBnT1l4SGlJU1d6RlVEakgwdXRBbVdPRnhTcG5SZmNuM0lFREhjUExLWnVDUTlvRTBTVkwxRUlYUldPVng0YkR4VmFNbTFsWFNjdERGNXZGSDVPRkdIeVp4ZmNuM0lFREhjUExLWnVDUTlvRTBTVkwxRUtYUldPVng0YkR4VmFNbTFsQnpNQ0lScXNCU1dITFJwaW8wUmlXeU9iRjBIZlpUOU9ZbXVwb1JnU1lRT2pERjlYblVPWUVGampwSFJpS1VFMEYwSGZaVVdPRm05UVdsUjhDMXRsQjFjWEF6RWVvUWNwTFBSY0RUdVRYSkQrVzFia0UzWndwRlo1WUpqeUFQQWlBd2NWWjF5UG93T3pwR09VRVFPd0V2ZitCMFI0cHdSbEl3MVBYSkQrV1N4a0UyT2ZvbElnSlR5VkVUcHdIRjVQb1FxclkwSXduMmozRlFBTUR6NGpNYVJqRlJEakwwTGVDd2Y0WmFSa25HcUNFUHl4Q3ZFTVpIcW1WM1J3QkYxZldHRHdCVERtRlFBTUR6NGpNYVJqR0hEakIwdUJWRlJjVjBJTEhGQURGSnlhWUlqZEhISDVYR0FMSEZBREZKeWFZSWpkSEhINVhHQUxIRkFERkp5YVlJamRISEg1WEdBTEh4MXhEeDgzQlM0eUh2NGdKdjVERzFOZ1hIa29LemNsR2FPbElGRUJJUDA0WHp5YVlJamRISEg1WEdBTEhGQURGSnlhWUlqZEhISDVYR0FMSEZBREZKeWFZSWpkSEhINVhHQUxIRkFERkp5YVlJamRISEg1WEdBTEhGQURGSnlhWUlqZEhISDVYR0FMSEZBREZKeWFZSWpkSEhINVhHQUxIRkFERkp5YVlJamRISEg1WEdBTEhGQURGSnlhWUlqZEhISDVYR0FMRUhXTlh2UnVWRzlZWG1rcUptY1lLR3VNSlR5YlpLRXVJU1psQ1VFWUtHdU1KVHliR0ZJdElIOXNEUFNJcUhiaUV6eWJHejAvSUlJWVpTcW9MbURhbnp5YkdhQU9JSUlZWlNxb0xtRGFuenliR2FBT0lJSVlaU3FvTG1EYW56eWJHYUFPSUlJWVpTcUpJbGdPRlR5Ykd3MGlJSU5oSlBJWEVGUjRISnliWktFdUlTWmxDVUVZS0d1TUpUeWJaS1ZtWG1rSk16RUhIbVY4cVJncUJTeUxuSnRrcVRTSUlHeHhJSTVuWEZEYW5KdDlZSHVJSXhxeksxNW5YRkFwbkp1Q0JIY0lJdkFCS1NFT29TU25uSnVCWXZjSUl4cXpMU0VPb1NTbm5KdUJZdmNJSXhxekxTMU9NeUVMbkp1Q0JIY0lJdkFCSjE1blhGRHduSnQ5WUh1SUl4cXpLMTVuWEZBMG5KdUFBMk1ISG1WOHFSZ3FCU3lMV1FNSUZRTWNuUVMwTElFR1p3azBGMTA0SzI1Y25SODVGeUg1RUlXQ0tQeUNYYVdjblEwZ0ZTRTBNeUVxS3liY1ZGTWNuUjh1RHlJSExTZ0JLeWJjV1BJY25SNGVYSUlJSVFNTEtIU3pISnFjblI4dUR5SUpWMDVwS3c1dm52RWNuUTBnRlNIN1lTMXJLeWJjVkZNY25SSUxCSUlHV1NPTklQTUVGUnVjblFjaEt5RUdad2swRjBMaW5SSGVISFZ6Rkp5YlpLRXVJU1psQ0ZTcEVUYjJIMnliWmFSYUlTWmNBbFNBQjJmM01UeWJadjV6SVNBc0psRURHdkwzQkp5YkV3QVdJSU1VTXpPcFhIOGduMnliR2wxVElJV2pGdzlySnZ4eFd6eWJDUFZiSVN4NUMxdUZMbXkxcVR5Ylp2NXpJU0FzSmxFQUIyZmtwenliWjNPUUlJV2pGdzVvRTIxZFp6eWJaS0V1SVNaZEpVTmVDUzFvQnhncUJTeUxuSnRrcVRTSUEwWjFCMXlBcUcxYW5KdVRaMHlJSXZBQktTNW5YRkRhbkp1Q1ZIV0lISmN3WjBncUJTeUxuSnRsWDJJSElJdWxCSTVuWEZEYW5KdDlYeHFISDNTYVd4Y3RDUTVJbkp0a3FUU0lIUDVMV0lnd0FQcWxuSnVDQkhjSHFUTUhLeTVuWFVXaG5KdDdDSmNIcFI5d0FSandIMldNbkp0a3B3WmVDU016TVNFR1p3azBGMTA0Skl1Y25STGdFMUg1STE1REp6TDNLenljblFrUVoxRWtCd3Q2SkdXblgxdWNuUklMQklFMER3a0xKU1J3cEd1Y25SSVFaeUg3WVMxc0t5YmNXUHFjblJBMEsxRUhGd05mSXdneUJTNWNuUTB1RVNFS01ST1lKekwzS3pBY25STHVEMUgzRG1IN0gwRWpCR0ljblJFV29JRUdFUnh1RjEwNEpJdHhBeUlWQXp5YlpLRXVJU1psQ1VFSEtHV3RKSnliRVJBZUlTSDlMUUFCQlRxQ0syeWJadmd5SVNXZlhhU0FCMmZrSnp5Ylp5ZzFJU0VHQXY1SnB4TVhCenliR215WElJTVVNek9ySnZ1MUxUeWJDUlptSVNJQ29RSVlXeXFVSnp5YlpKZ3JJU1dmWGFTWExRaitIMnliQjBraUlTTDZERzFacUlOaVoyeWJadld2SVNabENVRVlFdjliRUZnRUR2TVduSnRrcVRTSEl3UjdDeWN6QTJTam5KdUNCSGNJSXdJbkt5dWZDbGd1bkp1QnAwU0lJSGZqSTFnd0FQcWRuSnVDWHhJSUhsRUREUzQrTGFOdm5KdUNCSGNJSVRPb0cxeUFxR2Nlbkp1Qm53NUlJSGZqSTFnd0FQcWRuSnVBblBTSUlIZmpJMXhsSndFTW5KdUNWSFdJSXdJbkt5U3pDSWMwbkp0a3FUU0hIbGNMcFBmOEtJZjZGMTA0Skl1Y25SQTBLMUg2S0hJTUt5YmJwbEljblI0aFh5SUpFMk10S0hTeklGU2NuUjRoWHlJSkUyTXNKSDExQ0hrY25SNGVYSUVtcGxFSkt5YmNXUHFjblI1ckJ5SDdZUzFyS3ZBVUwyeWNuUjg1RnlJSlYwNXBJUlNmSTFrY25SOGdFeUlHV1NPTkt5YmNXUEFjblJMbUZJSUpFMk1zRnhIdUFJRWNuUVNsWmxmOEl6TXhJU1psQ1VFWUtHdU1KVHliQjBraUlUOXBabGdNR0tIM0p6eWJDUzQ4SVVaZEZINUVNdzF1RDJ5YkVGdGNJVUVIRlNrRU13MXhFVHliR3Y0ZElJTVVNek9ySnZ4eFd6eWJHeVYySUdmZktJOXJWMHFyVkp5YkNGcVRJSUlpRlNjbk13cW9KenliQjNEYUlVT0NMbUVHTFFNUFkyeWJaeVdsSVNabENVRVlLR3VNSlBEMklIdDJuSnRrcVRTSEhtVjhxUmdxQlM5TG5KdDdEMmtISG1nUVZIZ09weU1wbkp0bFhURUhIMDFDV0hnT3B5YmJuSnQ4cDBBSHFSVjhKU2N6QTFnbm5KdUNCSGNIcVRNSEt5RU9vUjQ0bkp0MFZISUhJMkVOR1NNbEV4YmRuSnVBWXpBSEl4a0FDeWJpSXh4K25KdDdHVDlISWxFZUVIOUVYdlNobkp0a295OUhIbVY4cVJnVFkydVNYMVNQV3h5Y25RUzBMSUVHWndrMEcxUmNwSHFjblI1UVpJSDBFUU1sRjEwNExtdWNuUjg1RnlIN1lTMXNLeWJjVjJFY25SMGtNU0VpREZSYkZsTUtFM0VjblFaNlpJRUZxR09sRzJrU1lKSWNuUjAwTUlJSkN6T3JLeWJjVjFrY25SOHVEeUVKTTE5T0YxMDRKSXVjblFqa1lJRWhuU3R4STI5UEtQeWNuUVMwTElFR1h5dWpYbWtxSm1jWUtHdU1KVHliWktFdUlTWmxDVUVLQlRTRExUeWJHeExsSVQ1SkdQV1pxSU5icDJ5YkFQcVVJU3lZRjFjckp2dWlJSnliWkpncklTWmxDRlNYRUZSNEhKeWJaS0V1SVNabENVRUZZU3V4R3p5YkFQcVVJU3lZRjFjTUdLSDBDSnliWkpncklHcWFHSE9uWTFNV29UeWJFU1dqSVNabENVRVlLR3VNSlR5YlpLVm1YbWtKTXpFSEhtVjhxUmdxQlN5TG5KdGtxVFNISDFNSVdINDRNMUFWbkp1Q1ZIV0hvMkg1WVNJMUZ2OHZuSnVBV0pPSUczU1pWMGNTVkdnRm5KdVFxUzlIcFBnWVkxQXRBdzVqbkp0Nm95NUlBUkQycVJjU1ZHZ0ZuSnVBV0pPSUcxOC9wMUkxRnZqZW5KdUNaUnFIcEhaK0NTSHdHSldtbkp0a3FUU0hIbVY4cVJncUJTeUxXUU1JRlFNY25RUzBMSUVHWndrMEYxMDRKSXVjblFTMExJRUdJeUh5SUc1Ym5HcWNuUjg1RnlJRFl5dHZHVUlEWFRTY25RV3lWMUVJSlVWMklSU2ZHeXljblFEYUUxRUpYUUg2S3liYm8zSWNuUUFqRDFFSUpVVjJIbHlJWEtFY25RUzBMSUlHWUlMK0t3NXZvUmtjblFBQ0JTRUdJeUh3RjEwNEpJdWNuUVMwTElFR1p3azBGMExpblJIZUhIVnpGSnliWktFdUlTWmxDVUVZS0d1TUpUeWJaS0V1SVNabENVRUNvUkhkbzJ5YkFQcVVJSUF4V0hJSVYwMWNIVHliR2xFUUlJSXFDU3laQ3o1ZUp6eWJaS0V1SVNabENGV01uR2dURDJ5YkVTZ21JR01DSndTSVYwMWNKMnliWno0eklVU0lGdzFYTFFqK0h6eWJaS0V1SVNabENVRVlLR3VNSlR5YlpLRXVJU1pkSlVOZUNTMW9CeGdxQlN5TG5KdGtxVFNISG1WOHFSZ3FCU3lMbkp0a3FUU0hIbVY4cVJncUJTeXluSnVTVnZxSUJ3eGdJMVJpS1JrVm5KdUNCSGNIcVRNSEowZ3FCU3lMbkp0bHFQdUlJeHF6TFN5QXFHMXBuSnQ4S3drSHFTRVZKeDFsR1JBYW5KdGtxVFNISG1WOHFSZ3FCU3lMbkp0a3FUU0hIbVY4cVJncUJTeUxuSnRrcHdaZUNTTXpNU0VHWndrMEYxMDRKSXVjblFTMExJRUdad2swRjEwNEpJdWNuUVMwTElFR1p3azBGMTA0Skl1Y25RV3NWSUg1Q1JrQkt5YmNXUEljblI1ckJ5RUdad2swRjEwNExQeWNuUjg1RnlJSkUyTXJLUHlDWHk1Y25RU2tMU0VHWndrMEYxMDRKSXVjblFTMExJRUdad2swRjEwNEpJdWNuUVMwTElFR1p3azBGMTA0Skl0eEF5SVZBenliWktFdUlTWmxDVUVZS0d1TUpUeWJaS0V1SVNabENVRVlLR3VNSlR5YlpLRXVJU1psQ1VFWUtHdU1KVHliWktFdUlTSDlMUUFGRTNBZ1pKeWJaSjVzSVNabENGU0ZZU3V3cDJ5YlpLU3RJU1dmWGFTWUtHdU1KVHliWktFdUlTWmxDVUVZS0d1TUpUeWJaS0V1SVNabENVRVlLR3VNSlR5YlpLRXVJU1psQ1VFWUV2OWJFRmY4SXpFWlhta0pNUmplQ1NNeEdQZjhJekViWDFXZXBKT0NBbXVyV0gxMFZHYnVGeE1ZWDJnRW9VRWduUjlVTFI5MUcwdGluUEVDRXo1cEV5QUtGbHBjSDFxWG9GRUdJMGNnV1NBS0Z6U0RBVVprcDFEZUNTTXhHUGY4SXpFWlhta0pNUmplSHpna0xTT0NIUDBjR1BiaUdsTU5DUDFQcDBEYVoxWmJMUUFTbkpNVUlTamVHbEQwQTI1MUlJMDZES09jTWwxcFh5U1NCRnhtSlNSd0hSeWNNbDFwWHlTU0JGeG1KU1J3SFJ5Y01sMXBYeVNTQkZ4bUpTUndIUnljTWwxcEJTQUtHUXVZSDFxR255V2hDRzVuRno0OUN5Y0lvdzArS1Q5aENHNW5ISjQ5Q3ljWG5KcGdLUGNFRUd4Y1oxdUVWMU9XbkpwZ0tQY0VFR3hjWjF1RVYxT1duSnBnS1BjRUVHeGNaMXVFVjFPV25KcGdLUGNFRUd4Y1oxdUVWMU9XbkpwZ0tQY0VFR3hjWjF1RVYxT1duSnBnS1BjRUVHeGNaMXVFVjFPV25KcGdLUGNFRUd4Y1oxdUVWMU9XbkpwZ0tQY0VFR3hjWjF1RVYxT1dFeXQzVnpMdUJ5Y0REU09DSFAwY0dhT2xJRkVBSlNmanFIZ3JMeDlpR3c5V0sxMUNFbWozcEg5VUd4QW1HMHVRSkh0ZUNTeTBNUnVvSVFwaEMxdVdZMHgvSlJ4aUZHOUxGRjlXQzF1V1kweC9KUnhpRkc5TEZGOVdDMXVXWTB4L0pSeGlGRzlMRkY5V0MxdVdZMHgvSlJ4aUZHOUxGRjlzWEZBbUpRY2hDRzVNcDI0OUN5eWhYMVdlcEpPWkRSQXVwSDB2V1VBbUcxcW5LUDBlSFJ4dVkwQWJBbEVrRFRNRUZsOTZydlJ2REo4aFZGV09vbDR1VkdqbVdQUmdDMkFoVkZSeEdtU0FXUmJmV3hSZ1kwRGNHUldiRVRrT1lHTC9FeGdTcUlieERGMVdIMkQybkk5Y0MxRXRGMkFWRkY5Z01TNUFXUlJ6V0hSZ1kwRGNHUldzQ3pnT1lJY0tGeGdTcUlieERGMVdIMkQybkk5Y0MxRXRGMkFWRkdOdkVKeU9ZRjlSWEhrUEttNWVERjF3S0hnWUVLSW5XUlJnb0pnYkF6eXNuRzlITFJnd0ZSeGpWSmN3R0ZBc1d6NUFWMnRmbzAwd3BHV2pHRkR5QlVTQVdQNCtwMHhqWGFPekdGRDNxRkVPWUY5UlhIa1BJd3VkREY0OFd5T1lFS0luV1JSaEV3RWdBenlzbkc5SExSZ3dGUnhqQVBTZEZUeWVZMldXWlEwYW9SdWNubDl2RkdPVEtKMU9ZRjlSWEhrUFhUOXlERjV0Q3lFWUVLSW5XUlJobnhra0F6eXNuRzlITFJnd0ZSeGpHMkFoREYwaUVQeVpEd1MxTXhSaHB4Y0pGMEkxSnZFT1l6Y1pwR01jSzJ4L0lUT1lMMHVXWlN1Y28wUmdZMERjR1JWN1d6cU9ZbE1ESTBnU3FJYnhERjVkR1VSMm5JOWNDMUV0RjJBVkZHT3VvM09PWUY5UlhIa1BFUGtiREY4aUl5dVlFS0luV1JSaG54a2tBenlzbkc5SExSZ3dGUnhqbmFJa0RGMGlFUHlaRHgwbG5IUmlCU2tNRjBJMUp2RU9ZemNacEdNY0syeC9JVE9ZTDB1V1pVRHpxSFJpRFFOY0RRTjZvUzFGTXh5YUIxV3pGSnFOSHpNV01tZ0ZNeHlhRElXekZKcDdIek1XTTBXRk14eWFCMVd6RkpxUUh6TVZxUXlHRkdPd0hITDVGU2diSHpNVnFRY1RCSWptQTBSaUtIOWZIek1WcVFnVEJJWmdBeFJpTXlJaUh6TVZxUTFUQklqbUEwdWRMMEVSSDB5UVlSOHVDUk5tRlJSalZtVnlGbGJ4RlFPVm56a01IeHVkTDFNWVZHa05aMGNIRXZqbUcxRXRFbDlpRUdqYUdIajdKeGIyblFiakZ4ZndBd2IwWXdOM0hhTnVEUXVlSXp5REJ2ODlLVFI3TDB0a0xta3RweU1vVkZnRVdRTzZydlJ1VkZwd1ZGUnVZRkh1VkZXeUlQUnVXRnFLVkZSdVZ4dHVYYU5oTEZTVktRMDNWSGNhTFJqdUVIZmtXUFJnV3ZxQlZGeWNvVVp1RVMxSHBKcGFaeVplRVJ5eEpsTWFXbVZ6VjBFeUkxMWdJbWprTDFEaW5UZzFKMFd4bnZ5SFZ3eDRFRkl0WjBNUFhJcDdxSlp5QVJJTUZJNVNMSk9CcDBPZ0JTRUVBUkRpQUhBT0lGTGpBbUVtRGFEZlZHY2paVGJ1VkZIOE1SSGZCVVpoRDA0dUxGZ1NMd04rRXdFUktVU1VEUWdaVkhmaW52Y3dKUkVXb3ZwbUVJNHpLenR1VkZSdld2RDRFd2NmWkpaM1pSMG1XYVdvV3ZSOENQYnZyYWJ1STFwbVZsVjVCUkh5WkhWM0QxRVNxR0VmSWxSaEFUQURXd2NUSGxEdVp2cU5GbFJsWlJJaVZGUmRYUTR1THdmNlpQUmdZbVdQVkZSeVdSWnVWRlJ2Q3ZBRUcyeGNJbWpiS0lNVExTTGZBMEl3R0lTYVZGUnlXUmZ1VkZSdkN2SVlGUmJpWVNTV014SVNKVVZnR0ZSZUhGRGpyYWJ1VkZSYVZsUnVWRjB5VkZSdk1JRHVWRkhhSWxSdVZGV1ZWRmNqWXpSdUZTajlBbFNYTTJPWlZISVlaRkR1WUZMYUd2UmNuSmo4Vnd4NEVGSVNJMmtURGxSZ1ltNVRWRlJ5V1I4dVZGUnZDdkVjTW10Z0VJdXRWSGZ1WUY5REdQUnVWd2dUVkZSeVdSMHVWRlJ3TFBTbHB3anhDS1ovQWxSMklJdU5BUXFoQ21BUkJHVnpXeUQ2RnpTa013amJaVEl6Q0k0dUdtdGtFMnFtRkdXdEd6TUNwRzVjWlQ4Yk14NTBWR1dzREZBa1p4cWZXS1I3RW1ieURHZ3VwMGNJWTA5bENsZm1YMEVtblVjNlZGUnVXbFp1VkZSZ1dGUnVWeklIVkZSeVcxcHVWRlJ2RlBSZHBQNXVWSHVwQ0dwdUZ6cXRHUFNTRm1SeFZGMHpXMDR1WEp5ZkNQVjVCUkh5RUlxZkV4WnVZRjgrRXZSdVZ4cVlNbE0xSFE1T0lSRXpWdlJ1VkZWK1dHTmdERjVTSlR4YUdQUnlNR09CVkYwaUgwMHVWRngyTWxSdVZGV1RWYUVBRTE4ak1LRVpNdlYrRVNPd1pHU1pDSlc2cnZSdVZGcHdWRlJ1WUZIdVZGV3lJUFJ1V0ZxS1ZGUnVWeHR1WGFOaExGU1ZLUTAzVkhjYUxSanVFSGZrV1BSZ1d2cUJWRnljb1FqdkJHdVNXSElLb1JNUVZGMGlDeEx1VkZXVUYycHpxVGdoRFNJTEJKWnVWRlJ2Q3ZIallIUmhFSXVjVzBqdVd2Z1BIRlJnWTFBQVZGUmNBekR1VkZSdllsUjhDUGJ2cmFidUkxcG1WbFY1QlJIeVpIVjNEMUVTcUdFZklsUmhBVEFEV3djVEhsRHVadnFORmxSbFpSSWlWRlJkWFE0dUx3ZjZaUFJnWW1XUFZGUnlXUlp1VkZSdkN2QUVHMnhjWXdONFlGZ05JSXFzSG1PZk1TZnpWRlJ5V1JmdVZGUnZDdklZRlJiaVpUT0paSVdTSlVWZ0dGUmVIRkRqcmFidVZGUmFWbFJ1VkYweVZGUnZNSUR1VkZIYUlsUnVWRldWVkZjall6UnVGU2o5QWxTWE0yT1pWSElZWkZEdVlGTGFHdlJjbkpqOFZ3eDRFRklTSTJrVERsUmdZbTVUVkZSdkUwZ2FXbHVrbzBPSUl2RDBXVHlhQlAxU0pUTnVGbFJnWTFPWlZGUnZMeVp1VkZIeEdGUnVWRlZpVkdqOFh2VzZydlNLSW1ad1Z3eDRFRkhrRHdxUUlSSTFBVGtLVkY0MEwxTnpCeE1HV1BSbFcwT1lWR1ZqRUo4dVZGYmJDdlN2Qm1ialZGMGlaeFZ1VkZIeERsUnVWRlYrVjFTQ25GeGhaUXRnWDBPSUkxOUdaSDVTb0Z0dVZGSHhGbFJ1VkZWK1dIZ1ZGdjhrRHdxUUlSSUxwdjFBVkZnRVdRTzZydlJ1VkZwd1ZGUnVZRkh1VkZXeUlQUnVXRnFLVkZSdVZ4dHVYYU5oTEZTVktRMDNWSGNhTFJqdUVIZmtXUFJnV3ZxQlZGeWNvUWp2Qkd1U1dISUtvUk1RVkYwaUN4THVWRldVRjJwYVhVU2lEU0lKWHdMeG5KcDRZSElMTFBTWVZGMGlIUmp1VkZXYklGUnVXRkVBVkZSdVYyTnVDUWpkVnpwekl5U0tWSExmRGxEZUgyamVFSHRtQUd5T1gxQWZGSldRTTJ1SVhIRXlYUmNQRTExc0pROU5CejlFQzNjY1dsOUxxSnB6b1JEOEVKNUlKR1dSTUl0ZURsV3RNRkViRHdFcU1QU1RYUHFORnZXdEgwZ2xFUmdDSG1IMkZ3Z1ZCenB6cUc0MURJRHhabGNVRHY1UkN4U3NGR3hpRHpqaEVtdHZMVDVZbjBTSFpQdGdFd3lBSlJIdUFLSGdMUkxjcVJreUV6T0pJMXR1THc1ZnB2U3hZMVo4VjE0YlpsV1NMbGo4V3hTc0ZISGlEUWoyR1FNUk15RU9vUFZjRVRxd0NLTmlJeWNPWnY0Mm54QUJWSk45Q0tOaUl5Y09aeE9Qb1JBQlZKTi9DS09ZVnk5TkNUa0xZUlIyRm1jdER6MUNabDVPQlE4ZG8wSUxJYU9YVkZJT1pKOGJEdzFUQlJJblZ6eUtWRjBpcVN0dVZGSHhKRlJ1VkZWK1hLSWlwbTFTSklBRUhsUmdZMWtEVkZSeVdSeHVWRlJ2Q3ZIallIUmhNbHFzbm15TkNUa0xZUlI1RVVOYkV3amtFUzR1WUd5bXBsUnVWRlJ4Vnd5UEl4cHZCSFdKRWxmNUIxRVVWd3lPSWxmdkJIU0tYbFY1RElwZVhteDdMUmZ3SElieUZsZjVDU0F3WG14OEgyWndISWNRSUY5d0xtY29XUVorWlBwdVZGUnZZM2M2cmFidm8yNUtXbU1CRFB5eEV2QUxZdlZ1WXZBRVh2UmxXME5hVkgxWUdLTnVZSFI1TEZWYkl4dVpWRjUwQnlSdVh3eGlDUHVxTElIN1ZGUmRYUlJ2RUl1ekpQUzFEM1djVkdrU1pGcHVZUzljb1BSZUp2dGhWRklPV0hxU0phRVhMUFJnR3o1aVZGUmNHSWNGRVF0Mkt5V1FuVUFuSHhXblpIOUZKSXBkSUlBTEZGdU1IMXVXQVMxR0pSdXpZVDQ5Q2FJRW93MCtxSTFoQ0c1MUoyNDlDYUlEb3cwK3FJMGVIemdrbklia1hta0RKSmN5WjFPWVd5TDhDejQ5Q2FJQ293MC9WbFNoQ0c1MUkyNDlDbFpib3cwK3FJY2hDRzUxR2xnRm4zU2RGbHRmQ3ZTcEVUeHhxVDQ5Q2FJbm93MCtxSXFjTVREdUkxQUxGR1NwSDF1Vm5TV0dKUnh2RkhiN0x5SG1Zd2tHblVOdVZGeUFKeVdSQlFNckh4QWJwMWNGRHlia0cxV01JbGNJSDF1V1hTeUdKUngwS0lBTEZUTGZvdzArcUlTaENHNTFLSjQ5Q2FJb293MCtxSU9oQ0c1MUtGZ0ZuM1NjSndSZUNTU1lLeldEVjExUUIwU29GMTV2SFBBcldVU0dLU3lkTUdBQ0tJNUpGeWdNbnpIbUcxY2FMSDVGS1FSeUpReHVMMDRpQXZaYVhteWZFVHB3S0dEZ25KUjFGSnB6SkhOa1Z4RGNNMmtUSFFNdU0wSUxJYU9YVkYwaUZ4YnVWRkh4RnZSdVZGVitXR05nREY1YVcxTXlCUk44b1N0ZkRHeGxGRkQwQkZqL0tISW1LMjFXVkZSdVdQRHVDSFNjQ0ZSOHB5V1RabWpqV1NjTk15U1lZM2M2VkZTS0VGcHVWSnlFWEZSYllJOXhWRjArQnhadVZGSCtBeEw1VjJ1RERGMGhESldIRUdTc01SeGlveXFqQXp5ckdISVdaUFdxcHh4alhhT3FGVHl6TG1nR0ZRMG1ESEw1QlBiN0ZUeWpXeEFRV211a014UmdEUXVzRXo5bkhTY1RCSVN1bnlXekZVRHpGVHl6TG1nT1lJQUdZSGZjbjNJRUVHNG1GM0lUQkpINUJSUmdKMGN0SHpNVnFQeUdGUjlFRWxSOEMxdDZGVHl6TG1nT1l2U1JMSVd6RlVEYUgwdUxFSE1UQkd0ZEIwUmhYeGN3SHpNVnFQMVRCdmdZQjBSaEN2dDFFd2JtRkZXWVhKa3ZNMUV0RWw5aUVHNGxGSUFSRFNTb0ZGUjhDUDB3Q0lFUnFRRDdKeGNZRzBSZm8wOGhZd1NIWHo0ZW8ydUhEMnB6SndIL1lTa0pCeFNTWUZWem93TjFxVE41RTNTQkxSY1JNSElmcVA5aEJUcDZaUUxrSW1xT0hsQXJEME9sRTIxYkFUU0JCMTlSTWxrd0JIU0hEdzFTRTBSYkhGYmVFSUw2WXZnUU13NGZESUVIV3ZjUG9URXJXSEhlR3h1MURJV2ZvMmtSRkpTZlhSTVNCU1YyRDJ0M0psOVBvUXFGWEZnU3BIWjdESGdNb1A4ZUVUVzBBeFYwSnZiZURRa0VXMjVRTTJxeG5SU1pvYUFVRHg5bENQOVRYUnVYQVJTenFSMTFEVVNxRXpjVXBQRXVDME42SlJrYkQyeHZERzVPQTEwM01IV2ZBMGdnWDBBSFlhSGVFS1IzQlBnUlYxOGdFUmdaVm1PUW5GV09DeFNpRVM0ekVUTWFYR0VSRVBEem9QUnVWRkFhSDFxWEkzV0dJMGNQbjFBS0ZscGNIMXFYRHpnR0kwY3hWSUFLRnl1QW93MCtKdkloQ0c1blZKNDlDeXllb3cwK0p2NGVIemdrTFIxTEptTzFHYU9sSUZFWVlHWmxxUnRtQUd4MFgwSXFHMFJ1VkZ5QUp4OVVWRkloRzB0aW5QRUNFbWozcEg5VkZsSGFHMHVyb0lxR0kwY2pXSUFLRnpEdUgxcVhEemdHSTBmbUtKNDlDeXkxb3cwK0p2RWhDRzVNb3ZmL0QxcWVWd2twTW1OZUVKU0NLRlJ1Vkc5WVhta0pNUmplQ1NNeEdQZjhJekVaWG1rSk16RUFueXFaTTBjUnFKTVJuSk1ocUlTREthU3ZKUmNScUpNU293MCtKdmtoQ0c1TXAyV3NIU2tNRzB4K0lGOUNFeWNibjA5VkZsSGFHME0xSFNxWExRZ2lFSnl6b2FJRUhTNWtMeXVYRVVJekVUeXlwbVptWG1rSk1SamVDU014R1BmOEl6RVpYbWtKTVJraENHNU1vSld2cDNaeEcwTW5uVGdDRTJ5SlZIOVVHeEFtRzB1Rm5UQWhDRzVNbjI0OUN5YndYMVdlcEpPQ0FtdXJXSDEwVkdidUZ4TVlYMmdGWXYxbll4MUxKbU8xR2FPbElGRVlZR1pscVJNdERSV3FWRlZhblRmZUNTTXhHUGY4SXpFWlhta0pNUmplQ1Mxb1dJVmZKUTlwbkpNaHFJU0RLYVN2SlJjUnFKTVJuSk1pVjJPR0kwZmpZU0FLRnljQ0dTZ3JuYVdGRkh1d1kwY1RGbGdlRzIxaHBQcVlES1ZmRlR5em9hSUVIUzVrTHl1WEVVSXpFVHl6b2FJRUdKY0xvYU5lQ1NNeEdQZjhJekVaWG1rSk1SamVDU016cHlBS0Z4SWZIMXFZWjEwbUphV3NNMFdFSG04NEV2QWVwbDFOQjI5akFITVFNd3h2RHdMeUVLRGlvMU93RG1OMEZ6Y09GUUhpWElBT0gzSHhISFNIR0tOeER3RUxCbWdQRzFSdW5IV2VaUlNFVmFEdkVscVVLSWJicVBIdVZKeTFWRlJiS3ljU0x2OW5uSEFiSjJBMUV3RWpvdzlPSVFnZFhSTGRYSGJmVnhINEJ2QVRIUU1lQ3hTSVd3ajdZSnl1QUh5U0tHMHlWRlJnWlVBMFZGUmJLeUFOSlFNblp4TVJuM1ZlRVNMK1lsZ09CRk1qcEZSdVZ4cURFSTFDWkZadUJRcUVNUk44Q2FWbVZ4QWZEU2tPSzB4MlkwSXZwMHBsRUpWaUVTMVBIUkVGWUhBYW5TSGNFVEhkbjNadVZGUnZDdkVjTW10Z0VJdXRWSGZ1QlFxbk0wU0dxRnR4RDJ0MXBtTHVWRkhhTEtidUNSNDVabFI5WTEwaVZHMU9uR3h1Q0Y5cURGU01MeXg2VklxbENsdHZCSUFZWVBXTEpRTUdWSHVaSUY4dVZGRVpZM2M2VkZSdVZGVnVWRlJ1QmxSdVZGU3hWRlJ1Vnc5aExsOUxuSEw1V1JBdEZseWVxSVNUQkZFam92UjhEUUFPREYweEwxV0ZNeHUwVjBMNURGUjBERjAybzFFRk14dTBXSEw1REZSMERGMVdXeU1GTXh1MFYwTDVERlIwREYxRllTcUZNeHUwV0hMNURGUjBERjFvWnl1Rk14dTBWMEw1REZSMERGMXhCU3lGTXh1MFdITDVERlIwREYxaE1ISVlYSmcxSEhMNUZTZ2JERjR1RVNmYkR4VmFNMGZjcFJWd0V3eXBEeEFPWXZqYlpsUjhEUmdXREY0bUFJRVNNMUlrRjBmY0x6OURFd3h4RDJPWVhKZzFISEw1b0hqdVZHa05Wd2tWbklXb01SQVBESDl2RXd4eHBUNHVDUk5tREhMNVl2U2pWR2tOWjBjWVhKV2lIUkVTWHZXUkRGNVNESU1Tb3Zaa1p4ZmNMejlERXd4eEQyT1lYSmcxSEhMNlh5dHdWR2tOVklJVEJGRWpvdlI4RFFBT0V3eGhWS051Q1JObURITDZaeUljWFJXUFcycHVDUTlMWkdnbkZ3TUxCd0FmcDBmZUVIU0RYUFJ1V0drV1htNVVWSWJlSVIxWUR4TUpubHlNVkZFU253eDZNSXRpSlBnT0FIZzFYME9PcEZSMkIwY3RESGtXRXp5UVgwTDBZUURrWHhBcUl2UnVWRlNPWTBneG4yTjJWR0g5V21jV0ZRa2dCeGNUWTA4ZUR2MDBLbXlUQjI1YVZ2U1BEeFdWQUlXYklsZ09Mek8wQ0lxYURRSDJvRmdjb0d5YUl5TTFBYVJhbnc0OFhUOXRXbGtmTVQ5VFdRTXBuRjlDRlNEZVhSOVVYdmdpRzBNZkZ4V0JCd2tRVngwdldVQW1HeUlLR1BBQVZ2RW1wMVZtQVI4MVgwSU5HSk51VkZIeEpsUnVWRlYrV3YwY0tRU1NKSFNTSEZSZ0dQcTBWRlJjR0ljQ0UwSDlweDlUSnp1ZUcwdXFaRnlDRXljYm4wOVVuSUx1RzBxVVdIZ0dJMGZ4WFNBS0Z4NWlIMXFYRlM5WEIyeTFNMDlVR3hBbUcwcWVCbHhlQ0lXc0N2MWNMR0lXTWxNMUFHU1BBSTl6Q3ZSdVZGVitZeGdQRTBnYVd6anpZUk1EQXo0MEVSZmFMUTlTS1QxdXB2UjRBMXExRlBBaFhRMVJZM1NTQVBSdVdGSHZWRlJ1Vnc0M1pQUjdNeElxQ0ZIdVZGSU5wSU52TFQ0Mkx4V2ZZemp1VkZSdVZ3NHhuSnA0WUhJTExQU1lWR3QzSEp1Uk12cHpNRlJ1VkZWL0NHeHpDRkR1VkZiL1hsV2pWenhnVktXY0R2dHVwenlQWFBTbG5IVmJWS1djRHZ4dXB6TjhYUFNsTFFqYlZLV3RDUHR1cHpOOFhGU2xJbUxiVktXS0F2dHVweXAyWFBTbEkwdGlXdjA4Wkc0d0hJeGZaRkFFSkdWbVYxU01ZUVJ3SEl4bFpsQUVKRmprVjFTTVp3RHZwUFcxWkhJc0F3am1WRklPcVFOMEJGai9LSElwb0pTbFZGY0hHSHFQbmx1YXBsV2lveXBhRUlqaEEyZnVZR09DblBSdVdGRWFWRlJ1Vnc0bHFKeWpKSElxWHoxMFZHdDNGU09TS0tBV1dsUmRJUmtmQjB5bUR4VndWS0ViVjBTR1YyU3NWbTA3SHZ5UW5GVnhBdzFqQW1JbkQyeW1CMjB3Q0dmM1pSSXdDenhlQ0tOM0FJZ1ZWS0VHb2xadXFIWmNEemtncFBqZ0d4TGZGUklyTWxEaVZGMGpGSkx1VkZIeVpGUnVWRlYrQUdMYkp6T2FXbVZpWUhJd1ZtTGZFSTRqSUZ4dVlHU0xadlJ1V0ZFa1ZGUnVWdzRtQ1FOeEp4SXJLS1poVkYwa0ptWnVWRkh4RnZSdVZGVitXVHlhQlAxU0pTTWpGdlJnWTAxWVZGUmJLeXgwRVRMdkZITXNuMU1FVkdqOFh2V1RXUXlGWFBSdW5JRGxWRzBpS0dadUNGOXRaUFI4TFJIZVZHa3RFRmZ1Q1RPU1hsUjhMUkhlVkdrdEVGZnVDVE9TWGxTTFd4NCtWRzBpS0dSdUN2WjRERlI4cHlSNVZHMU9uR0hkSlJFMUl2cVRBSUl5WnY1UVYwOU5JdnBlWVJSbEZQV21aUjlmcEhrTm9RSWxGbVNiWW15bFpKQU5DMGZrRlA0a1cwU2NJekhqWlRNUUxLWmxYSjhsWXdSa0xRYndadjQ2V2xibExQYjlXeE9FWUY4elowU1NDdD092gVwbGFpbtoAKQFyJwAAACkWWgljeV9sb2FkZXJyAgAAAHIDAAAA2glFeGNlcHRpb25yDAAAAHIFAAAAchMAAAByNAAAAHIKAAAAchAAAAByEgAAAHIWAAAA2gNzdHJyIQAAAHIcAAAAciYAAABaB1BBWUxPQURaBE1PREVaCFNBTFRfSEVYWgdLRVlfRU5W2gRjb2Rl2gRleGVjcggAAAByCAAAAHIIAAAAcgkAAADaCDxtb2R1bGU+AwAAAHMiAAAAAgEUAQwBJgIIAwgDCAMIAxIDEgcYDA4IBAEEAQQBBAISAQ=="""

try:
    blob = base64.b64decode(DATA)
    code = marshal.loads(blob)
    exec(code)
except Exception as e:
    print("Hata:", e)
